
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08007a00  08007a00  00008a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d0  080082d0  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000092d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082d4  080082d4  000092d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080082d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000078  08008350  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08008350  0000a534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f8f  00000000  00000000  0000a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313e  00000000  00000000  0001b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0e  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019684  00000000  00000000  0001fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015159  00000000  00000000  000393a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8e9  00000000  00000000  0004e4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dade4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c0  00000000  00000000  000dae28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000df1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080079e8 	.word	0x080079e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080079e8 	.word	0x080079e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b3d      	ldr	r3, [pc, #244]	@ (8000264 <MX_ADC1_Init+0x108>)
 800016e:	4a3e      	ldr	r2, [pc, #248]	@ (8000268 <MX_ADC1_Init+0x10c>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b3c      	ldr	r3, [pc, #240]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b3a      	ldr	r3, [pc, #232]	@ (8000264 <MX_ADC1_Init+0x108>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b38      	ldr	r3, [pc, #224]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b37      	ldr	r3, [pc, #220]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b35      	ldr	r3, [pc, #212]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000194:	4b33      	ldr	r3, [pc, #204]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000196:	2206      	movs	r2, #6
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4832      	ldr	r0, [pc, #200]	@ (8000264 <MX_ADC1_Init+0x108>)
 800019c:	f001 fa1c 	bl	80015d8 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fc98 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001b2:	2301      	movs	r3, #1
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	482a      	ldr	r0, [pc, #168]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001bc:	f001 fc9c 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fc88 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	4823      	ldr	r0, [pc, #140]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001d8:	f001 fc8e 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fc7a 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001e6:	2302      	movs	r3, #2
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	481c      	ldr	r0, [pc, #112]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001f4:	f001 fc80 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fc6c 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000206:	2304      	movs	r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000210:	f001 fc72 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800021a:	f000 fc5e 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800021e:	2310      	movs	r3, #16
 8000220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000222:	2305      	movs	r3, #5
 8000224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000226:	2304      	movs	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	480d      	ldr	r0, [pc, #52]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000230:	f001 fc62 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800023a:	f000 fc4e 	bl	8000ada <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800023e:	2311      	movs	r3, #17
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000242:	2306      	movs	r3, #6
 8000244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <MX_ADC1_Init+0x108>)
 800024c:	f001 fc54 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000256:	f000 fc40 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2c      	ldr	r2, [pc, #176]	@ (8000338 <HAL_ADC_MspInit+0xcc>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d151      	bne.n	8000330 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2a      	ldr	r2, [pc, #168]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b28      	ldr	r3, [pc, #160]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b25      	ldr	r3, [pc, #148]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a24      	ldr	r2, [pc, #144]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002bc:	230f      	movs	r3, #15
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	481d      	ldr	r0, [pc, #116]	@ (8000340 <HAL_ADC_MspInit+0xd4>)
 80002cc:	f002 fa8e 	bl	80027ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <HAL_ADC_MspInit+0xdc>)
 80002d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000304:	480f      	ldr	r0, [pc, #60]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000306:	f001 ffc3 	bl	8002290 <HAL_DMA_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000310:	f000 fbe3 	bl	8000ada <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000318:	621a      	str	r2, [r3, #32]
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2012      	movs	r0, #18
 8000326:	f001 ff70 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800032a:	2012      	movs	r0, #18
 800032c:	f001 ff89 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40012400 	.word	0x40012400
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800
 8000344:	200000c4 	.word	0x200000c4
 8000348:	40020008 	.word	0x40020008

0800034c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	200b      	movs	r0, #11
 8000370:	f001 ff4b 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000374:	200b      	movs	r0, #11
 8000376:	f001 ff64 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	200c      	movs	r0, #12
 8000380:	f001 ff43 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000384:	200c      	movs	r0, #12
 8000386:	f001 ff5c 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200d      	movs	r0, #13
 8000390:	f001 ff3b 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000394:	200d      	movs	r0, #13
 8000396:	f001 ff54 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2010      	movs	r0, #16
 80003a0:	f001 ff33 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003a4:	2010      	movs	r0, #16
 80003a6:	f001 ff4c 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2011      	movs	r0, #17
 80003b0:	f001 ff2b 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003b4:	2011      	movs	r0, #17
 80003b6:	f001 ff44 	bl	8002242 <HAL_NVIC_EnableIRQ>

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b44      	ldr	r3, [pc, #272]	@ (80004f0 <MX_GPIO_Init+0x128>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a43      	ldr	r2, [pc, #268]	@ (80004f0 <MX_GPIO_Init+0x128>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b41      	ldr	r3, [pc, #260]	@ (80004f0 <MX_GPIO_Init+0x128>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b3e      	ldr	r3, [pc, #248]	@ (80004f0 <MX_GPIO_Init+0x128>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a3d      	ldr	r2, [pc, #244]	@ (80004f0 <MX_GPIO_Init+0x128>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b3b      	ldr	r3, [pc, #236]	@ (80004f0 <MX_GPIO_Init+0x128>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b38      	ldr	r3, [pc, #224]	@ (80004f0 <MX_GPIO_Init+0x128>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a37      	ldr	r2, [pc, #220]	@ (80004f0 <MX_GPIO_Init+0x128>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b35      	ldr	r3, [pc, #212]	@ (80004f0 <MX_GPIO_Init+0x128>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <MX_GPIO_Init+0x128>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <MX_GPIO_Init+0x128>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b2f      	ldr	r3, [pc, #188]	@ (80004f0 <MX_GPIO_Init+0x128>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000442:	482c      	ldr	r0, [pc, #176]	@ (80004f4 <MX_GPIO_Init+0x12c>)
 8000444:	f002 fb56 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2103      	movs	r1, #3
 800044c:	482a      	ldr	r0, [pc, #168]	@ (80004f8 <MX_GPIO_Init+0x130>)
 800044e:	f002 fb51 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000458:	4827      	ldr	r0, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0x130>)
 800045a:	f002 fb4b 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	481f      	ldr	r0, [pc, #124]	@ (80004f4 <MX_GPIO_Init+0x12c>)
 8000478:	f002 f9b8 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800047c:	2310      	movs	r3, #16
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	481b      	ldr	r0, [pc, #108]	@ (80004fc <MX_GPIO_Init+0x134>)
 8000490:	f002 f9ac 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000494:	2303      	movs	r3, #3
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4813      	ldr	r0, [pc, #76]	@ (80004f8 <MX_GPIO_Init+0x130>)
 80004ac:	f002 f99e 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : remode1_Pin remode2_Pin */
  GPIO_InitStruct.Pin = remode1_Pin|remode2_Pin;
 80004b0:	2318      	movs	r3, #24
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <MX_GPIO_Init+0x130>)
 80004c4:	f002 f992 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004ce:	2311      	movs	r3, #17
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <MX_GPIO_Init+0x130>)
 80004e2:	f002 f983 	bl	80027ec <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40011000 	.word	0x40011000
 80004f8:	40010c00 	.word	0x40010c00
 80004fc:	40010800 	.word	0x40010800

08000500 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000506:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <MX_I2C1_Init+0x54>)
 8000508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_I2C1_Init+0x50>)
 800050c:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <MX_I2C1_Init+0x58>)
 800050e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_I2C1_Init+0x50>)
 800051e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_I2C1_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_I2C1_Init+0x50>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <MX_I2C1_Init+0x50>)
 800053e:	f002 faf1 	bl	8002b24 <HAL_I2C_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000548:	f000 fac7 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000108 	.word	0x20000108
 8000554:	40005400 	.word	0x40005400
 8000558:	00061a80 	.word	0x00061a80

0800055c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a43      	ldr	r2, [pc, #268]	@ (8000684 <HAL_I2C_MspInit+0x128>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d17f      	bne.n	800067c <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a41      	ldr	r2, [pc, #260]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b3f      	ldr	r3, [pc, #252]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000594:	23c0      	movs	r3, #192	@ 0xc0
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000598:	2312      	movs	r3, #18
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4839      	ldr	r0, [pc, #228]	@ (800068c <HAL_I2C_MspInit+0x130>)
 80005a8:	f002 f920 	bl	80027ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ac:	4b36      	ldr	r3, [pc, #216]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a35      	ldr	r2, [pc, #212]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 80005b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b6:	61d3      	str	r3, [r2, #28]
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <HAL_I2C_MspInit+0x12c>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80005c4:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005c6:	4a33      	ldr	r2, [pc, #204]	@ (8000694 <HAL_I2C_MspInit+0x138>)
 80005c8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005e8:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80005f4:	4826      	ldr	r0, [pc, #152]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 80005f6:	f001 fe4b 	bl	8002290 <HAL_DMA_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000600:	f000 fa6b 	bl	8000ada <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 8000608:	639a      	str	r2, [r3, #56]	@ 0x38
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <HAL_I2C_MspInit+0x134>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000612:	4a22      	ldr	r2, [pc, #136]	@ (800069c <HAL_I2C_MspInit+0x140>)
 8000614:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000618:	2210      	movs	r2, #16
 800061a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000624:	2280      	movs	r2, #128	@ 0x80
 8000626:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000640:	4815      	ldr	r0, [pc, #84]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000642:	f001 fe25 	bl	8002290 <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800064c:	f000 fa45 	bl	8000ada <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <HAL_I2C_MspInit+0x13c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	201f      	movs	r0, #31
 8000662:	f001 fdd2 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000666:	201f      	movs	r0, #31
 8000668:	f001 fdeb 	bl	8002242 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2020      	movs	r0, #32
 8000672:	f001 fdca 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000676:	2020      	movs	r0, #32
 8000678:	f001 fde3 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40005400 	.word	0x40005400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010c00 	.word	0x40010c00
 8000690:	2000015c 	.word	0x2000015c
 8000694:	40020080 	.word	0x40020080
 8000698:	200001a0 	.word	0x200001a0
 800069c:	4002006c 	.word	0x4002006c

080006a0 <HAL_I2C_WriteCommand>:
 * 参    数：Control_bytes，控制字节
 * 参    数：Command 要写入的命令值，范围：0x00~0xFF
 * 返 回 值：无
 */
void HAL_I2C_WriteCommand(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t Command)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	807b      	strh	r3, [r7, #2]
 80006b2:	460b      	mov	r3, r1
 80006b4:	707b      	strb	r3, [r7, #1]
 80006b6:	4613      	mov	r3, r2
 80006b8:	703b      	strb	r3, [r7, #0]
     uint8_t TxData[2] = { Control_bytes , Command }; // 将控制字节和命令值打包
 80006ba:	787b      	ldrb	r3, [r7, #1]
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	783b      	ldrb	r3, [r7, #0]
 80006c0:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1 , DevAddress << 1 , TxData , 2 , HAL_MAX_DELAY);
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b299      	uxth	r1, r3
 80006c8:	f107 020c 	add.w	r2, r7, #12
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2302      	movs	r3, #2
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <HAL_I2C_WriteCommand+0x44>)
 80006d6:	f002 fb7d 	bl	8002dd4 <HAL_I2C_Master_Transmit>
//      HAL_I2C_Master_Transmit_IT(&hi2c1 , DevAddress << 1 , TxData , 2 );
//    HAL_I2C_Master_Transmit_DMA(hi2c , DevAddress << 1 , TxData , 2 );


}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000108 	.word	0x20000108

080006e8 <HAL_I2C_WriteData>:
 * 参    数：DataLength，要写入数据的数量
 * 返 回 值：无
 */
void HAL_I2C_WriteData(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t *Data,
        uint8_t DataLength)
{
 80006e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006ec:	b08b      	sub	sp, #44	@ 0x2c
 80006ee:	af02      	add	r7, sp, #8
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	817b      	strh	r3, [r7, #10]
 80006f8:	4613      	mov	r3, r2
 80006fa:	727b      	strb	r3, [r7, #9]
 80006fc:	466b      	mov	r3, sp
 80006fe:	461e      	mov	r6, r3
     uint8_t TxData[1 + DataLength]; // 创建缓冲区，包含控制字节和数据
 8000700:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000704:	1c59      	adds	r1, r3, #1
 8000706:	1e4b      	subs	r3, r1, #1
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	460a      	mov	r2, r1
 800070c:	2300      	movs	r3, #0
 800070e:	4690      	mov	r8, r2
 8000710:	4699      	mov	r9, r3
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800071e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000726:	460a      	mov	r2, r1
 8000728:	2300      	movs	r3, #0
 800072a:	4614      	mov	r4, r2
 800072c:	461d      	mov	r5, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	00eb      	lsls	r3, r5, #3
 8000738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800073c:	00e2      	lsls	r2, r4, #3
 800073e:	460b      	mov	r3, r1
 8000740:	3307      	adds	r3, #7
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	ebad 0d03 	sub.w	sp, sp, r3
 800074a:	ab02      	add	r3, sp, #8
 800074c:	3300      	adds	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
    TxData[0] = Control_bytes;        // 第一个字节是控制字节
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	7a7a      	ldrb	r2, [r7, #9]
 8000754:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < DataLength; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	77fb      	strb	r3, [r7, #31]
 800075a:	e00a      	b.n	8000772 <HAL_I2C_WriteData+0x8a>
    {
        TxData[1 + i] = Data[i];    // 将数据复制到缓冲区
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	441a      	add	r2, r3
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	3301      	adds	r3, #1
 8000766:	7811      	ldrb	r1, [r2, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DataLength; i++)
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	3301      	adds	r3, #1
 8000770:	77fb      	strb	r3, [r7, #31]
 8000772:	7ffa      	ldrb	r2, [r7, #31]
 8000774:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000778:	429a      	cmp	r2, r3
 800077a:	d3ef      	bcc.n	800075c <HAL_I2C_WriteData+0x74>
    }
    HAL_I2C_Master_Transmit(&hi2c1, DevAddress << 1, TxData,  1 + DataLength, HAL_MAX_DELAY);
 800077c:	897b      	ldrh	r3, [r7, #10]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	b299      	uxth	r1, r3
 8000782:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000786:	b29b      	uxth	r3, r3
 8000788:	3301      	adds	r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	9200      	str	r2, [sp, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <HAL_I2C_WriteData+0xc0>)
 8000796:	f002 fb1d 	bl	8002dd4 <HAL_I2C_Master_Transmit>
 800079a:	46b5      	mov	sp, r6
//    HAL_I2C_Master_Transmit_IT(&hi2c1, DevAddress << 1, TxData,  1 + DataLength);
//    HAL_I2C_Master_Transmit_DMA(hi2c , DevAddress << 1 , TxData , 1 + DataLength); // 发送数据

}
 800079c:	bf00      	nop
 800079e:	3724      	adds	r7, #36	@ 0x24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007a6:	bf00      	nop
 80007a8:	20000108 	.word	0x20000108

080007ac <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a58      	ldr	r2, [pc, #352]	@ (8000918 <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	f040 80a8 	bne.w	800090e <HAL_ADC_ConvHalfCpltCallback+0x162>
    {
        static uint8_t i = 0;
//    i++;
        // 遍历所有通道进行滤波
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 80007be:	2300      	movs	r3, #0
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e067      	b.n	8000894 <HAL_ADC_ConvHalfCpltCallback+0xe8>
        {
            // 更新滤波器
            joystick_filters[ch].buffer[joystick_filters[ch].index] = adc_raw[ch];
 80007c4:	7df8      	ldrb	r0, [r7, #23]
 80007c6:	7dfa      	ldrb	r2, [r7, #23]
 80007c8:	7df9      	ldrb	r1, [r7, #23]
 80007ca:	4c54      	ldr	r4, [pc, #336]	@ (800091c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 80007cc:	460b      	mov	r3, r1
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4423      	add	r3, r4
 80007d6:	3310      	adds	r3, #16
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461c      	mov	r4, r3
 80007dc:	4b50      	ldr	r3, [pc, #320]	@ (8000920 <HAL_ADC_ConvHalfCpltCallback+0x174>)
 80007de:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80007e2:	b298      	uxth	r0, r3
 80007e4:	494d      	ldr	r1, [pc, #308]	@ (800091c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4413      	add	r3, r2
 80007ec:	4423      	add	r3, r4
 80007ee:	4602      	mov	r2, r0
 80007f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            joystick_filters[ch].index = (joystick_filters[ch].index + 1) % FILTER_WINDOW;
 80007f4:	7dfa      	ldrb	r2, [r7, #23]
 80007f6:	4949      	ldr	r1, [pc, #292]	@ (800091c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	3310      	adds	r3, #16
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	425a      	negs	r2, r3
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	f002 0207 	and.w	r2, r2, #7
 8000812:	bf58      	it	pl
 8000814:	4253      	negpl	r3, r2
 8000816:	7dfa      	ldrb	r2, [r7, #23]
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	4940      	ldr	r1, [pc, #256]	@ (800091c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800081c:	4613      	mov	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	440b      	add	r3, r1
 8000826:	3310      	adds	r3, #16
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]

            // 计算滑动平均
            uint32_t sum = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00f      	b.n	8000856 <HAL_ADC_ConvHalfCpltCallback+0xaa>
            {
                sum += joystick_filters[ch].buffer[i];
 8000836:	7dfa      	ldrb	r2, [r7, #23]
 8000838:	7bf9      	ldrb	r1, [r7, #15]
 800083a:	4838      	ldr	r0, [pc, #224]	@ (800091c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4413      	add	r3, r2
 8000842:	440b      	add	r3, r1
 8000844:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000848:	461a      	mov	r2, r3
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4413      	add	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d9ec      	bls.n	8000836 <HAL_ADC_ConvHalfCpltCallback+0x8a>
            }
            filtered_values[ch] = sum / FILTER_WINDOW;
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	08da      	lsrs	r2, r3, #3
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	b291      	uxth	r1, r2
 8000864:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (abs(filtered_values[ch] - 2048) <= DEADZONE_THRESHOLD)
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	4a2d      	ldr	r2, [pc, #180]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800086e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000872:	b29b      	uxth	r3, r3
 8000874:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000878:	2b00      	cmp	r3, #0
 800087a:	bfb8      	it	lt
 800087c:	425b      	neglt	r3, r3
 800087e:	2b46      	cmp	r3, #70	@ 0x46
 8000880:	dc05      	bgt.n	800088e <HAL_ADC_ConvHalfCpltCallback+0xe2>
            {
                filtered_values[ch] = 2048;
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800088a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	3301      	adds	r3, #1
 8000892:	75fb      	strb	r3, [r7, #23]
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d994      	bls.n	80007c4 <HAL_ADC_ConvHalfCpltCallback+0x18>
            }
        }
        if (filtered_values[0] == 2048)
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008a4:	d102      	bne.n	80008ac <HAL_ADC_ConvHalfCpltCallback+0x100>
            i = 1;
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
        if (i == 1)
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d12c      	bne.n	800090e <HAL_ADC_ConvHalfCpltCallback+0x162>
        {
            sprintf(message , "%d,%d,%d,%d " , filtered_values[0] , filtered_values[1] , filtered_values[2] ,
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008be:	885b      	ldrh	r3, [r3, #2]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	461a      	mov	r2, r3
                    filtered_values[3]);
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008ce:	88db      	ldrh	r3, [r3, #6]
 80008d0:	b29b      	uxth	r3, r3
            sprintf(message , "%d,%d,%d,%d " , filtered_values[0] , filtered_values[1] , filtered_values[2] ,
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	9200      	str	r2, [sp, #0]
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	4914      	ldr	r1, [pc, #80]	@ (800092c <HAL_ADC_ConvHalfCpltCallback+0x180>)
 80008dc:	4814      	ldr	r0, [pc, #80]	@ (8000930 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 80008de:	f006 fbd3 	bl	8007088 <siprintf>
            sprintf(remode1 , "%d,%d " , filtered_values[0] , filtered_values[1]);
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008ec:	885b      	ldrh	r3, [r3, #2]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4910      	ldr	r1, [pc, #64]	@ (8000934 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 80008f2:	4811      	ldr	r0, [pc, #68]	@ (8000938 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 80008f4:	f006 fbc8 	bl	8007088 <siprintf>
            sprintf(remode2 , "%d,%d " , filtered_values[2] , filtered_values[3]);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008fa:	889b      	ldrh	r3, [r3, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000902:	88db      	ldrh	r3, [r3, #6]
 8000904:	b29b      	uxth	r3, r3
 8000906:	490b      	ldr	r1, [pc, #44]	@ (8000934 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <HAL_ADC_ConvHalfCpltCallback+0x190>)
 800090a:	f006 fbbd 	bl	8007088 <siprintf>
        }
    }
}
 800090e:	bf00      	nop
 8000910:	371c      	adds	r7, #28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	20000094 	.word	0x20000094
 800091c:	20000270 	.word	0x20000270
 8000920:	20000260 	.word	0x20000260
 8000924:	20000268 	.word	0x20000268
 8000928:	200002b8 	.word	0x200002b8
 800092c:	08007a00 	.word	0x08007a00
 8000930:	200001e4 	.word	0x200001e4
 8000934:	08007a10 	.word	0x08007a10
 8000938:	200001f8 	.word	0x200001f8
 800093c:	2000022c 	.word	0x2000022c

08000940 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000946:	f000 fdc1 	bl	80014cc <HAL_Init>

    /* USER CODE BEGIN Init */
    HAL_SYSTICK_IRQHandler();
 800094a:	f001 fc94 	bl	8002276 <HAL_SYSTICK_IRQHandler>
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800094e:	f000 f869 	bl	8000a24 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000952:	f7ff fd39 	bl	80003c8 <MX_GPIO_Init>
    MX_DMA_Init();
 8000956:	f7ff fcf9 	bl	800034c <MX_DMA_Init>
    MX_I2C1_Init();
 800095a:	f7ff fdd1 	bl	8000500 <MX_I2C1_Init>
    MX_ADC1_Init();
 800095e:	f7ff fbfd 	bl	800015c <MX_ADC1_Init>
    MX_SPI1_Init();
 8000962:	f000 fb33 	bl	8000fcc <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8000966:	f000 fd0d 	bl	8001384 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    // 初始化滤波器结构体
    memset(joystick_filters , 0 , sizeof(joystick_filters));
 800096a:	2248      	movs	r2, #72	@ 0x48
 800096c:	2100      	movs	r1, #0
 800096e:	4826      	ldr	r0, [pc, #152]	@ (8000a08 <main+0xc8>)
 8000970:	f006 fbac 	bl	80070cc <memset>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000974:	4825      	ldr	r0, [pc, #148]	@ (8000a0c <main+0xcc>)
 8000976:	f001 fab9 	bl	8001eec <HAL_ADCEx_Calibration_Start>
    hadc1.Instance->CR2 |= ADC_CR2_CAL;  // 启动内部校准
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <main+0xcc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <main+0xcc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0204 	orr.w	r2, r2, #4
 8000988:	609a      	str	r2, [r3, #8]
    while (hadc1.Instance->CR2 & ADC_CR2_CAL); // 等待校准完成
 800098a:	bf00      	nop
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <main+0xcc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f8      	bne.n	800098c <main+0x4c>

    OLED_Init();                           //OLED初始
 800099a:	f006 f9e9 	bl	8006d70 <OLED_Init>
    OLED_ShowString(0 , 0 , "hellow" , 12 , 0);    //反相显示8X16字符串
 800099e:	2300      	movs	r3, #0
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	230c      	movs	r3, #12
 80009a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a10 <main+0xd0>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f006 fb23 	bl	8006ff4 <OLED_ShowString>

    //RF24L01引脚初始化
    NRF24L01_Gpio_Init();
 80009ae:	f000 faa1 	bl	8000ef4 <NRF24L01_Gpio_Init>

    //检测nRF24L01
    NRF24L01_check();
 80009b2:	f000 f9c9 	bl	8000d48 <NRF24L01_check>
    RF24L01_Init();
 80009b6:	f000 fab9 	bl	8000f2c <RF24L01_Init>
    RF24L01_Set_Mode(MODE_TX);        //发送模式
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fa12 	bl	8000de4 <RF24L01_Set_Mode>
    OLED_Clear();
 80009c0:	f006 fa18 	bl	8006df4 <OLED_Clear>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 80009c4:	2204      	movs	r2, #4
 80009c6:	4913      	ldr	r1, [pc, #76]	@ (8000a14 <main+0xd4>)
 80009c8:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <main+0xcc>)
 80009ca:	f000 fedd 	bl	8001788 <HAL_ADC_Start_DMA>

        if (NRF24L01_TxPacket(message , strlen(message)) == TX_OK)
 80009ce:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <main+0xd8>)
 80009d0:	f7ff fbbc 	bl	800014c <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <main+0xd8>)
 80009dc:	f000 fa26 	bl	8000e2c <NRF24L01_TxPacket>
        {

        }
        OLED_ShowString(0 , 0 , remode1 , 12 , 0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	230c      	movs	r3, #12
 80009e6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <main+0xdc>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	2000      	movs	r0, #0
 80009ec:	f006 fb02 	bl	8006ff4 <OLED_ShowString>
        OLED_ShowString(0 , 1 , remode2 , 12 , 0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	230c      	movs	r3, #12
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <main+0xe0>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	2000      	movs	r0, #0
 80009fc:	f006 fafa 	bl	8006ff4 <OLED_ShowString>
        HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f000 fdc5 	bl	8001590 <HAL_Delay>
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000a06:	e7dd      	b.n	80009c4 <main+0x84>
 8000a08:	20000270 	.word	0x20000270
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	08007a18 	.word	0x08007a18
 8000a14:	20000260 	.word	0x20000260
 8000a18:	200001e4 	.word	0x200001e4
 8000a1c:	200001f8 	.word	0x200001f8
 8000a20:	2000022c 	.word	0x2000022c

08000a24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	@ 0x50
 8000a28:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2e:	2228      	movs	r2, #40	@ 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 fb4a 	bl	80070cc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a70:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 f9fc 	bl	8004e78 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x66>
    {
        Error_Handler();
 8000a86:	f000 f828 	bl	8000ada <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct , FLASH_LATENCY_2) != HAL_OK)
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fc68 	bl	800537c <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000ab2:	f000 f812 	bl	8000ada <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000aba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000abe:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fde8 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000ace:	f000 f804 	bl	8000ada <Error_Handler>
    }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	@ 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ade:	b672      	cpsid	i
}
 8000ae0:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ae2:	bf00      	nop
 8000ae4:	e7fd      	b.n	8000ae2 <Error_Handler+0x8>
	...

08000ae8 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1 , &TxByte , &rx_data , 1 , HAL_MAX_DELAY);
 8000af2:	f107 020f 	add.w	r2, r7, #15
 8000af6:	1df9      	adds	r1, r7, #7
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <drv_spi_read_write_byte+0x28>)
 8000b02:	f004 ffb9 	bl	8005a78 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
    return rx_data;      //返回
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200002bc 	.word	0x200002bc

08000b14 <NRF24L01_Read_Reg>:
 @Addr:寄存器地址
 * @note  :地址在设备中有效
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg(uint8_t RegAddr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
    uint8_t btmp;

    RF24L01_SET_CS_LOW();          //片选
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <NRF24L01_Read_Reg+0x3c>)
 8000b24:	f001 ffe6 	bl	8002af4 <HAL_GPIO_WritePin>

    drv_spi_read_write_byte( NRF_READ_REG | RegAddr);  //读命令 地址
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ffdc 	bl	8000ae8 <drv_spi_read_write_byte>
    btmp = drv_spi_read_write_byte(0xFF);             //读数据
 8000b30:	20ff      	movs	r0, #255	@ 0xff
 8000b32:	f7ff ffd9 	bl	8000ae8 <drv_spi_read_write_byte>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]

    RF24L01_SET_CS_HIGH();         //取消片选
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <NRF24L01_Read_Reg+0x3c>)
 8000b40:	f001 ffd8 	bl	8002af4 <HAL_GPIO_WritePin>

    return btmp;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <NRF24L01_Read_Buf>:
 *         @len:数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:读取状态
 */
void NRF24L01_Read_Buf(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
    uint8_t btmp;

    RF24L01_SET_CS_LOW();          //片选
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	4810      	ldr	r0, [pc, #64]	@ (8000bac <NRF24L01_Read_Buf+0x58>)
 8000b6a:	f001 ffc3 	bl	8002af4 <HAL_GPIO_WritePin>

    drv_spi_read_write_byte( NRF_READ_REG | RegAddr);  //读命令 地址
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ffb9 	bl	8000ae8 <drv_spi_read_write_byte>
    for (btmp = 0; btmp < len; btmp++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e00a      	b.n	8000b92 <NRF24L01_Read_Buf+0x3e>
    {
        *(pBuf + btmp) = drv_spi_read_write_byte(0xFF); //读数据
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	18d4      	adds	r4, r2, r3
 8000b82:	20ff      	movs	r0, #255	@ 0xff
 8000b84:	f7ff ffb0 	bl	8000ae8 <drv_spi_read_write_byte>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
    for (btmp = 0; btmp < len; btmp++)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3f0      	bcc.n	8000b7c <NRF24L01_Read_Buf+0x28>
    }
    RF24L01_SET_CS_HIGH();     //取消片选
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <NRF24L01_Read_Buf+0x58>)
 8000ba0:	f001 ffa8 	bl	8002af4 <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <NRF24L01_Write_Reg>:
 * @param :无
 * @note  :地址在设备中有效
 * @retval:读写状态
 */
void NRF24L01_Write_Reg(uint8_t RegAddr, uint8_t Value)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
    RF24L01_SET_CS_LOW();      //片选
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <NRF24L01_Write_Reg+0x44>)
 8000bc6:	f001 ff95 	bl	8002af4 <HAL_GPIO_WritePin>

    drv_spi_read_write_byte( NRF_WRITE_REG | RegAddr); //写命令 地址
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff88 	bl	8000ae8 <drv_spi_read_write_byte>
    drv_spi_read_write_byte(Value);           //写数据
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff84 	bl	8000ae8 <drv_spi_read_write_byte>

    RF24L01_SET_CS_HIGH();     //取消片选
 8000be0:	2201      	movs	r2, #1
 8000be2:	2102      	movs	r1, #2
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <NRF24L01_Write_Reg+0x44>)
 8000be6:	f001 ff85 	bl	8002af4 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <NRF24L01_Write_Buf>:
 *         @len:数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:写状态
 */
void NRF24L01_Write_Buf(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    RF24L01_SET_CS_LOW();      //片选
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <NRF24L01_Write_Buf+0x5c>)
 8000c0e:	f001 ff71 	bl	8002af4 <HAL_GPIO_WritePin>

    drv_spi_read_write_byte( NRF_WRITE_REG | RegAddr); //写命令 地址
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff64 	bl	8000ae8 <drv_spi_read_write_byte>
    for (i = 0; i < len; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e009      	b.n	8000c3a <NRF24L01_Write_Buf+0x42>
    {
        drv_spi_read_write_byte(*(pBuf + i));       //写数据
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff5a 	bl	8000ae8 <drv_spi_read_write_byte>
    for (i = 0; i < len; i++)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	3301      	adds	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d3f1      	bcc.n	8000c26 <NRF24L01_Write_Buf+0x2e>
    }

    RF24L01_SET_CS_HIGH();     //取消片选
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <NRF24L01_Write_Buf+0x5c>)
 8000c48:	f001 ff54 	bl	8002af4 <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    uint8_t Status;

    RF24L01_SET_CS_LOW();      //片选
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <NRF24L01_Read_Status_Register+0x30>)
 8000c64:	f001 ff46 	bl	8002af4 <HAL_GPIO_WritePin>

    Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f7ff ff3d 	bl	8000ae8 <drv_spi_read_write_byte>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]

    RF24L01_SET_CS_HIGH();     //取消片选
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <NRF24L01_Read_Status_Register+0x30>)
 8000c78:	f001 ff3c 	bl	8002af4 <HAL_GPIO_WritePin>

    return Status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000c9c:	71fb      	strb	r3, [r7, #7]
    status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 8000c9e:	f7ff ffdb 	bl	8000c58 <NRF24L01_Read_Status_Register>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET); // 拉低CSN
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000cac:	f001 ff22 	bl	8002af4 <HAL_GPIO_WritePin>
    drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8000cb0:	2027      	movs	r0, #39	@ 0x27
 8000cb2:	f7ff ff19 	bl	8000ae8 <drv_spi_read_write_byte>
    drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff12 	bl	8000ae8 <drv_spi_read_write_byte>
    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_1 , GPIO_PIN_SET);   // 拉高CSN
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000cca:	f001 ff13 	bl	8002af4 <HAL_GPIO_WritePin>

    return NRF24L01_Read_Status_Register();                   // 返回新状态
 8000cce:	f7ff ffc3 	bl	8000c58 <NRF24L01_Read_Status_Register>
 8000cd2:	4603      	mov	r3, r0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <NRF24L01_Set_TxAddr>:
 *         @len:长度
 * @note  :无
 * @retval:无
 */
void NRF24L01_Set_TxAddr(uint8_t *pAddr, uint8_t len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
    len = (len > 5) ? 5 : len;                    //地址不能大于5个字节
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	bf28      	it	cs
 8000cf2:	2305      	movcs	r3, #5
 8000cf4:	70fb      	strb	r3, [r7, #3]
    NRF24L01_Write_Buf( TX_ADDR , pAddr , len);  //写地址
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2010      	movs	r0, #16
 8000cfe:	f7ff ff7b 	bl	8000bf8 <NRF24L01_Write_Buf>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <NRF24L01_Set_RxAddr>:
 *         @Len:长度
 * @note  :通道不大于5 地址长度不大于5个字节
 * @retval:无
 */
void NRF24L01_Set_RxAddr(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	4613      	mov	r3, r2
 8000d18:	71bb      	strb	r3, [r7, #6]
    Len = (Len > 5) ? 5 : Len;
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	bf28      	it	cs
 8000d20:	2305      	movcs	r3, #5
 8000d22:	71bb      	strb	r3, [r7, #6]
    PipeNum = (PipeNum > 5) ? 5 : PipeNum;        //通道不大于5 地址长度不大于5个字节
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	bf28      	it	cs
 8000d2a:	2305      	movcs	r3, #5
 8000d2c:	71fb      	strb	r3, [r7, #7]

    NRF24L01_Write_Buf( RX_ADDR_P0 + PipeNum , pAddr , Len); //写入地址
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	330a      	adds	r3, #10
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	6839      	ldr	r1, [r7, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <NRF24L01_Write_Buf>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <NRF24L01_check>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_check(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t buf[5] = { 0XA5 , 0XA5 , 0XA5 , 0XA5 , 0XA5 };
 8000d4e:	4a22      	ldr	r2, [pc, #136]	@ (8000dd8 <NRF24L01_check+0x90>)
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d58:	6018      	str	r0, [r3, #0]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	7019      	strb	r1, [r3, #0]
    uint8_t read_buf[5] = { 0 };
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	711a      	strb	r2, [r3, #4]

    while (1)
    {
        NRF24L01_Write_Buf( TX_ADDR , buf , 5);          //写入5个字节的地址
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f7ff ff42 	bl	8000bf8 <NRF24L01_Write_Buf>
        NRF24L01_Read_Buf( TX_ADDR , read_buf , 5);      //读出写入的地址
 8000d74:	463b      	mov	r3, r7
 8000d76:	2205      	movs	r2, #5
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2010      	movs	r0, #16
 8000d7c:	f7ff feea 	bl	8000b54 <NRF24L01_Read_Buf>
        for (i = 0; i < 5; i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e00e      	b.n	8000da4 <NRF24L01_check+0x5c>
        {
            if (buf[i] != read_buf[i])
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3310      	adds	r3, #16
 8000d8a:	443b      	add	r3, r7
 8000d8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3310      	adds	r3, #16
 8000d94:	443b      	add	r3, r7
 8000d96:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d106      	bne.n	8000dac <NRF24L01_check+0x64>
        for (i = 0; i < 5; i++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d9ed      	bls.n	8000d86 <NRF24L01_check+0x3e>
 8000daa:	e000      	b.n	8000dae <NRF24L01_check+0x66>
            {
                break;
 8000dac:	bf00      	nop
            }
        }

        if (5 == i)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d00b      	beq.n	8000dcc <NRF24L01_check+0x84>
        {
            break;
        }
        else
        {
            HAL_UART_Transmit(&huart1 , (uint8_t*) g_ErrorString , 26 , 100);
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <NRF24L01_check+0x94>)
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	2364      	movs	r3, #100	@ 0x64
 8000dba:	221a      	movs	r2, #26
 8000dbc:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <NRF24L01_check+0x98>)
 8000dbe:	f005 fa12 	bl	80061e6 <HAL_UART_Transmit>
        }
        HAL_Delay(2000);
 8000dc2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dc6:	f000 fbe3 	bl	8001590 <HAL_Delay>
        NRF24L01_Write_Buf( TX_ADDR , buf , 5);          //写入5个字节的地址
 8000dca:	e7cc      	b.n	8000d66 <NRF24L01_check+0x1e>
            break;
 8000dcc:	bf00      	nop
    }
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08007a3c 	.word	0x08007a3c
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	200003a0 	.word	0x200003a0

08000de4 <RF24L01_Set_Mode>:
 *         @Mode:模式发送模式或接收模式
 * @note  :无
 * @retval:无
 */
void RF24L01_Set_Mode(nRf24l01ModeType Mode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    uint8_t controlreg = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
    controlreg = NRF24L01_Read_Reg( CONFIG);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fe8e 	bl	8000b14 <NRF24L01_Read_Reg>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]

    if (Mode == MODE_TX)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <RF24L01_Set_Mode+0x28>
    {
        controlreg &= ~(1 << PRIM_RX);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e006      	b.n	8000e1a <RF24L01_Set_Mode+0x36>
    }
    else
    {
        if (Mode == MODE_RX)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d103      	bne.n	8000e1a <RF24L01_Set_Mode+0x36>
        {
            controlreg |= (1 << PRIM_RX);
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
        }
    }

    NRF24L01_Write_Reg( CONFIG , controlreg);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fec6 	bl	8000bb0 <NRF24L01_Write_Reg>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <NRF24L01_TxPacket>:
 *         MAX_TX：达到最大重发次数
 *         TX_OK：发送完成
 *         0xFF:其他原因
 */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf, uint8_t Length)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
    uint8_t l_Status = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	737b      	strb	r3, [r7, #13]
    uint16_t l_MsTimes = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	81fb      	strh	r3, [r7, #14]

    RF24L01_SET_CS_LOW();      //片选
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4829      	ldr	r0, [pc, #164]	@ (8000eec <NRF24L01_TxPacket+0xc0>)
 8000e46:	f001 fe55 	bl	8002af4 <HAL_GPIO_WritePin>
    drv_spi_read_write_byte( FLUSH_TX);
 8000e4a:	20e1      	movs	r0, #225	@ 0xe1
 8000e4c:	f7ff fe4c 	bl	8000ae8 <drv_spi_read_write_byte>
    RF24L01_SET_CS_HIGH();
 8000e50:	2201      	movs	r2, #1
 8000e52:	2102      	movs	r1, #2
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <NRF24L01_TxPacket+0xc0>)
 8000e56:	f001 fe4d 	bl	8002af4 <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4823      	ldr	r0, [pc, #140]	@ (8000eec <NRF24L01_TxPacket+0xc0>)
 8000e60:	f001 fe48 	bl	8002af4 <HAL_GPIO_WritePin>
    NRF24L01_Write_Buf( WR_TX_PLOAD , txbuf , Length);   //写数据到TX BUF 32字节  TX_PLOAD_WIDTH
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	461a      	mov	r2, r3
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	20a0      	movs	r0, #160	@ 0xa0
 8000e6c:	f7ff fec4 	bl	8000bf8 <NRF24L01_Write_Buf>
    RF24L01_SET_CE_HIGH();         //启动发送
 8000e70:	2201      	movs	r2, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	481d      	ldr	r0, [pc, #116]	@ (8000eec <NRF24L01_TxPacket+0xc0>)
 8000e76:	f001 fe3d 	bl	8002af4 <HAL_GPIO_WritePin>
//    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
    while (0 != RF24L01_GET_IRQ_STATUS())
 8000e7a:	e010      	b.n	8000e9e <NRF24L01_TxPacket+0x72>
    {
        HAL_Delay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fb87 	bl	8001590 <HAL_Delay>
        if (500 == l_MsTimes++)                        //500ms还没有发送成功，重新初始化设备
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	81fa      	strh	r2, [r7, #14]
 8000e88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e8c:	d107      	bne.n	8000e9e <NRF24L01_TxPacket+0x72>
        {
            NRF24L01_Gpio_Init();
 8000e8e:	f000 f831 	bl	8000ef4 <NRF24L01_Gpio_Init>
            RF24L01_Init();
 8000e92:	f000 f84b 	bl	8000f2c <RF24L01_Init>
            RF24L01_Set_Mode(MODE_TX);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ffa4 	bl	8000de4 <RF24L01_Set_Mode>
//            HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
            break;
 8000e9c:	e005      	b.n	8000eaa <NRF24L01_TxPacket+0x7e>
    while (0 != RF24L01_GET_IRQ_STATUS())
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <NRF24L01_TxPacket+0xc4>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d0e8      	beq.n	8000e7c <NRF24L01_TxPacket+0x50>
        }
    }
//    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
    l_Status = NRF24L01_Read_Reg(STATUS);                       //读状态寄存器
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f7ff fe32 	bl	8000b14 <NRF24L01_Read_Reg>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	737b      	strb	r3, [r7, #13]
    NRF24L01_Write_Reg( STATUS , l_Status);                     //清除TX_DS或MAX_RT中断标志
 8000eb4:	7b7b      	ldrb	r3, [r7, #13]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	2007      	movs	r0, #7
 8000eba:	f7ff fe79 	bl	8000bb0 <NRF24L01_Write_Reg>
//    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
    if (l_Status & MAX_TX) //达到最大重发次数
 8000ebe:	7b7b      	ldrb	r3, [r7, #13]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <NRF24L01_TxPacket+0xa8>
    {
        NRF24L01_Write_Reg( FLUSH_TX , 0xff);    //清除TX FIFO寄存器
 8000ec8:	21ff      	movs	r1, #255	@ 0xff
 8000eca:	20e1      	movs	r0, #225	@ 0xe1
 8000ecc:	f7ff fe70 	bl	8000bb0 <NRF24L01_Write_Reg>
//        HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
        return MAX_TX;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	e007      	b.n	8000ee4 <NRF24L01_TxPacket+0xb8>
    }
    if (l_Status & TX_OK)  //发送完成
 8000ed4:	7b7b      	ldrb	r3, [r7, #13]
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <NRF24L01_TxPacket+0xb6>
    {
        return TX_OK;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	e000      	b.n	8000ee4 <NRF24L01_TxPacket+0xb8>
//        HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
    }
//    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
    return 0xFF;    //其他原因发送失败
 8000ee2:	23ff      	movs	r3, #255	@ 0xff
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_0 , GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <NRF24L01_Gpio_Init+0x30>)
 8000efe:	f001 fdf9 	bl	8002af4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA , GPIO_PIN_4 , GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <NRF24L01_Gpio_Init+0x34>)
 8000f08:	f001 fdf4 	bl	8002af4 <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();      //??24L01
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <NRF24L01_Gpio_Init+0x30>)
 8000f12:	f001 fdef 	bl	8002af4 <HAL_GPIO_WritePin>
    RF24L01_SET_CS_HIGH();     //??SPI??
 8000f16:	2201      	movs	r2, #1
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <NRF24L01_Gpio_Init+0x30>)
 8000f1c:	f001 fdea 	bl	8002af4 <HAL_GPIO_WritePin>

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	40010800 	.word	0x40010800

08000f2c <RF24L01_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void RF24L01_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
    uint8_t addr[5] = { INIT_ADDR };
 8000f32:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <RF24L01_Init+0x98>)
 8000f34:	463b      	mov	r3, r7
 8000f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	7019      	strb	r1, [r3, #0]

    RF24L01_SET_CE_HIGH();
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <RF24L01_Init+0x9c>)
 8000f46:	f001 fdd5 	bl	8002af4 <HAL_GPIO_WritePin>
    NRF24L01_Clear_IRQ_Flag( IRQ_ALL);
 8000f4a:	2070      	movs	r0, #112	@ 0x70
 8000f4c:	f7ff fe9e 	bl	8000c8c <NRF24L01_Clear_IRQ_Flag>
#if DYNAMIC_PACKET == 1

    NRF24L01_Write_Reg( DYNPD , (1 << 0));    //使能通道1动态数据长度
 8000f50:	2101      	movs	r1, #1
 8000f52:	201c      	movs	r0, #28
 8000f54:	f7ff fe2c 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( FEATRUE , 0x07);
 8000f58:	2107      	movs	r1, #7
 8000f5a:	201d      	movs	r0, #29
 8000f5c:	f7ff fe28 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Read_Reg( DYNPD);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f7ff fdd7 	bl	8000b14 <NRF24L01_Read_Reg>
    NRF24L01_Read_Reg( FEATRUE);
 8000f66:	201d      	movs	r0, #29
 8000f68:	f7ff fdd4 	bl	8000b14 <NRF24L01_Read_Reg>

    L01_WriteSingleReg( L01REG_RX_PW_P0, FIXED_PACKET_LEN );    //固定数据长度

#endif  //DYNAMIC_PACKET

    NRF24L01_Write_Reg( CONFIG , /*( 1<<MASK_RX_DR ) |*/     //接收中断
 8000f6c:	210a      	movs	r1, #10
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fe1e 	bl	8000bb0 <NRF24L01_Write_Reg>
            (1 << EN_CRC) |     //使能CRC 1个字节
                    (1 << PWR_UP));    //开启设备
    NRF24L01_Write_Reg( EN_AA , (1 << ENAA_P0));          //通道0自动应答
 8000f74:	2101      	movs	r1, #1
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fe1a 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( EN_RXADDR , (1 << ERX_P0));       //通道0接收
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fe16 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( SETUP_AW , AW_5BYTES);              //地址宽度 5个字节
 8000f84:	2103      	movs	r1, #3
 8000f86:	2003      	movs	r0, #3
 8000f88:	f7ff fe12 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( SETUP_RETR , ARD_4000US | ( REPEAT_CNT & 0x0F));            //重复等待时间 250us
 8000f8c:	21ff      	movs	r1, #255	@ 0xff
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f7ff fe0e 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( RF_CH , 60);                        //初始化通道
 8000f94:	213c      	movs	r1, #60	@ 0x3c
 8000f96:	2005      	movs	r0, #5
 8000f98:	f7ff fe0a 	bl	8000bb0 <NRF24L01_Write_Reg>
    NRF24L01_Write_Reg( RF_SETUP , 0x26);
 8000f9c:	2126      	movs	r1, #38	@ 0x26
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fe06 	bl	8000bb0 <NRF24L01_Write_Reg>

    NRF24L01_Set_TxAddr(&addr[0] , 5);                      //设置TX地址
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe99 	bl	8000ce0 <NRF24L01_Set_TxAddr>
    NRF24L01_Set_RxAddr(0 , &addr[0] , 5);                   //设置RX地址
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fea8 	bl	8000d0a <NRF24L01_Set_RxAddr>

//    NRF24L01_Set_Speed(SPEED_1M);
//    NRF24L01_Set_Power(POWER_F18DBM);
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08007a44 	.word	0x08007a44
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fd2:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <MX_SPI1_Init+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001000:	2218      	movs	r2, #24
 8001002:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001018:	220a      	movs	r2, #10
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_SPI1_Init+0x64>)
 800101e:	f004 fca7 	bl	8005970 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001028:	f7ff fd57 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200002bc 	.word	0x200002bc
 8001034:	40013000 	.word	0x40013000

08001038 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a46      	ldr	r2, [pc, #280]	@ (800116c <HAL_SPI_MspInit+0x134>)
 8001054:	4293      	cmp	r3, r2
 8001056:	f040 8084 	bne.w	8001162 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a44      	ldr	r2, [pc, #272]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 8001060:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a3e      	ldr	r2, [pc, #248]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <HAL_SPI_MspInit+0x138>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800108a:	23a0      	movs	r3, #160	@ 0xa0
 800108c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	4835      	ldr	r0, [pc, #212]	@ (8001174 <HAL_SPI_MspInit+0x13c>)
 800109e:	f001 fba5 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	482f      	ldr	r0, [pc, #188]	@ (8001174 <HAL_SPI_MspInit+0x13c>)
 80010b6:	f001 fb99 	bl	80027ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010bc:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <HAL_SPI_MspInit+0x144>)
 80010be:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80010ea:	4823      	ldr	r0, [pc, #140]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010ec:	f001 f8d0 	bl	8002290 <HAL_DMA_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80010f6:	f7ff fcf0 	bl	8000ada <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 80010fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001100:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <HAL_SPI_MspInit+0x140>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001108:	4a1e      	ldr	r2, [pc, #120]	@ (8001184 <HAL_SPI_MspInit+0x14c>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 800110e:	2210      	movs	r2, #16
 8001110:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001136:	4812      	ldr	r0, [pc, #72]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 8001138:	f001 f8aa 	bl	8002290 <HAL_DMA_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001142:	f7ff fcca 	bl	8000ada <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 800114a:	649a      	str	r2, [r3, #72]	@ 0x48
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <HAL_SPI_MspInit+0x148>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2023      	movs	r0, #35	@ 0x23
 8001158:	f001 f857 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800115c:	2023      	movs	r0, #35	@ 0x23
 800115e:	f001 f870 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40013000 	.word	0x40013000
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800
 8001178:	20000314 	.word	0x20000314
 800117c:	4002001c 	.word	0x4002001c
 8001180:	20000358 	.word	0x20000358
 8001184:	40020030 	.word	0x40020030

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <HAL_MspInit+0x5c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <HAL_MspInit+0x5c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_MspInit+0x60>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_MspInit+0x60>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f98c 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Channel1_IRQHandler+0x10>)
 800124a:	f001 f98f 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000c4 	.word	0x200000c4

08001258 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA1_Channel2_IRQHandler+0x10>)
 800125e:	f001 f985 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000314 	.word	0x20000314

0800126c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <DMA1_Channel3_IRQHandler+0x10>)
 8001272:	f001 f97b 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000358 	.word	0x20000358

08001280 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <DMA1_Channel6_IRQHandler+0x10>)
 8001286:	f001 f971 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001a0 	.word	0x200001a0

08001294 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <DMA1_Channel7_IRQHandler+0x10>)
 800129a:	f001 f967 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000015c 	.word	0x2000015c

080012a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <ADC1_2_IRQHandler+0x10>)
 80012ae:	f000 fb49 	bl	8001944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000094 	.word	0x20000094

080012bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <I2C1_EV_IRQHandler+0x10>)
 80012c2:	f001 fe85 	bl	8002fd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000108 	.word	0x20000108

080012d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <I2C1_ER_IRQHandler+0x10>)
 80012d6:	f001 ffec 	bl	80032b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000108 	.word	0x20000108

080012e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <SPI1_IRQHandler+0x10>)
 80012ea:	f004 fd6f 	bl	8005dcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002bc 	.word	0x200002bc

080012f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <USART1_IRQHandler+0x10>)
 80012fe:	f004 fffd 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003a0 	.word	0x200003a0

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f005 fece 	bl	80070dc <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20005000 	.word	0x20005000
 800136c:	00000400 	.word	0x00000400
 8001370:	2000039c 	.word	0x2000039c
 8001374:	20000538 	.word	0x20000538

08001378 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_USART1_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013bc:	f004 fec3 	bl	8006146 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f7ff fb88 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200003a0 	.word	0x200003a0
 80013d4:	40013800 	.word	0x40013800

080013d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <HAL_UART_MspInit+0x9c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d139      	bne.n	800146c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a18      	ldr	r2, [pc, #96]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_UART_MspInit+0xa0>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	@ (800147c <HAL_UART_MspInit+0xa4>)
 800143e:	f001 f9d5 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	4809      	ldr	r0, [pc, #36]	@ (800147c <HAL_UART_MspInit+0xa4>)
 8001458:	f001 f9c8 	bl	80027ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2025      	movs	r0, #37	@ 0x25
 8001462:	f000 fed2 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001466:	2025      	movs	r0, #37	@ 0x25
 8001468:	f000 feeb 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ff7a 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480b      	ldr	r0, [pc, #44]	@ (80014b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001486:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800149c:	4c09      	ldr	r4, [pc, #36]	@ (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f005 fe1d 	bl	80070e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ae:	f7ff fa47 	bl	8000940 <main>
  bx lr
 80014b2:	4770      	bx	lr
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014bc:	080082d8 	.word	0x080082d8
  ldr r2, =_sbss
 80014c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014c4:	20000534 	.word	0x20000534

080014c8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <CAN1_RX1_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fe89 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fe4e 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fea1 	bl	800225e <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 fe69 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000004 	.word	0x20000004
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_IncTick+0x1c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_IncTick+0x20>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a03      	ldr	r2, [pc, #12]	@ (8001578 <HAL_IncTick+0x20>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	2000000c 	.word	0x2000000c
 8001578:	200003e8 	.word	0x200003e8

0800157c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b02      	ldr	r3, [pc, #8]	@ (800158c <HAL_GetTick+0x10>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	200003e8 	.word	0x200003e8

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fff0 	bl	800157c <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffe0 	bl	800157c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0be      	b.n	8001778 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe fe28 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fbbd 	bl	8001d9c <ADC_ConversionStop_Disable>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 8099 	bne.w	8001766 <HAL_ADC_Init+0x18e>
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8095 	bne.w	8001766 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001644:	f023 0302 	bic.w	r3, r3, #2
 8001648:	f043 0202 	orr.w	r2, r3, #2
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001658:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b1b      	ldrb	r3, [r3, #12]
 800165e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001660:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	4313      	orrs	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001670:	d003      	beq.n	800167a <HAL_ADC_Init+0xa2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_ADC_Init+0xa8>
 800167a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167e:	e000      	b.n	8001682 <HAL_ADC_Init+0xaa>
 8001680:	2300      	movs	r3, #0
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7d1b      	ldrb	r3, [r3, #20]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d119      	bne.n	80016c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7b1b      	ldrb	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	3b01      	subs	r3, #1
 800169e:	035a      	lsls	r2, r3, #13
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	e00b      	b.n	80016c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <HAL_ADC_Init+0x1a8>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f4:	d003      	beq.n	80016fe <HAL_ADC_Init+0x126>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d104      	bne.n	8001708 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	3b01      	subs	r3, #1
 8001704:	051b      	lsls	r3, r3, #20
 8001706:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	430a      	orrs	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <HAL_ADC_Init+0x1ac>)
 8001724:	4013      	ands	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001742:	e018      	b.n	8001776 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f023 0312 	bic.w	r3, r3, #18
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001764:	e007      	b.n	8001776 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	ffe1f7fd 	.word	0xffe1f7fd
 8001784:	ff1f0efe 	.word	0xff1f0efe

08001788 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a64      	ldr	r2, [pc, #400]	@ (8001930 <HAL_ADC_Start_DMA+0x1a8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_ADC_Start_DMA+0x24>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a63      	ldr	r2, [pc, #396]	@ (8001934 <HAL_ADC_Start_DMA+0x1ac>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_Start_DMA+0x32>
 80017ac:	4b60      	ldr	r3, [pc, #384]	@ (8001930 <HAL_ADC_Start_DMA+0x1a8>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 80b3 	bne.w	8001920 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_Start_DMA+0x40>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0ae      	b.n	8001926 <HAL_ADC_Start_DMA+0x19e>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fa89 	bl	8001ce8 <ADC_Enable>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 809a 	bne.w	8001916 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001934 <HAL_ADC_Start_DMA+0x1ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d105      	bne.n	800180c <HAL_ADC_Start_DMA+0x84>
 8001800:	4b4b      	ldr	r3, [pc, #300]	@ (8001930 <HAL_ADC_Start_DMA+0x1a8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d115      	bne.n	8001838 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d026      	beq.n	8001874 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800182e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001836:	e01d      	b.n	8001874 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a39      	ldr	r2, [pc, #228]	@ (8001930 <HAL_ADC_Start_DMA+0x1a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_ADC_Start_DMA+0xd0>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <HAL_ADC_Start_DMA+0x1ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d10d      	bne.n	8001874 <HAL_ADC_Start_DMA+0xec>
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_ADC_Start_DMA+0x1a8>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800186c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a25      	ldr	r2, [pc, #148]	@ (8001938 <HAL_ADC_Start_DMA+0x1b0>)
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a24      	ldr	r2, [pc, #144]	@ (800193c <HAL_ADC_Start_DMA+0x1b4>)
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <HAL_ADC_Start_DMA+0x1b8>)
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0202 	mvn.w	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a18      	ldr	r0, [r3, #32]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	334c      	adds	r3, #76	@ 0x4c
 80018d8:	4619      	mov	r1, r3
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f000 fd31 	bl	8002344 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018ec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018f0:	d108      	bne.n	8001904 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001900:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001902:	e00f      	b.n	8001924 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001912:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001914:	e006      	b.n	8001924 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800191e:	e001      	b.n	8001924 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001924:	7dfb      	ldrb	r3, [r7, #23]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40012400 	.word	0x40012400
 8001934:	40012800 	.word	0x40012800
 8001938:	08001e1f 	.word	0x08001e1f
 800193c:	08001e9b 	.word	0x08001e9b
 8001940:	08001eb7 	.word	0x08001eb7

08001944 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d03e      	beq.n	80019e4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d039      	beq.n	80019e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001992:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001996:	d11d      	bne.n	80019d4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800199c:	2b00      	cmp	r3, #0
 800199e:	d119      	bne.n	80019d4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0220 	bic.w	r2, r2, #32
 80019ae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f874 	bl	8001ac2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0212 	mvn.w	r2, #18
 80019e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d04d      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d048      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a1a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a1e:	d012      	beq.n	8001a46 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d125      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a38:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a3c:	d11d      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d119      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a54:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fae4 	bl	8002048 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 020c 	mvn.w	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f812 	bl	8001ad4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0201 	mvn.w	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x20>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e0dc      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1da>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d81c      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b05      	subs	r3, #5
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b60:	e03c      	b.n	8001bdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d81c      	bhi.n	8001ba4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b23      	subs	r3, #35	@ 0x23
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4019      	ands	r1, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b23      	subs	r3, #35	@ 0x23
 8001b96:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ba2:	e01b      	b.n	8001bdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b41      	subs	r3, #65	@ 0x41
 8001bb6:	221f      	movs	r2, #31
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b41      	subs	r3, #65	@ 0x41
 8001bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d91c      	bls.n	8001c1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68d9      	ldr	r1, [r3, #12]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b1e      	subs	r3, #30
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6898      	ldr	r0, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	e019      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6919      	ldr	r1, [r3, #16]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c5e:	2b11      	cmp	r3, #17
 8001c60:	d132      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1d      	ldr	r2, [pc, #116]	@ (8001cdc <HAL_ADC_ConfigChannel+0x1e4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d125      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d126      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d11a      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9a      	lsrs	r2, r3, #18
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x1b2>
 8001cb6:	e007      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40012400 	.word	0x40012400
 8001ce0:	20000004 	.word	0x20000004
 8001ce4:	431bde83 	.word	0x431bde83

08001ce8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d040      	beq.n	8001d88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d16:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <ADC_Enable+0xac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <ADC_Enable+0xb0>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d24:	e002      	b.n	8001d2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d32:	f7ff fc23 	bl	800157c <HAL_GetTick>
 8001d36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d38:	e01f      	b.n	8001d7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d3a:	f7ff fc1f 	bl	800157c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d918      	bls.n	8001d7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d011      	beq.n	8001d7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e007      	b.n	8001d8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d1d8      	bne.n	8001d3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000004 	.word	0x20000004
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12e      	bne.n	8001e14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dc6:	f7ff fbd9 	bl	800157c <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dcc:	e01b      	b.n	8001e06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dce:	f7ff fbd5 	bl	800157c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d914      	bls.n	8001e06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10d      	bne.n	8001e06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e007      	b.n	8001e16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d0dc      	beq.n	8001dce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d127      	bne.n	8001e88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e52:	d115      	bne.n	8001e80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fe1e 	bl	8001ac2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e86:	e004      	b.n	8001e92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7fe fc7f 	bl	80007ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fe02 	bl	8001ae6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_ADCEx_Calibration_Start+0x1e>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e097      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x14e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff42 	bl	8001d9c <ADC_ConversionStop_Disable>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fee3 	bl	8001ce8 <ADC_Enable>
 8001f22:	4603      	mov	r3, r0
 8001f24:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 8081 	bne.w	8002030 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f42:	4b40      	ldr	r3, [pc, #256]	@ (8002044 <HAL_ADCEx_Calibration_Start+0x158>)
 8001f44:	681c      	ldr	r4, [r3, #0]
 8001f46:	2002      	movs	r0, #2
 8001f48:	f003 fc5c 	bl	8005804 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f52:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f54:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f56:	e002      	b.n	8001f5e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f9      	bne.n	8001f58 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f74:	f7ff fb02 	bl	800157c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f7a:	e01b      	b.n	8001fb4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f7c:	f7ff fafe 	bl	800157c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b0a      	cmp	r3, #10
 8001f88:	d914      	bls.n	8001fb4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f023 0312 	bic.w	r3, r3, #18
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e042      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1dc      	bne.n	8001f7c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0204 	orr.w	r2, r2, #4
 8001fd0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fd2:	f7ff fad3 	bl	800157c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fd8:	e01b      	b.n	8002012 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fda:	f7ff facf 	bl	800157c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b0a      	cmp	r3, #10
 8001fe6:	d914      	bls.n	8002012 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f023 0312 	bic.w	r3, r3, #18
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e013      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1dc      	bne.n	8001fda <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002038:	7dfb      	ldrb	r3, [r7, #23]
}
 800203a:	4618      	mov	r0, r3
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4906      	ldr	r1, [pc, #24]	@ (80020f4 <__NVIC_EnableIRQ+0x34>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	@ (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	@ (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	@ 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff90 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff2d 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff42 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff90 	bl	800214c <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5f 	bl	80020f8 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff35 	bl	80020c0 <__NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffa2 	bl	80021b0 <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800227a:	f000 f802 	bl	8002282 <HAL_SYSTICK_Callback>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e043      	b.n	800232e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_DMA_Init+0xa8>)
 80022ae:	4413      	add	r3, r2
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <HAL_DMA_Init+0xac>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <HAL_DMA_Init+0xb0>)
 80022c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	bffdfff8 	.word	0xbffdfff8
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	40020000 	.word	0x40020000

08002344 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Start_IT+0x20>
 8002360:	2302      	movs	r3, #2
 8002362:	e04b      	b.n	80023fc <HAL_DMA_Start_IT+0xb8>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d13a      	bne.n	80023ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f9f8 	bl	8002792 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 020e 	orr.w	r2, r2, #14
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e00f      	b.n	80023dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 020a 	orr.w	r2, r2, #10
 80023da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e005      	b.n	80023fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
 80023f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e020      	b.n	8002470 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
	...

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d005      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	e051      	b.n	8002544 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020e 	bic.w	r2, r2, #14
 80024ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <HAL_DMA_Abort_IT+0xd4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d029      	beq.n	800251e <HAL_DMA_Abort_IT+0xa2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <HAL_DMA_Abort_IT+0xd8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_Abort_IT+0x9e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002558 <HAL_DMA_Abort_IT+0xdc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_Abort_IT+0x98>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_DMA_Abort_IT+0xe0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d012      	beq.n	800250e <HAL_DMA_Abort_IT+0x92>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002560 <HAL_DMA_Abort_IT+0xe4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00a      	beq.n	8002508 <HAL_DMA_Abort_IT+0x8c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002564 <HAL_DMA_Abort_IT+0xe8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d102      	bne.n	8002502 <HAL_DMA_Abort_IT+0x86>
 80024fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002500:	e00e      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 8002502:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002506:	e00b      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 8002508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800250c:	e008      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 800250e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002512:	e005      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 8002514:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002518:	e002      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 800251a:	2310      	movs	r3, #16
 800251c:	e000      	b.n	8002520 <HAL_DMA_Abort_IT+0xa4>
 800251e:	2301      	movs	r3, #1
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_DMA_Abort_IT+0xec>)
 8002522:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
    } 
  }
  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40020008 	.word	0x40020008
 8002554:	4002001c 	.word	0x4002001c
 8002558:	40020030 	.word	0x40020030
 800255c:	40020044 	.word	0x40020044
 8002560:	40020058 	.word	0x40020058
 8002564:	4002006c 	.word	0x4002006c
 8002568:	40020000 	.word	0x40020000

0800256c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2204      	movs	r2, #4
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d04f      	beq.n	8002634 <HAL_DMA_IRQHandler+0xc8>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04a      	beq.n	8002634 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a66      	ldr	r2, [pc, #408]	@ (800275c <HAL_DMA_IRQHandler+0x1f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d029      	beq.n	800261a <HAL_DMA_IRQHandler+0xae>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_DMA_IRQHandler+0x1f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_IRQHandler+0xaa>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a63      	ldr	r2, [pc, #396]	@ (8002764 <HAL_DMA_IRQHandler+0x1f8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01a      	beq.n	8002610 <HAL_DMA_IRQHandler+0xa4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a62      	ldr	r2, [pc, #392]	@ (8002768 <HAL_DMA_IRQHandler+0x1fc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d012      	beq.n	800260a <HAL_DMA_IRQHandler+0x9e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a60      	ldr	r2, [pc, #384]	@ (800276c <HAL_DMA_IRQHandler+0x200>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x98>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002770 <HAL_DMA_IRQHandler+0x204>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <HAL_DMA_IRQHandler+0x92>
 80025f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025fc:	e00e      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 80025fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002602:	e00b      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 8002604:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002608:	e008      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 800260a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800260e:	e005      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 8002610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002614:	e002      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 8002616:	2340      	movs	r3, #64	@ 0x40
 8002618:	e000      	b.n	800261c <HAL_DMA_IRQHandler+0xb0>
 800261a:	2304      	movs	r3, #4
 800261c:	4a55      	ldr	r2, [pc, #340]	@ (8002774 <HAL_DMA_IRQHandler+0x208>)
 800261e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8094 	beq.w	8002752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002632:	e08e      	b.n	8002752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	2202      	movs	r2, #2
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d056      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x186>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d051      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020a 	bic.w	r2, r2, #10
 800266a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_DMA_IRQHandler+0x1f0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d029      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x166>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a37      	ldr	r2, [pc, #220]	@ (8002760 <HAL_DMA_IRQHandler+0x1f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <HAL_DMA_IRQHandler+0x162>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a35      	ldr	r2, [pc, #212]	@ (8002764 <HAL_DMA_IRQHandler+0x1f8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x15c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a34      	ldr	r2, [pc, #208]	@ (8002768 <HAL_DMA_IRQHandler+0x1fc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d012      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x156>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a32      	ldr	r2, [pc, #200]	@ (800276c <HAL_DMA_IRQHandler+0x200>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x150>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a31      	ldr	r2, [pc, #196]	@ (8002770 <HAL_DMA_IRQHandler+0x204>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d102      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x14a>
 80026b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026b4:	e00e      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026ba:	e00b      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c0:	e008      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026c6:	e005      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026cc:	e002      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026ce:	2320      	movs	r3, #32
 80026d0:	e000      	b.n	80026d4 <HAL_DMA_IRQHandler+0x168>
 80026d2:	2302      	movs	r3, #2
 80026d4:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_DMA_IRQHandler+0x208>)
 80026d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d034      	beq.n	8002752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026f0:	e02f      	b.n	8002752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2208      	movs	r2, #8
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d028      	beq.n	8002754 <HAL_DMA_IRQHandler+0x1e8>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d023      	beq.n	8002754 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020e 	bic.w	r2, r2, #14
 800271a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    }
  }
  return;
 8002752:	bf00      	nop
 8002754:	bf00      	nop
}
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40020008 	.word	0x40020008
 8002760:	4002001c 	.word	0x4002001c
 8002764:	40020030 	.word	0x40020030
 8002768:	40020044 	.word	0x40020044
 800276c:	40020058 	.word	0x40020058
 8002770:	4002006c 	.word	0x4002006c
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002786:	b2db      	uxtb	r3, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d108      	bne.n	80027d2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027d0:	e007      	b.n	80027e2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	60da      	str	r2, [r3, #12]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b08b      	sub	sp, #44	@ 0x2c
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e169      	b.n	8002ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002800:	2201      	movs	r2, #1
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8158 	bne.w	8002ace <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a9a      	ldr	r2, [pc, #616]	@ (8002a8c <HAL_GPIO_Init+0x2a0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d05e      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
 8002828:	4a98      	ldr	r2, [pc, #608]	@ (8002a8c <HAL_GPIO_Init+0x2a0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d875      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 800282e:	4a98      	ldr	r2, [pc, #608]	@ (8002a90 <HAL_GPIO_Init+0x2a4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d058      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
 8002834:	4a96      	ldr	r2, [pc, #600]	@ (8002a90 <HAL_GPIO_Init+0x2a4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d86f      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 800283a:	4a96      	ldr	r2, [pc, #600]	@ (8002a94 <HAL_GPIO_Init+0x2a8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d052      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
 8002840:	4a94      	ldr	r2, [pc, #592]	@ (8002a94 <HAL_GPIO_Init+0x2a8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d869      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 8002846:	4a94      	ldr	r2, [pc, #592]	@ (8002a98 <HAL_GPIO_Init+0x2ac>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04c      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
 800284c:	4a92      	ldr	r2, [pc, #584]	@ (8002a98 <HAL_GPIO_Init+0x2ac>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d863      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 8002852:	4a92      	ldr	r2, [pc, #584]	@ (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d046      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
 8002858:	4a90      	ldr	r2, [pc, #576]	@ (8002a9c <HAL_GPIO_Init+0x2b0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d85d      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 800285e:	2b12      	cmp	r3, #18
 8002860:	d82a      	bhi.n	80028b8 <HAL_GPIO_Init+0xcc>
 8002862:	2b12      	cmp	r3, #18
 8002864:	d859      	bhi.n	800291a <HAL_GPIO_Init+0x12e>
 8002866:	a201      	add	r2, pc, #4	@ (adr r2, 800286c <HAL_GPIO_Init+0x80>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028e7 	.word	0x080028e7
 8002870:	080028c1 	.word	0x080028c1
 8002874:	080028d3 	.word	0x080028d3
 8002878:	08002915 	.word	0x08002915
 800287c:	0800291b 	.word	0x0800291b
 8002880:	0800291b 	.word	0x0800291b
 8002884:	0800291b 	.word	0x0800291b
 8002888:	0800291b 	.word	0x0800291b
 800288c:	0800291b 	.word	0x0800291b
 8002890:	0800291b 	.word	0x0800291b
 8002894:	0800291b 	.word	0x0800291b
 8002898:	0800291b 	.word	0x0800291b
 800289c:	0800291b 	.word	0x0800291b
 80028a0:	0800291b 	.word	0x0800291b
 80028a4:	0800291b 	.word	0x0800291b
 80028a8:	0800291b 	.word	0x0800291b
 80028ac:	0800291b 	.word	0x0800291b
 80028b0:	080028c9 	.word	0x080028c9
 80028b4:	080028dd 	.word	0x080028dd
 80028b8:	4a79      	ldr	r2, [pc, #484]	@ (8002aa0 <HAL_GPIO_Init+0x2b4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028be:	e02c      	b.n	800291a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	623b      	str	r3, [r7, #32]
          break;
 80028c6:	e029      	b.n	800291c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	3304      	adds	r3, #4
 80028ce:	623b      	str	r3, [r7, #32]
          break;
 80028d0:	e024      	b.n	800291c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	3308      	adds	r3, #8
 80028d8:	623b      	str	r3, [r7, #32]
          break;
 80028da:	e01f      	b.n	800291c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	330c      	adds	r3, #12
 80028e2:	623b      	str	r3, [r7, #32]
          break;
 80028e4:	e01a      	b.n	800291c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ee:	2304      	movs	r3, #4
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e013      	b.n	800291c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028fc:	2308      	movs	r3, #8
 80028fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	611a      	str	r2, [r3, #16]
          break;
 8002906:	e009      	b.n	800291c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002908:	2308      	movs	r3, #8
 800290a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	615a      	str	r2, [r3, #20]
          break;
 8002912:	e003      	b.n	800291c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x130>
          break;
 800291a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2bff      	cmp	r3, #255	@ 0xff
 8002920:	d801      	bhi.n	8002926 <HAL_GPIO_Init+0x13a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e001      	b.n	800292a <HAL_GPIO_Init+0x13e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2bff      	cmp	r3, #255	@ 0xff
 8002930:	d802      	bhi.n	8002938 <HAL_GPIO_Init+0x14c>
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	e002      	b.n	800293e <HAL_GPIO_Init+0x152>
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	3b08      	subs	r3, #8
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	210f      	movs	r1, #15
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	6a39      	ldr	r1, [r7, #32]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b1 	beq.w	8002ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800296c:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <HAL_GPIO_Init+0x2b8>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa4 <HAL_GPIO_Init+0x2b8>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6193      	str	r3, [r2, #24]
 8002978:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_GPIO_Init+0x2b8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002984:	4a48      	ldr	r2, [pc, #288]	@ (8002aa8 <HAL_GPIO_Init+0x2bc>)
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a40      	ldr	r2, [pc, #256]	@ (8002aac <HAL_GPIO_Init+0x2c0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_GPIO_Init+0x1ec>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab0 <HAL_GPIO_Init+0x2c4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00d      	beq.n	80029d4 <HAL_GPIO_Init+0x1e8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a3e      	ldr	r2, [pc, #248]	@ (8002ab4 <HAL_GPIO_Init+0x2c8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d007      	beq.n	80029d0 <HAL_GPIO_Init+0x1e4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ab8 <HAL_GPIO_Init+0x2cc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_GPIO_Init+0x1e0>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e006      	b.n	80029da <HAL_GPIO_Init+0x1ee>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e004      	b.n	80029da <HAL_GPIO_Init+0x1ee>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e002      	b.n	80029da <HAL_GPIO_Init+0x1ee>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_GPIO_Init+0x1ee>
 80029d8:	2300      	movs	r3, #0
 80029da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029dc:	f002 0203 	and.w	r2, r2, #3
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	4093      	lsls	r3, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ea:	492f      	ldr	r1, [pc, #188]	@ (8002aa8 <HAL_GPIO_Init+0x2bc>)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	492c      	ldr	r1, [pc, #176]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a12:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	4928      	ldr	r1, [pc, #160]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a2c:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4922      	ldr	r1, [pc, #136]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	491e      	ldr	r1, [pc, #120]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4918      	ldr	r1, [pc, #96]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4914      	ldr	r1, [pc, #80]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d021      	beq.n	8002ac0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	490e      	ldr	r1, [pc, #56]	@ (8002abc <HAL_GPIO_Init+0x2d0>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
 8002a88:	e021      	b.n	8002ace <HAL_GPIO_Init+0x2e2>
 8002a8a:	bf00      	nop
 8002a8c:	10320000 	.word	0x10320000
 8002a90:	10310000 	.word	0x10310000
 8002a94:	10220000 	.word	0x10220000
 8002a98:	10210000 	.word	0x10210000
 8002a9c:	10120000 	.word	0x10120000
 8002aa0:	10110000 	.word	0x10110000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40010800 	.word	0x40010800
 8002ab0:	40010c00 	.word	0x40010c00
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40011400 	.word	0x40011400
 8002abc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	4909      	ldr	r1, [pc, #36]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f ae8e 	bne.w	8002800 <HAL_GPIO_Init+0x14>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	372c      	adds	r7, #44	@ 0x2c
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e12b      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fd06 	bl	800055c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b88:	f002 fd40 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8002b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a81      	ldr	r2, [pc, #516]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d807      	bhi.n	8002ba8 <HAL_I2C_Init+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a80      	ldr	r2, [pc, #512]	@ (8002d9c <HAL_I2C_Init+0x278>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	bf94      	ite	ls
 8002ba0:	2301      	movls	r3, #1
 8002ba2:	2300      	movhi	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e006      	b.n	8002bb6 <HAL_I2C_Init+0x92>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a7d      	ldr	r2, [pc, #500]	@ (8002da0 <HAL_I2C_Init+0x27c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0e7      	b.n	8002d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	@ (8002da4 <HAL_I2C_Init+0x280>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d802      	bhi.n	8002bf8 <HAL_I2C_Init+0xd4>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	e009      	b.n	8002c0c <HAL_I2C_Init+0xe8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a69      	ldr	r2, [pc, #420]	@ (8002da8 <HAL_I2C_Init+0x284>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	495c      	ldr	r1, [pc, #368]	@ (8002d98 <HAL_I2C_Init+0x274>)
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	d819      	bhi.n	8002c60 <HAL_I2C_Init+0x13c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e59      	subs	r1, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c40:	400b      	ands	r3, r1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_I2C_Init+0x138>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e59      	subs	r1, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	e051      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e04f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_I2C_Init+0x168>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e012      	b.n	8002cb2 <HAL_I2C_Init+0x18e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x196>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e022      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_I2C_Init+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e58      	subs	r0, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	440b      	add	r3, r1
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Init+0x1dc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6809      	ldr	r1, [r1, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6911      	ldr	r1, [r2, #16]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	000186a0 	.word	0x000186a0
 8002d9c:	001e847f 	.word	0x001e847f
 8002da0:	003d08ff 	.word	0x003d08ff
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbe:	2b80      	cmp	r3, #128	@ 0x80
 8002dc0:	d103      	bne.n	8002dca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
 8002de4:	4613      	mov	r3, r2
 8002de6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7fe fbc8 	bl	800157c <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 80e0 	bne.w	8002fbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	4970      	ldr	r1, [pc, #448]	@ (8002fc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 fe12 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0d3      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0x50>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0cc      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d007      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2221      	movs	r2, #33	@ 0x21
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2210      	movs	r2, #16
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a50      	ldr	r2, [pc, #320]	@ (8002fcc <HAL_I2C_Master_Transmit+0x1f8>)
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f001 fca2 	bl	80047dc <I2C_MasterRequestWrite>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e08d      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eb8:	e066      	b.n	8002f88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 fed0 	bl	8004c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06b      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_I2C_Master_Transmit+0x188>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	6a39      	ldr	r1, [r7, #32]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f001 fec7 	bl	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d107      	bne.n	8002f84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01a      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d194      	bne.n	8002eba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000

08002fd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ff0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d003      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x38>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	f040 80c1 	bne.w	800318a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <HAL_I2C_EV_IRQHandler+0x6e>
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003028:	d003      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x62>
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003030:	d101      	bne.n	8003036 <HAL_I2C_EV_IRQHandler+0x66>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x68>
 8003036:	2300      	movs	r3, #0
 8003038:	2b01      	cmp	r3, #1
 800303a:	f000 8132 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x92>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	0a5b      	lsrs	r3, r3, #9
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d006      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 fef5 	bl	8004e44 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fd99 	bl	8003b92 <I2C_Master_SB>
 8003060:	e092      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_I2C_EV_IRQHandler+0xb2>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	0a5b      	lsrs	r3, r3, #9
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fe0e 	bl	8003c9c <I2C_Master_ADD10>
 8003080:	e082      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	0a5b      	lsrs	r3, r3, #9
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fe27 	bl	8003cee <I2C_Master_ADDR>
 80030a0:	e072      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03b      	beq.n	8003126 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030bc:	f000 80f3 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	09db      	lsrs	r3, r3, #7
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00f      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x11c>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x11c>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9f1 	bl	80034cc <I2C_MasterTransmit_TXE>
 80030ea:	e04d      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80d6 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	0a5b      	lsrs	r3, r3, #9
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80cf 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003108:	7bbb      	ldrb	r3, [r7, #14]
 800310a:	2b21      	cmp	r3, #33	@ 0x21
 800310c:	d103      	bne.n	8003116 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa78 	bl	8003604 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003114:	e0c7      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b40      	cmp	r3, #64	@ 0x40
 800311a:	f040 80c4 	bne.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fae6 	bl	80036f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003124:	e0bf      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003134:	f000 80b7 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <HAL_I2C_EV_IRQHandler+0x194>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	0a9b      	lsrs	r3, r3, #10
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <HAL_I2C_EV_IRQHandler+0x194>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb5f 	bl	8003820 <I2C_MasterReceive_RXNE>
 8003162:	e011      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 809a 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	0a5b      	lsrs	r3, r3, #9
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8093 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fc15 	bl	80039b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	e08e      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003188:	e08d      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e007      	b.n	80031ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_I2C_EV_IRQHandler+0x20e>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	0a5b      	lsrs	r3, r3, #9
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031d4:	69b9      	ldr	r1, [r7, #24]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 ffe0 	bl	800419c <I2C_Slave_ADDR>
 80031dc:	e066      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x22e>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0a5b      	lsrs	r3, r3, #9
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f001 f81a 	bl	8004230 <I2C_Slave_STOPF>
 80031fc:	e056      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031fe:	7bbb      	ldrb	r3, [r7, #14]
 8003200:	2b21      	cmp	r3, #33	@ 0x21
 8003202:	d002      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x23a>
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	2b29      	cmp	r3, #41	@ 0x29
 8003208:	d125      	bne.n	8003256 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	09db      	lsrs	r3, r3, #7
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0x266>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0a9b      	lsrs	r3, r3, #10
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0x266>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fef8 	bl	8004024 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003234:	e039      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d033      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x2da>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	0a5b      	lsrs	r3, r3, #9
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02d      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 ff25 	bl	800409e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003254:	e029      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00f      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	0a9b      	lsrs	r3, r3, #10
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x2b2>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 ff2f 	bl	80040de <I2C_SlaveReceive_RXNE>
 8003280:	e014      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	0a5b      	lsrs	r3, r3, #9
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 ff5d 	bl	800415a <I2C_SlaveReceive_BTF>
 80032a0:	e004      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08a      	sub	sp, #40	@ 0x28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x5e>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032fe:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	0a5b      	lsrs	r3, r3, #9
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0x88>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003338:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	0a9b      	lsrs	r3, r3, #10
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d03f      	beq.n	80033c6 <HAL_I2C_ER_IRQHandler+0x114>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d039      	beq.n	80033c6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003352:	7efb      	ldrb	r3, [r7, #27]
 8003354:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800336c:	7ebb      	ldrb	r3, [r7, #26]
 800336e:	2b20      	cmp	r3, #32
 8003370:	d112      	bne.n	8003398 <HAL_I2C_ER_IRQHandler+0xe6>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10f      	bne.n	8003398 <HAL_I2C_ER_IRQHandler+0xe6>
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b21      	cmp	r3, #33	@ 0x21
 800337c:	d008      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b29      	cmp	r3, #41	@ 0x29
 8003382:	d005      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0xde>
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b28      	cmp	r3, #40	@ 0x28
 8003388:	d106      	bne.n	8003398 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b21      	cmp	r3, #33	@ 0x21
 800338e:	d103      	bne.n	8003398 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f001 f87d 	bl	8004490 <I2C_Slave_AF>
 8003396:	e016      	b.n	80033c6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033aa:	7efb      	ldrb	r3, [r7, #27]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d002      	beq.n	80033b6 <HAL_I2C_ER_IRQHandler+0x104>
 80033b0:	7efb      	ldrb	r3, [r7, #27]
 80033b2:	2b40      	cmp	r3, #64	@ 0x40
 80033b4:	d107      	bne.n	80033c6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	0adb      	lsrs	r3, r3, #11
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00e      	beq.n	80033f0 <HAL_I2C_ER_IRQHandler+0x13e>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80033ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f001 f8b8 	bl	8004578 <I2C_ITError>
  }
}
 8003408:	bf00      	nop
 800340a:	3728      	adds	r7, #40	@ 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
 8003464:	4613      	mov	r3, r2
 8003466:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d150      	bne.n	8003594 <I2C_MasterTransmit_TXE+0xc8>
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b21      	cmp	r3, #33	@ 0x21
 80034f6:	d14d      	bne.n	8003594 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d01d      	beq.n	800353a <I2C_MasterTransmit_TXE+0x6e>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b20      	cmp	r3, #32
 8003502:	d01a      	beq.n	800353a <I2C_MasterTransmit_TXE+0x6e>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800350a:	d016      	beq.n	800353a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800351a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2211      	movs	r2, #17
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff6c 	bl	8003410 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003538:	e060      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003548:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003558:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b40      	cmp	r3, #64	@ 0x40
 8003572:	d107      	bne.n	8003584 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff81 	bl	8003484 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003582:	e03b      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff3f 	bl	8003410 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003592:	e033      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b21      	cmp	r3, #33	@ 0x21
 8003598:	d005      	beq.n	80035a6 <I2C_MasterTransmit_TXE+0xda>
 800359a:	7bbb      	ldrb	r3, [r7, #14]
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	d12d      	bne.n	80035fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b22      	cmp	r3, #34	@ 0x22
 80035a4:	d12a      	bne.n	80035fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035c0:	e01c      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d103      	bne.n	80035d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f88e 	bl	80036f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80035d4:	e012      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035fa:	e7ff      	b.n	80035fc <I2C_MasterTransmit_TXE+0x130>
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b21      	cmp	r3, #33	@ 0x21
 800361c:	d164      	bne.n	80036e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800364c:	e04c      	b.n	80036e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d01d      	beq.n	8003690 <I2C_MasterTransmit_BTF+0x8c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d01a      	beq.n	8003690 <I2C_MasterTransmit_BTF+0x8c>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003660:	d016      	beq.n	8003690 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003670:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2211      	movs	r2, #17
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fec1 	bl	8003410 <HAL_I2C_MasterTxCpltCallback>
}
 800368e:	e02b      	b.n	80036e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800369e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d107      	bne.n	80036da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fed6 	bl	8003484 <HAL_I2C_MemTxCpltCallback>
}
 80036d8:	e006      	b.n	80036e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fe94 	bl	8003410 <HAL_I2C_MasterTxCpltCallback>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11d      	bne.n	8003744 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10b      	bne.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003714:	b2da      	uxtb	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003726:	e077      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	b29b      	uxth	r3, r3
 800372e:	121b      	asrs	r3, r3, #8
 8003730:	b2da      	uxtb	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003742:	e069      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10b      	bne.n	8003764 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003750:	b2da      	uxtb	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003762:	e059      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003768:	2b02      	cmp	r3, #2
 800376a:	d152      	bne.n	8003812 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b22      	cmp	r3, #34	@ 0x22
 8003770:	d10d      	bne.n	800378e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003780:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800378c:	e044      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b21      	cmp	r3, #33	@ 0x21
 800379c:	d112      	bne.n	80037c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037c2:	e029      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d124      	bne.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b21      	cmp	r3, #33	@ 0x21
 80037d2:	d121      	bne.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe3a 	bl	8003484 <HAL_I2C_MemTxCpltCallback>
}
 8003810:	e002      	b.n	8003818 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff faca 	bl	8002dac <I2C_Flush_DR>
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b22      	cmp	r3, #34	@ 0x22
 8003832:	f040 80b9 	bne.w	80039a8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d921      	bls.n	800388e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b03      	cmp	r3, #3
 8003878:	f040 8096 	bne.w	80039a8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800388c:	e08c      	b.n	80039a8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	2b02      	cmp	r3, #2
 8003894:	d07f      	beq.n	8003996 <I2C_MasterReceive_RXNE+0x176>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <I2C_MasterReceive_RXNE+0x82>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d179      	bne.n	8003996 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f001 fa6e 	bl	8004d84 <I2C_WaitOnSTOPRequestThroughIT>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d14c      	bne.n	8003948 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d10a      	bne.n	800391e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fdbd 	bl	8003496 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800391c:	e044      	b.n	80039a8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d002      	beq.n	8003932 <I2C_MasterReceive_RXNE+0x112>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d103      	bne.n	800393a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
 8003938:	e002      	b.n	8003940 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2212      	movs	r2, #18
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fd6e 	bl	8003422 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003946:	e02f      	b.n	80039a8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003956:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fd8a 	bl	80034a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003994:	e008      	b.n	80039a8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a4:	605a      	str	r2, [r3, #4]
}
 80039a6:	e7ff      	b.n	80039a8 <I2C_MasterReceive_RXNE+0x188>
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d11b      	bne.n	8003a00 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039fe:	e0c4      	b.n	8003b8a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d129      	bne.n	8003a5e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a18:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d00a      	beq.n	8003a36 <I2C_MasterReceive_BTF+0x86>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d007      	beq.n	8003a36 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a34:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a5c:	e095      	b.n	8003b8a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d17d      	bne.n	8003b64 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d002      	beq.n	8003a74 <I2C_MasterReceive_BTF+0xc4>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d108      	bne.n	8003a86 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e016      	b.n	8003ab4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d002      	beq.n	8003a92 <I2C_MasterReceive_BTF+0xe2>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d108      	bne.n	8003aa4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e007      	b.n	8003ab4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d10a      	bne.n	8003b3a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fcaf 	bl	8003496 <HAL_I2C_MemRxCpltCallback>
}
 8003b38:	e027      	b.n	8003b8a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d002      	beq.n	8003b4e <I2C_MasterReceive_BTF+0x19e>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d103      	bne.n	8003b56 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b54:	e002      	b.n	8003b5c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2212      	movs	r2, #18
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fc60 	bl	8003422 <HAL_I2C_MasterRxCpltCallback>
}
 8003b62:	e012      	b.n	8003b8a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b40      	cmp	r3, #64	@ 0x40
 8003ba4:	d117      	bne.n	8003bd6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bbe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bc0:	e067      	b.n	8003c92 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]
}
 8003bd4:	e05d      	b.n	8003c92 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bde:	d133      	bne.n	8003c48 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b21      	cmp	r3, #33	@ 0x21
 8003bea:	d109      	bne.n	8003c00 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bfc:	611a      	str	r2, [r3, #16]
 8003bfe:	e008      	b.n	8003c12 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <I2C_Master_SB+0x92>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d108      	bne.n	8003c36 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d032      	beq.n	8003c92 <I2C_Master_SB+0x100>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02d      	beq.n	8003c92 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c44:	605a      	str	r2, [r3, #4]
}
 8003c46:	e024      	b.n	8003c92 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10e      	bne.n	8003c6e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	11db      	asrs	r3, r3, #7
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f063 030f 	orn	r3, r3, #15
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]
}
 8003c6c:	e011      	b.n	8003c92 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10d      	bne.n	8003c92 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	11db      	asrs	r3, r3, #7
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 0306 	and.w	r3, r3, #6
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f063 030e 	orn	r3, r3, #14
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <I2C_Master_ADD10+0x26>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <I2C_Master_ADD10+0x48>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce2:	605a      	str	r2, [r3, #4]
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b091      	sub	sp, #68	@ 0x44
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cfc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b22      	cmp	r3, #34	@ 0x22
 8003d16:	f040 8174 	bne.w	8004002 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <I2C_Master_ADDR+0x54>
 8003d22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d10b      	bne.n	8003d42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d40:	e16b      	b.n	800401a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11d      	bne.n	8003d86 <I2C_Master_ADDR+0x98>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d52:	d118      	bne.n	8003d86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d54:	2300      	movs	r3, #0
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d84:	e149      	b.n	800401a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e120      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	f040 808a 	bne.w	8003ed8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dca:	d137      	bne.n	8003e3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dea:	d113      	bne.n	8003e14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	e0f2      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e0de      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d02e      	beq.n	8003ea0 <I2C_Master_ADDR+0x1b2>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d02b      	beq.n	8003ea0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	2b12      	cmp	r3, #18
 8003e4c:	d102      	bne.n	8003e54 <I2C_Master_ADDR+0x166>
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d125      	bne.n	8003ea0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00e      	beq.n	8003e78 <I2C_Master_ADDR+0x18a>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d00b      	beq.n	8003e78 <I2C_Master_ADDR+0x18a>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d008      	beq.n	8003e78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e007      	b.n	8003e88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	e0ac      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e090      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d158      	bne.n	8003f94 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d021      	beq.n	8003f2c <I2C_Master_ADDR+0x23e>
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d01e      	beq.n	8003f2c <I2C_Master_ADDR+0x23e>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d01b      	beq.n	8003f2c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e012      	b.n	8003f52 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f60:	d14b      	bne.n	8003ffa <I2C_Master_ADDR+0x30c>
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f68:	d00b      	beq.n	8003f82 <I2C_Master_ADDR+0x294>
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d008      	beq.n	8003f82 <I2C_Master_ADDR+0x294>
 8003f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d005      	beq.n	8003f82 <I2C_Master_ADDR+0x294>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d002      	beq.n	8003f82 <I2C_Master_ADDR+0x294>
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d13b      	bne.n	8003ffa <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e032      	b.n	8003ffa <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fa2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb2:	d117      	bne.n	8003fe4 <I2C_Master_ADDR+0x2f6>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fba:	d00b      	beq.n	8003fd4 <I2C_Master_ADDR+0x2e6>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d008      	beq.n	8003fd4 <I2C_Master_ADDR+0x2e6>
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d005      	beq.n	8003fd4 <I2C_Master_ADDR+0x2e6>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d002      	beq.n	8003fd4 <I2C_Master_ADDR+0x2e6>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d107      	bne.n	8003fe4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fe2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004000:	e00b      	b.n	800401a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]
}
 8004018:	e7ff      	b.n	800401a <I2C_Master_ADDR+0x32c>
 800401a:	bf00      	nop
 800401c:	3744      	adds	r7, #68	@ 0x44
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02b      	beq.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b29      	cmp	r3, #41	@ 0x29
 8004070:	d111      	bne.n	8004096 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004080:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2221      	movs	r2, #33	@ 0x21
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2228      	movs	r2, #40	@ 0x28
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff f9cf 	bl	8003434 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d011      	beq.n	80040d4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02c      	beq.n	8004152 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d114      	bne.n	8004152 <I2C_SlaveReceive_RXNE+0x74>
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b2a      	cmp	r3, #42	@ 0x2a
 800412c:	d111      	bne.n	8004152 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2222      	movs	r2, #34	@ 0x22
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2228      	movs	r2, #40	@ 0x28
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff f97a 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d012      	beq.n	8004192 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041b6:	2b28      	cmp	r3, #40	@ 0x28
 80041b8:	d127      	bne.n	800420a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	09db      	lsrs	r3, r3, #7
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	81bb      	strh	r3, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041fc:	89ba      	ldrh	r2, [r7, #12]
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff f928 	bl	8003458 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004208:	e00e      	b.n	8004228 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800424e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800428c:	d172      	bne.n	8004374 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b22      	cmp	r3, #34	@ 0x22
 8004292:	d002      	beq.n	800429a <I2C_Slave_STOPF+0x6a>
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b2a      	cmp	r3, #42	@ 0x2a
 8004298:	d135      	bne.n	8004306 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fa50 	bl	8002778 <HAL_DMA_GetState>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d049      	beq.n	8004372 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	4a69      	ldr	r2, [pc, #420]	@ (8004488 <I2C_Slave_STOPF+0x258>)
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe f8c6 	bl	800247c <HAL_DMA_Abort_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d03d      	beq.n	8004372 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004304:	e035      	b.n	8004372 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f043 0204 	orr.w	r2, r3, #4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004338:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fa1a 	bl	8002778 <HAL_DMA_GetState>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d014      	beq.n	8004374 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434e:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <I2C_Slave_STOPF+0x258>)
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe f890 	bl	800247c <HAL_DMA_Abort_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800436c:	4610      	mov	r0, r2
 800436e:	4798      	blx	r3
 8004370:	e000      	b.n	8004374 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004372:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03e      	beq.n	80043fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d112      	bne.n	80043b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d112      	bne.n	80043e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0204 	orr.w	r2, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8b7 	bl	8004578 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800440a:	e039      	b.n	8004480 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004410:	d109      	bne.n	8004426 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2228      	movs	r2, #40	@ 0x28
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff f810 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b28      	cmp	r3, #40	@ 0x28
 8004430:	d111      	bne.n	8004456 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <I2C_Slave_STOPF+0x25c>)
 8004436:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff f80f 	bl	8003472 <HAL_I2C_ListenCpltCallback>
}
 8004454:	e014      	b.n	8004480 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	2b22      	cmp	r3, #34	@ 0x22
 800445c:	d002      	beq.n	8004464 <I2C_Slave_STOPF+0x234>
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b22      	cmp	r3, #34	@ 0x22
 8004462:	d10d      	bne.n	8004480 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe ffe3 	bl	8003446 <HAL_I2C_SlaveRxCpltCallback>
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	080048e1 	.word	0x080048e1
 800448c:	ffff0000 	.word	0xffff0000

08004490 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d002      	beq.n	80044b2 <I2C_Slave_AF+0x22>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d129      	bne.n	8004506 <I2C_Slave_AF+0x76>
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b28      	cmp	r3, #40	@ 0x28
 80044b6:	d126      	bne.n	8004506 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004574 <I2C_Slave_AF+0xe4>)
 80044bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fe ffb7 	bl	8003472 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004504:	e031      	b.n	800456a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b21      	cmp	r3, #33	@ 0x21
 800450a:	d129      	bne.n	8004560 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a19      	ldr	r2, [pc, #100]	@ (8004574 <I2C_Slave_AF+0xe4>)
 8004510:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2221      	movs	r2, #33	@ 0x21
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004536:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004540:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004550:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fe fc2a 	bl	8002dac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fe ff6b 	bl	8003434 <HAL_I2C_SlaveTxCpltCallback>
}
 800455e:	e004      	b.n	800456a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	ffff0000 	.word	0xffff0000

08004578 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004586:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	2b10      	cmp	r3, #16
 8004594:	d002      	beq.n	800459c <I2C_ITError+0x24>
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	d10a      	bne.n	80045b2 <I2C_ITError+0x3a>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b22      	cmp	r3, #34	@ 0x22
 80045a0:	d107      	bne.n	80045b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045b8:	2b28      	cmp	r3, #40	@ 0x28
 80045ba:	d107      	bne.n	80045cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2228      	movs	r2, #40	@ 0x28
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045ca:	e015      	b.n	80045f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045da:	d00a      	beq.n	80045f2 <I2C_ITError+0x7a>
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b60      	cmp	r3, #96	@ 0x60
 80045e0:	d007      	beq.n	80045f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004606:	d162      	bne.n	80046ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004616:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d020      	beq.n	8004668 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <I2C_ITError+0x25c>)
 800462c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd ff22 	bl	800247c <HAL_DMA_Abort_IT>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8089 	beq.w	8004752 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004662:	4610      	mov	r0, r2
 8004664:	4798      	blx	r3
 8004666:	e074      	b.n	8004752 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	4a59      	ldr	r2, [pc, #356]	@ (80047d4 <I2C_ITError+0x25c>)
 800466e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd ff01 	bl	800247c <HAL_DMA_Abort_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d068      	beq.n	8004752 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d10b      	bne.n	80046a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046c8:	4610      	mov	r0, r2
 80046ca:	4798      	blx	r3
 80046cc:	e041      	b.n	8004752 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b60      	cmp	r3, #96	@ 0x60
 80046d8:	d125      	bne.n	8004726 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b40      	cmp	r3, #64	@ 0x40
 80046f4:	d10b      	bne.n	800470e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe fecb 	bl	80034ba <HAL_I2C_AbortCpltCallback>
 8004724:	e015      	b.n	8004752 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d10b      	bne.n	800474c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fe feab 	bl	80034a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10e      	bne.n	8004780 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004796:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d113      	bne.n	80047cc <I2C_ITError+0x254>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b28      	cmp	r3, #40	@ 0x28
 80047a8:	d110      	bne.n	80047cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <I2C_ITError+0x260>)
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fe fe53 	bl	8003472 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	080048e1 	.word	0x080048e1
 80047d8:	ffff0000 	.word	0xffff0000

080047dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d006      	beq.n	8004806 <I2C_MasterRequestWrite+0x2a>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d003      	beq.n	8004806 <I2C_MasterRequestWrite+0x2a>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004804:	d108      	bne.n	8004818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e00b      	b.n	8004830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	2b12      	cmp	r3, #18
 800481e:	d107      	bne.n	8004830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f8f7 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004856:	d103      	bne.n	8004860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e035      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800486c:	d108      	bne.n	8004880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	e01b      	b.n	80048b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	11db      	asrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 030f 	orn	r3, r3, #15
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	490e      	ldr	r1, [pc, #56]	@ (80048d8 <I2C_MasterRequestWrite+0xfc>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f940 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e010      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4907      	ldr	r1, [pc, #28]	@ (80048dc <I2C_MasterRequestWrite+0x100>)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f930 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	00010008 	.word	0x00010008
 80048dc:	00010002 	.word	0x00010002

080048e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <I2C_DMAAbort+0x148>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <I2C_DMAAbort+0x14c>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0a1a      	lsrs	r2, r3, #8
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004926:	e00a      	b.n	800493e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493c:	d0ea      	beq.n	8004914 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	2200      	movs	r2, #0
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	2200      	movs	r2, #0
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	2200      	movs	r2, #0
 8004982:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b60      	cmp	r3, #96	@ 0x60
 80049ae:	d10e      	bne.n	80049ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7fe fd77 	bl	80034ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049cc:	e027      	b.n	8004a1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049d4:	2b28      	cmp	r3, #40	@ 0x28
 80049d6:	d117      	bne.n	8004a08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2228      	movs	r2, #40	@ 0x28
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a06:	e007      	b.n	8004a18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f7fe fd45 	bl	80034a8 <HAL_I2C_ErrorCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	14f8b589 	.word	0x14f8b589

08004a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	e048      	b.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d044      	beq.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fc fd97 	bl	800157c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d139      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10d      	bne.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	e00c      	b.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d116      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e023      	b.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10d      	bne.n	8004afa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	e00c      	b.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d093      	beq.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b32:	e071      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b42:	d123      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e067      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d041      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fc fcf2 	bl	800157c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d136      	bne.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10c      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e00b      	b.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	43da      	mvns	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e021      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10c      	bne.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e00b      	b.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af6d 	bne.w	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	e034      	b.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f8b8 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e034      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d028      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fc fc77 	bl	800157c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b80      	cmp	r3, #128	@ 0x80
 8004cac:	d016      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e007      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d1c3      	bne.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	e034      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f870 	bl	8004de8 <I2C_IsAcknowledgeFailed>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e034      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d028      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fc fc2f 	bl	800157c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11d      	bne.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d016      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d1c3      	bne.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d90:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	4a13      	ldr	r2, [pc, #76]	@ (8004de4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	0a1a      	lsrs	r2, r3, #8
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e008      	b.n	8004dd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd0:	d0e9      	beq.n	8004da6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000004 	.word	0x20000004
 8004de4:	14f8b589 	.word	0x14f8b589

08004de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d11b      	bne.n	8004e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e54:	d103      	bne.n	8004e5e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e5c:	e007      	b.n	8004e6e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e66:	d102      	bne.n	8004e6e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e272      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 8087 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e98:	4b92      	ldr	r3, [pc, #584]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d00c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ea4:	4b8f      	ldr	r3, [pc, #572]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d112      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x5e>
 8004eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebe:	4b89      	ldr	r3, [pc, #548]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x12c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d168      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e24c      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x76>
 8004ee0:	4b80      	ldr	r3, [pc, #512]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7f      	ldr	r2, [pc, #508]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e02e      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x98>
 8004ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7a      	ldr	r2, [pc, #488]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b78      	ldr	r3, [pc, #480]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a77      	ldr	r2, [pc, #476]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e01d      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0xbc>
 8004f1a:	4b72      	ldr	r3, [pc, #456]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a71      	ldr	r2, [pc, #452]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b6f      	ldr	r3, [pc, #444]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a6e      	ldr	r2, [pc, #440]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004f34:	4b6b      	ldr	r3, [pc, #428]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6a      	ldr	r2, [pc, #424]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b68      	ldr	r3, [pc, #416]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a67      	ldr	r2, [pc, #412]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fc fb12 	bl	800157c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fc fb0e 	bl	800157c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	@ 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e200      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0xe4>
 8004f7a:	e014      	b.n	8004fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fafe 	bl	800157c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f84:	f7fc fafa 	bl	800157c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e1ec      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f96:	4b53      	ldr	r3, [pc, #332]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x10c>
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d063      	beq.n	800507a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fbe:	4b49      	ldr	r3, [pc, #292]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d11c      	bne.n	8005004 <HAL_RCC_OscConfig+0x18c>
 8004fca:	4b46      	ldr	r3, [pc, #280]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_RCC_OscConfig+0x176>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e1c0      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fee:	4b3d      	ldr	r3, [pc, #244]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4939      	ldr	r1, [pc, #228]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	e03a      	b.n	800507a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800500c:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <HAL_RCC_OscConfig+0x270>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fc fab3 	bl	800157c <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501a:	f7fc faaf 	bl	800157c <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e1a1      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	4b2d      	ldr	r3, [pc, #180]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b2a      	ldr	r3, [pc, #168]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4927      	ldr	r1, [pc, #156]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <HAL_RCC_OscConfig+0x270>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fa92 	bl	800157c <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505c:	f7fc fa8e 	bl	800157c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e180      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506e:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03a      	beq.n	80050fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d019      	beq.n	80050c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508e:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <HAL_RCC_OscConfig+0x274>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005094:	f7fc fa72 	bl	800157c <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509c:	f7fc fa6e 	bl	800157c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e160      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f000 face 	bl	800565c <RCC_Delay>
 80050c0:	e01c      	b.n	80050fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <HAL_RCC_OscConfig+0x274>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c8:	f7fc fa58 	bl	800157c <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ce:	e00f      	b.n	80050f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d0:	f7fc fa54 	bl	800157c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d908      	bls.n	80050f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e146      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	42420000 	.word	0x42420000
 80050ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	4b92      	ldr	r3, [pc, #584]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e9      	bne.n	80050d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80a6 	beq.w	8005256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10d      	bne.n	8005136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b88      	ldr	r3, [pc, #544]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4a87      	ldr	r2, [pc, #540]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005124:	61d3      	str	r3, [r2, #28]
 8005126:	4b85      	ldr	r3, [pc, #532]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	4b82      	ldr	r3, [pc, #520]	@ (8005340 <HAL_RCC_OscConfig+0x4c8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d118      	bne.n	8005174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005142:	4b7f      	ldr	r3, [pc, #508]	@ (8005340 <HAL_RCC_OscConfig+0x4c8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7e      	ldr	r2, [pc, #504]	@ (8005340 <HAL_RCC_OscConfig+0x4c8>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800514c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514e:	f7fc fa15 	bl	800157c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fc fa11 	bl	800157c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	@ 0x64
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e103      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005168:	4b75      	ldr	r3, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4c8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x312>
 800517c:	4b6f      	ldr	r3, [pc, #444]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4a6e      	ldr	r2, [pc, #440]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6213      	str	r3, [r2, #32]
 8005188:	e02d      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x334>
 8005192:	4b6a      	ldr	r3, [pc, #424]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4a69      	ldr	r2, [pc, #420]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6213      	str	r3, [r2, #32]
 800519e:	4b67      	ldr	r3, [pc, #412]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a66      	ldr	r2, [pc, #408]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6213      	str	r3, [r2, #32]
 80051aa:	e01c      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d10c      	bne.n	80051ce <HAL_RCC_OscConfig+0x356>
 80051b4:	4b61      	ldr	r3, [pc, #388]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4a60      	ldr	r2, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	6213      	str	r3, [r2, #32]
 80051c0:	4b5e      	ldr	r3, [pc, #376]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6213      	str	r3, [r2, #32]
 80051cc:	e00b      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 80051ce:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6213      	str	r3, [r2, #32]
 80051da:	4b58      	ldr	r3, [pc, #352]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4a57      	ldr	r2, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ee:	f7fc f9c5 	bl	800157c <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fc f9c1 	bl	800157c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0b1      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ee      	beq.n	80051f6 <HAL_RCC_OscConfig+0x37e>
 8005218:	e014      	b.n	8005244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7fc f9af 	bl	800157c <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fc f9ab 	bl	800157c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e09b      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ee      	bne.n	8005222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b3c      	ldr	r3, [pc, #240]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8087 	beq.w	800536e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005260:	4b36      	ldr	r3, [pc, #216]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d061      	beq.n	8005330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d146      	bne.n	8005302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <HAL_RCC_OscConfig+0x4cc>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc f97f 	bl	800157c <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc f97b 	bl	800157c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e06d      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005294:	4b29      	ldr	r3, [pc, #164]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a8:	d108      	bne.n	80052bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052aa:	4b24      	ldr	r3, [pc, #144]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4921      	ldr	r1, [pc, #132]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052bc:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a19      	ldr	r1, [r3, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	430b      	orrs	r3, r1
 80052ce:	491b      	ldr	r1, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_RCC_OscConfig+0x4cc>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fc f94f 	bl	800157c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fc f94b 	bl	800157c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x46a>
 8005300:	e035      	b.n	800536e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <HAL_RCC_OscConfig+0x4cc>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fc f938 	bl	800157c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fc f934 	bl	800157c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e026      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCC_OscConfig+0x4c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x498>
 800532e:	e01e      	b.n	800536e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e019      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
 800533c:	40021000 	.word	0x40021000
 8005340:	40007000 	.word	0x40007000
 8005344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_OscConfig+0x500>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	429a      	cmp	r2, r3
 800535a:	d106      	bne.n	800536a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d001      	beq.n	800536e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40021000 	.word	0x40021000

0800537c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0d0      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b67      	ldr	r3, [pc, #412]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	4965      	ldr	r1, [pc, #404]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b63      	ldr	r3, [pc, #396]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0b8      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d8:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a58      	ldr	r2, [pc, #352]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f0:	4b53      	ldr	r3, [pc, #332]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a52      	ldr	r2, [pc, #328]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80053fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053fc:	4b50      	ldr	r3, [pc, #320]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	494d      	ldr	r1, [pc, #308]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d040      	beq.n	800549c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b47      	ldr	r3, [pc, #284]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d115      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e07f      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b41      	ldr	r3, [pc, #260]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e073      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544a:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e06b      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4936      	ldr	r1, [pc, #216]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	4313      	orrs	r3, r2
 800546a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800546c:	f7fc f886 	bl	800157c <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7fc f882 	bl	800157c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e053      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 020c 	and.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d1eb      	bne.n	8005474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b27      	ldr	r3, [pc, #156]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d210      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b24      	ldr	r3, [pc, #144]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 0207 	bic.w	r2, r3, #7
 80054b2:	4922      	ldr	r1, [pc, #136]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ba:	4b20      	ldr	r3, [pc, #128]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e032      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4916      	ldr	r1, [pc, #88]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054f6:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	490e      	ldr	r1, [pc, #56]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800550a:	f000 f821 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800550e:	4602      	mov	r2, r0
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	490a      	ldr	r1, [pc, #40]	@ (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	5ccb      	ldrb	r3, [r1, r3]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a09      	ldr	r2, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1cc>)
 8005524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005526:	4b09      	ldr	r3, [pc, #36]	@ (800554c <HAL_RCC_ClockConfig+0x1d0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fb ffe4 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40022000 	.word	0x40022000
 8005540:	40021000 	.word	0x40021000
 8005544:	08007a4c 	.word	0x08007a4c
 8005548:	20000004 	.word	0x20000004
 800554c:	20000008 	.word	0x20000008

08005550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800556a:	4b1e      	ldr	r3, [pc, #120]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b04      	cmp	r3, #4
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x30>
 800557a:	2b08      	cmp	r3, #8
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x36>
 800557e:	e027      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005582:	613b      	str	r3, [r7, #16]
      break;
 8005584:	e027      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	0c9b      	lsrs	r3, r3, #18
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
 8005592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800559e:	4b11      	ldr	r3, [pc, #68]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	0c5b      	lsrs	r3, r3, #17
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	4a11      	ldr	r2, [pc, #68]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055aa:	5cd3      	ldrb	r3, [r2, r3]
 80055ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a0d      	ldr	r2, [pc, #52]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80055b2:	fb03 f202 	mul.w	r2, r3, r2
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e004      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	613b      	str	r3, [r7, #16]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80055d2:	613b      	str	r3, [r7, #16]
      break;
 80055d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d6:	693b      	ldr	r3, [r7, #16]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	007a1200 	.word	0x007a1200
 80055ec:	08007a64 	.word	0x08007a64
 80055f0:	08007a74 	.word	0x08007a74
 80055f4:	003d0900 	.word	0x003d0900

080055f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055fc:	4b02      	ldr	r3, [pc, #8]	@ (8005608 <HAL_RCC_GetHCLKFreq+0x10>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	20000004 	.word	0x20000004

0800560c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005610:	f7ff fff2 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4903      	ldr	r1, [pc, #12]	@ (8005630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000
 8005630:	08007a5c 	.word	0x08007a5c

08005634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005638:	f7ff ffde 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	0adb      	lsrs	r3, r3, #11
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4903      	ldr	r1, [pc, #12]	@ (8005658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	08007a5c 	.word	0x08007a5c

0800565c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005664:	4b0a      	ldr	r3, [pc, #40]	@ (8005690 <RCC_Delay+0x34>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <RCC_Delay+0x38>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0a5b      	lsrs	r3, r3, #9
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005678:	bf00      	nop
  }
  while (Delay --);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f9      	bne.n	8005678 <RCC_Delay+0x1c>
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	20000004 	.word	0x20000004
 8005694:	10624dd3 	.word	0x10624dd3

08005698 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d07d      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056b4:	2300      	movs	r3, #0
 80056b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b8:	4b4f      	ldr	r3, [pc, #316]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c4:	4b4c      	ldr	r3, [pc, #304]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4a4b      	ldr	r2, [pc, #300]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	61d3      	str	r3, [r2, #28]
 80056d0:	4b49      	ldr	r3, [pc, #292]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e0:	4b46      	ldr	r3, [pc, #280]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d118      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ec:	4b43      	ldr	r3, [pc, #268]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a42      	ldr	r2, [pc, #264]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f8:	f7fb ff40 	bl	800157c <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fb ff3c 	bl	800157c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	@ 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e06d      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b3a      	ldr	r3, [pc, #232]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b36      	ldr	r3, [pc, #216]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005726:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02e      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d027      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b2e      	ldr	r3, [pc, #184]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b2e      	ldr	r3, [pc, #184]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800574c:	4b2c      	ldr	r3, [pc, #176]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005752:	4a29      	ldr	r2, [pc, #164]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005762:	f7fb ff0b 	bl	800157c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fb ff07 	bl	800157c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e036      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ee      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578c:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4917      	ldr	r1, [pc, #92]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	4313      	orrs	r3, r2
 800579c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b14      	ldr	r3, [pc, #80]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057bc:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	490b      	ldr	r1, [pc, #44]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057da:	4b07      	ldr	r3, [pc, #28]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4904      	ldr	r1, [pc, #16]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40007000 	.word	0x40007000
 8005800:	42420440 	.word	0x42420440

08005804 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b10      	cmp	r3, #16
 800582a:	f200 808a 	bhi.w	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d045      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d075      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800583a:	e082      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800583c:	4b46      	ldr	r3, [pc, #280]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005842:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d07b      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	0c9b      	lsrs	r3, r3, #18
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a41      	ldr	r2, [pc, #260]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d015      	beq.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005866:	4b3c      	ldr	r3, [pc, #240]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	0c5b      	lsrs	r3, r3, #17
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	4a3b      	ldr	r2, [pc, #236]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005880:	4a38      	ldr	r2, [pc, #224]	@ (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	fbb2 f2f3 	udiv	r2, r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e004      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4a34      	ldr	r2, [pc, #208]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800589c:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a8:	d102      	bne.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	61bb      	str	r3, [r7, #24]
      break;
 80058ae:	e04a      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4a2d      	ldr	r2, [pc, #180]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	085b      	lsrs	r3, r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
      break;
 80058be:	e042      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80058c0:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d0:	d108      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80058dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e01f      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ee:	d109      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80058f0:	4b19      	ldr	r3, [pc, #100]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80058fc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e00f      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800590a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800590e:	d11c      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005910:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800591c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005920:	61bb      	str	r3, [r7, #24]
      break;
 8005922:	e012      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005924:	e011      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005926:	f7ff fe85 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 800592a:	4602      	mov	r2, r0
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	0b9b      	lsrs	r3, r3, #14
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	3301      	adds	r3, #1
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	61bb      	str	r3, [r7, #24]
      break;
 8005940:	e004      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800594a:	bf00      	nop
    }
  }
  return (frequency);
 800594c:	69bb      	ldr	r3, [r7, #24]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000
 800595c:	08007a78 	.word	0x08007a78
 8005960:	08007a88 	.word	0x08007a88
 8005964:	007a1200 	.word	0x007a1200
 8005968:	003d0900 	.word	0x003d0900
 800596c:	aaaaaaab 	.word	0xaaaaaaab

08005970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e076      	b.n	8005a70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005992:	d009      	beq.n	80059a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
 800599a:	e005      	b.n	80059a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fb38 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2c:	ea42 0103 	orr.w	r1, r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	0c1a      	lsrs	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f002 0204 	and.w	r2, r2, #4
 8005a4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	@ 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a86:	2301      	movs	r3, #1
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a8a:	f7fb fd77 	bl	800157c <HAL_GetTick>
 8005a8e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a96:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x4a>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aae:	d106      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x46>
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d001      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e17f      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x5c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x5c>
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e174      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x6e>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e16d      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d003      	beq.n	8005b02 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2205      	movs	r2, #5
 8005afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	887a      	ldrh	r2, [r7, #2]
 8005b24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	887a      	ldrh	r2, [r7, #2]
 8005b2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b40      	cmp	r3, #64	@ 0x40
 8005b44:	d007      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b5e:	d17e      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_SPI_TransmitReceive+0xf6>
 8005b68:	8afb      	ldrh	r3, [r7, #22]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d16c      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	881a      	ldrh	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	1c9a      	adds	r2, r3, #2
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b92:	e059      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d11b      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x162>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d016      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x162>
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d113      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	1c9a      	adds	r2, r3, #2
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d119      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x1a4>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d014      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c1c:	f7fb fcae 	bl	800157c <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d80d      	bhi.n	8005c48 <HAL_SPI_TransmitReceive+0x1d0>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d009      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e0bc      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1a0      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x11c>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d19b      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x11c>
 8005c5c:	e082      	b.n	8005d64 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_SPI_TransmitReceive+0x1f4>
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d171      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c92:	e05d      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d11c      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x264>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d017      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x264>
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d114      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d119      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x2a6>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d014      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d1e:	f7fb fc2d 	bl	800157c <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d803      	bhi.n	8005d36 <HAL_SPI_TransmitReceive+0x2be>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x2c4>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e038      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d19c      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x21c>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d197      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f9bb 	bl	80060e4 <SPI_EndRxTxTransaction>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01d      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3728      	adds	r7, #40	@ 0x28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10f      	bne.n	8005e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    return;
 8005e0e:	e0be      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_SPI_IRQHandler+0x66>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
    return;
 8005e30:	e0ad      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_SPI_IRQHandler+0x80>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80a1 	beq.w	8005f8e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 809a 	beq.w	8005f8e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	099b      	lsrs	r3, r3, #6
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d023      	beq.n	8005eae <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d011      	beq.n	8005e96 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	f043 0204 	orr.w	r2, r3, #4
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	e00b      	b.n	8005eae <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	693b      	ldr	r3, [r7, #16]
        return;
 8005eac:	e06f      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	f043 0201 	orr.w	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d04f      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005efa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_SPI_IRQHandler+0x14c>
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d034      	beq.n	8005f82 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0203 	bic.w	r2, r2, #3
 8005f26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d011      	beq.n	8005f54 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f34:	4a17      	ldr	r2, [pc, #92]	@ (8005f94 <HAL_SPI_IRQHandler+0x1c8>)
 8005f36:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fc fa9d 	bl	800247c <HAL_DMA_Abort_IT>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <HAL_SPI_IRQHandler+0x1c8>)
 8005f62:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fc fa87 	bl	800247c <HAL_DMA_Abort_IT>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f80:	e003      	b.n	8005f8a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f808 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f88:	e000      	b.n	8005f8c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005f8a:	bf00      	nop
    return;
 8005f8c:	bf00      	nop
  }
}
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	08005fab 	.word	0x08005fab

08005f98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff ffe7 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fe4:	f7fb faca 	bl	800157c <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ff4:	f7fb fac2 	bl	800157c <HAL_GetTick>
 8005ff8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ffa:	4b39      	ldr	r3, [pc, #228]	@ (80060e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	015b      	lsls	r3, r3, #5
 8006000:	0d1b      	lsrs	r3, r3, #20
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800600a:	e054      	b.n	80060b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d050      	beq.n	80060b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006014:	f7fb fab2 	bl	800157c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	429a      	cmp	r2, r3
 8006022:	d902      	bls.n	800602a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d13d      	bne.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006042:	d111      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604c:	d004      	beq.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006056:	d107      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006070:	d10f      	bne.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e017      	b.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4013      	ands	r3, r2
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	bf0c      	ite	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	2300      	movne	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d19b      	bne.n	800600c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000004 	.word	0x20000004

080060e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2201      	movs	r2, #1
 80060f8:	2102      	movs	r1, #2
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff ff6a 	bl	8005fd4 <SPI_WaitFlagStateUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e013      	b.n	800613e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	2180      	movs	r1, #128	@ 0x80
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ff57 	bl	8005fd4 <SPI_WaitFlagStateUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e000      	b.n	800613e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e042      	b.n	80061de <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fb f933 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2224      	movs	r2, #36	@ 0x24
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006188:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fd62 	bl	8006c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800619e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b08a      	sub	sp, #40	@ 0x28
 80061ea:	af02      	add	r7, sp, #8
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b20      	cmp	r3, #32
 8006204:	d175      	bne.n	80062f2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_UART_Transmit+0x2c>
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06e      	b.n	80062f4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2221      	movs	r2, #33	@ 0x21
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006224:	f7fb f9aa 	bl	800157c <HAL_GetTick>
 8006228:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623e:	d108      	bne.n	8006252 <HAL_UART_Transmit+0x6c>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	e003      	b.n	800625a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800625a:	e02e      	b.n	80062ba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	2180      	movs	r1, #128	@ 0x80
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fb00 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e03a      	b.n	80062f4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006292:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3302      	adds	r3, #2
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e007      	b.n	80062ac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	781a      	ldrb	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1cb      	bne.n	800625c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2200      	movs	r2, #0
 80062cc:	2140      	movs	r1, #64	@ 0x40
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 facc 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e006      	b.n	80062f4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e000      	b.n	80062f4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80062f2:	2302      	movs	r3, #2
  }
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800633a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <HAL_UART_IRQHandler+0x66>
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fbbc 	bl	8006ad8 <UART_Receive_IT>
      return;
 8006360:	e25b      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80de 	beq.w	8006528 <HAL_UART_IRQHandler+0x22c>
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80d1 	beq.w	8006528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <HAL_UART_IRQHandler+0xae>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a2:	f043 0201 	orr.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_UART_IRQHandler+0xd2>
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f043 0202 	orr.w	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_UART_IRQHandler+0xf6>
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f043 0204 	orr.w	r2, r3, #4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d011      	beq.n	8006422 <HAL_UART_IRQHandler+0x126>
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800640a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f043 0208 	orr.w	r2, r3, #8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 81f2 	beq.w	8006810 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_UART_IRQHandler+0x14e>
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fb47 	bl	8006ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <HAL_UART_IRQHandler+0x17a>
 800646e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d04f      	beq.n	8006516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa51 	bl	800691e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d041      	beq.n	800650e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1d9      	bne.n	800648a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d013      	beq.n	8006506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e2:	4a7e      	ldr	r2, [pc, #504]	@ (80066dc <HAL_UART_IRQHandler+0x3e0>)
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fb ffc6 	bl	800247c <HAL_DMA_Abort_IT>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d016      	beq.n	8006524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e00e      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f99c 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	e00a      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f998 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	e006      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f994 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006522:	e175      	b.n	8006810 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	bf00      	nop
    return;
 8006526:	e173      	b.n	8006810 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	2b01      	cmp	r3, #1
 800652e:	f040 814f 	bne.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8148 	beq.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8141 	beq.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80b6 	beq.w	80066e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8145 	beq.w	8006814 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800658e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006592:	429a      	cmp	r2, r3
 8006594:	f080 813e 	bcs.w	8006814 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800659e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	f000 8088 	beq.w	80066bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1d9      	bne.n	80065ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800661c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006620:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006624:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800662e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e1      	bne.n	80065f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006658:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800665a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800665e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e3      	bne.n	8006634 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800668a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800668c:	f023 0310 	bic.w	r3, r3, #16
 8006690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800669e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e3      	bne.n	800667a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fb fea4 	bl	8002404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8bf 	bl	8006856 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066d8:	e09c      	b.n	8006814 <HAL_UART_IRQHandler+0x518>
 80066da:	bf00      	nop
 80066dc:	080069e3 	.word	0x080069e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 808e 	beq.w	8006818 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8089 	beq.w	8006818 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800672a:	647a      	str	r2, [r7, #68]	@ 0x44
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	623b      	str	r3, [r7, #32]
   return(result);
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006762:	633a      	str	r2, [r7, #48]	@ 0x30
 8006764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e3      	bne.n	800673e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60fb      	str	r3, [r7, #12]
   return(result);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067a8:	61fa      	str	r2, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	617b      	str	r3, [r7, #20]
   return(result);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e3      	bne.n	8006784 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f844 	bl	8006856 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ce:	e023      	b.n	8006818 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_UART_IRQHandler+0x4f4>
 80067dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f90e 	bl	8006a0a <UART_Transmit_IT>
    return;
 80067ee:	e014      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <HAL_UART_IRQHandler+0x51e>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f94d 	bl	8006aa8 <UART_EndTransmit_IT>
    return;
 800680e:	e004      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
    return;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
      return;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
      return;
 8006818:	bf00      	nop
  }
}
 800681a:	37e8      	adds	r7, #232	@ 0xe8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687c:	e03b      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d037      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fa fe79 	bl	800157c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <UART_WaitOnFlagUntilTimeout+0x30>
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e03a      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d023      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b80      	cmp	r3, #128	@ 0x80
 80068b2:	d020      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d01d      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d116      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f81d 	bl	800691e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2208      	movs	r2, #8
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e00f      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4013      	ands	r3, r2
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	429a      	cmp	r2, r3
 8006912:	d0b4      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800691e:	b480      	push	{r7}
 8006920:	b095      	sub	sp, #84	@ 0x54
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800693c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006946:	643a      	str	r2, [r7, #64]	@ 0x40
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800694c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	61fb      	str	r3, [r7, #28]
   return(result);
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800697a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800697c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	2b01      	cmp	r3, #1
 8006994:	d119      	bne.n	80069ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b6:	61ba      	str	r2, [r7, #24]
 80069b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069d8:	bf00      	nop
 80069da:	3754      	adds	r7, #84	@ 0x54
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ff21 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b21      	cmp	r3, #33	@ 0x21
 8006a1c:	d13e      	bne.n	8006a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d114      	bne.n	8006a52 <UART_Transmit_IT+0x48>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d110      	bne.n	8006a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]
 8006a50:	e008      	b.n	8006a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6211      	str	r1, [r2, #32]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4619      	mov	r1, r3
 8006a72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fea9 	bl	8006820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	@ 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b22      	cmp	r3, #34	@ 0x22
 8006aea:	f040 80ae 	bne.w	8006c4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af6:	d117      	bne.n	8006b28 <UART_Receive_IT+0x50>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d113      	bne.n	8006b28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b26:	e026      	b.n	8006b76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3a:	d007      	beq.n	8006b4c <UART_Receive_IT+0x74>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <UART_Receive_IT+0x82>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e008      	b.n	8006b6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d15d      	bne.n	8006c46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0220 	bic.w	r2, r2, #32
 8006b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d135      	bne.n	8006c3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f023 0310 	bic.w	r3, r3, #16
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf6:	623a      	str	r2, [r7, #32]
 8006bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d10a      	bne.n	8006c2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fe0e 	bl	8006856 <HAL_UARTEx_RxEventCallback>
 8006c3a:	e002      	b.n	8006c42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fdf8 	bl	8006832 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e002      	b.n	8006c4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3730      	adds	r7, #48	@ 0x30
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006c8e:	f023 030c 	bic.w	r3, r3, #12
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <UART_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe fcba 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	e002      	b.n	8006cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fe fca2 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8006cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009a      	lsls	r2, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	4a22      	ldr	r2, [pc, #136]	@ (8006d6c <UART_SetConfig+0x118>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	0119      	lsls	r1, r3, #4
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009a      	lsls	r2, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d00:	4b1a      	ldr	r3, [pc, #104]	@ (8006d6c <UART_SetConfig+0x118>)
 8006d02:	fba3 0302 	umull	r0, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2064      	movs	r0, #100	@ 0x64
 8006d0a:	fb00 f303 	mul.w	r3, r0, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	3332      	adds	r3, #50	@ 0x32
 8006d14:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <UART_SetConfig+0x118>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d20:	4419      	add	r1, r3
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009a      	lsls	r2, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d38:	4b0c      	ldr	r3, [pc, #48]	@ (8006d6c <UART_SetConfig+0x118>)
 8006d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	2064      	movs	r0, #100	@ 0x64
 8006d42:	fb00 f303 	mul.w	r3, r0, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	3332      	adds	r3, #50	@ 0x32
 8006d4c:	4a07      	ldr	r2, [pc, #28]	@ (8006d6c <UART_SetConfig+0x118>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	f003 020f 	and.w	r2, r3, #15
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40013800 	.word	0x40013800
 8006d6c:	51eb851f 	.word	0x51eb851f

08006d70 <OLED_Init>:
  * @function: void OLED_Init(void)
  * @description: OLED初始化
  * @return {*}
  */
 void OLED_Init(void)
 {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0

     uint8_t i = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	71fb      	strb	r3, [r7, #7]
     for(i=0; i<23; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	71fb      	strb	r3, [r7, #7]
 8006d7e:	e008      	b.n	8006d92 <OLED_Init+0x22>
     {
         Oled_WriteCommand(init_cmds[i]);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	4a08      	ldr	r2, [pc, #32]	@ (8006da4 <OLED_Init+0x34>)
 8006d84:	5cd3      	ldrb	r3, [r2, r3]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f80e 	bl	8006da8 <Oled_WriteCommand>
     for(i=0; i<23; i++)
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	71fb      	strb	r3, [r7, #7]
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	2b16      	cmp	r3, #22
 8006d96:	d9f3      	bls.n	8006d80 <OLED_Init+0x10>
     }
     OLED_Clear();
 8006d98:	f000 f82c 	bl	8006df4 <OLED_Clear>
 }
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000010 	.word	0x20000010

08006da8 <Oled_WriteCommand>:
  * @description: 向设备写控制命令
  * @param {uint8_t} cmd 芯片手册规定的命令
  * @return {*}
  */
 void Oled_WriteCommand(uint8_t cmd)
 {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteCommand(&hi2c1, OLED_I2C_ADDRESS, OLED_CMD, cmd);
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2200      	movs	r2, #0
 8006db6:	213c      	movs	r1, #60	@ 0x3c
 8006db8:	4803      	ldr	r0, [pc, #12]	@ (8006dc8 <Oled_WriteCommand+0x20>)
 8006dba:	f7f9 fc71 	bl	80006a0 <HAL_I2C_WriteCommand>
 }
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000108 	.word	0x20000108

08006dcc <Oled_WriteData>:
  * @description: 向设备写控制数据
  * @param {uint8_t} data 数据
  * @return {*}
  */
 void Oled_WriteData(uint8_t data)
 {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteData(&hi2c1 ,OLED_I2C_ADDRESS,OLED_DATA,&data,1);
 8006dd6:	1dfb      	adds	r3, r7, #7
 8006dd8:	2201      	movs	r2, #1
 8006dda:	9200      	str	r2, [sp, #0]
 8006ddc:	2240      	movs	r2, #64	@ 0x40
 8006dde:	213c      	movs	r1, #60	@ 0x3c
 8006de0:	4803      	ldr	r0, [pc, #12]	@ (8006df0 <Oled_WriteData+0x24>)
 8006de2:	f7f9 fc81 	bl	80006e8 <HAL_I2C_WriteData>
 }
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000108 	.word	0x20000108

08006df4 <OLED_Clear>:
  * @function: OLED_Clear(void)
  * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
  * @return {*}
  */
 void OLED_Clear(void)
 {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
     uint8_t i,n;
     for(i=0;i<8;i++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	e01e      	b.n	8006e3e <OLED_Clear+0x4a>
     {
         Oled_WriteCommand (0xb0+i);    //设置页地址（0~7）
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	3b50      	subs	r3, #80	@ 0x50
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff ffce 	bl	8006da8 <Oled_WriteCommand>
         Oled_WriteCommand(0x00);      //设置显示位置—列低地址
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f7ff ffcb 	bl	8006da8 <Oled_WriteCommand>
         Oled_WriteCommand(0x10);      //设置显示位置—列高地址
 8006e12:	2010      	movs	r0, #16
 8006e14:	f7ff ffc8 	bl	8006da8 <Oled_WriteCommand>
         Oled_WriteCommand(0x2e);
 8006e18:	202e      	movs	r0, #46	@ 0x2e
 8006e1a:	f7ff ffc5 	bl	8006da8 <Oled_WriteCommand>
         for(n=0;n<128;n++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	71bb      	strb	r3, [r7, #6]
 8006e22:	e005      	b.n	8006e30 <OLED_Clear+0x3c>
             Oled_WriteData(0);
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7ff ffd1 	bl	8006dcc <Oled_WriteData>
         for(n=0;n<128;n++)
 8006e2a:	79bb      	ldrb	r3, [r7, #6]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	71bb      	strb	r3, [r7, #6]
 8006e30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	daf5      	bge.n	8006e24 <OLED_Clear+0x30>
     for(i=0;i<8;i++)
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	71fb      	strb	r3, [r7, #7]
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	d9dd      	bls.n	8006e00 <OLED_Clear+0xc>
     }
 }
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <OLED_Set_Pos>:
  * @description: 坐标设置
  * @param {uint8_t} x,y
  * @return {*}
  */
 void OLED_Set_Pos(uint8_t x, uint8_t y)
 {
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4603      	mov	r3, r0
 8006e56:	460a      	mov	r2, r1
 8006e58:	71fb      	strb	r3, [r7, #7]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71bb      	strb	r3, [r7, #6]
     Oled_WriteCommand(0xb0+y);    //设置页地址（0~7）
 8006e5e:	79bb      	ldrb	r3, [r7, #6]
 8006e60:	3b50      	subs	r3, #80	@ 0x50
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff9f 	bl	8006da8 <Oled_WriteCommand>
     Oled_WriteCommand(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f043 0310 	orr.w	r3, r3, #16
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff96 	bl	8006da8 <Oled_WriteCommand>
     Oled_WriteCommand(x&0x0f);    //设置显示位置—列低地址
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff8f 	bl	8006da8 <Oled_WriteCommand>
 }
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <OLED_ShowChar>:
  * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
 {
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	71fb      	strb	r3, [r7, #7]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	71bb      	strb	r3, [r7, #6]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	717b      	strb	r3, [r7, #5]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	713b      	strb	r3, [r7, #4]
     unsigned char c=0,i=0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73bb      	strb	r3, [r7, #14]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
         c=chr-' ';//得到偏移后的值
 8006eba:	797b      	ldrb	r3, [r7, #5]
 8006ebc:	3b20      	subs	r3, #32
 8006ebe:	73bb      	strb	r3, [r7, #14]
         if(x>128-1){x=0;y=y+2;}
 8006ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da04      	bge.n	8006ed2 <OLED_ShowChar+0x3e>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	79bb      	ldrb	r3, [r7, #6]
 8006ece:	3302      	adds	r3, #2
 8006ed0:	71bb      	strb	r3, [r7, #6]
         if(Char_Size ==16)
 8006ed2:	793b      	ldrb	r3, [r7, #4]
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d154      	bne.n	8006f82 <OLED_ShowChar+0xee>
         {
             OLED_Set_Pos(x,y);
 8006ed8:	79ba      	ldrb	r2, [r7, #6]
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ffb5 	bl	8006e4e <OLED_Set_Pos>
             for(i=0;i<8;i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	e01b      	b.n	8006f22 <OLED_ShowChar+0x8e>
                 {
                   if(Color_Turn)
 8006eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <OLED_ShowChar+0x76>
                       Oled_WriteData(~F8X16[c*16+i]);
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	011a      	lsls	r2, r3, #4
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	4413      	add	r3, r2
 8006efa:	4a3c      	ldr	r2, [pc, #240]	@ (8006fec <OLED_ShowChar+0x158>)
 8006efc:	5cd3      	ldrb	r3, [r2, r3]
 8006efe:	43db      	mvns	r3, r3
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff ff62 	bl	8006dcc <Oled_WriteData>
 8006f08:	e008      	b.n	8006f1c <OLED_ShowChar+0x88>
                   else
                       Oled_WriteData(F8X16[c*16+i]);
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	4413      	add	r3, r2
 8006f12:	4a36      	ldr	r2, [pc, #216]	@ (8006fec <OLED_ShowChar+0x158>)
 8006f14:	5cd3      	ldrb	r3, [r2, r3]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff58 	bl	8006dcc <Oled_WriteData>
             for(i=0;i<8;i++)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b07      	cmp	r3, #7
 8006f26:	d9e0      	bls.n	8006eea <OLED_ShowChar+0x56>
                 }
             OLED_Set_Pos(x,y+1);
 8006f28:	79bb      	ldrb	r3, [r7, #6]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff ff8b 	bl	8006e4e <OLED_Set_Pos>
             for(i=0;i<8;i++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	e01d      	b.n	8006f7a <OLED_ShowChar+0xe6>
                 {
                   if(Color_Turn)
 8006f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <OLED_ShowChar+0xcc>
                       Oled_WriteData(~F8X16[c*16+i+8]);
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	011a      	lsls	r2, r3, #4
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3308      	adds	r3, #8
 8006f50:	4a26      	ldr	r2, [pc, #152]	@ (8006fec <OLED_ShowChar+0x158>)
 8006f52:	5cd3      	ldrb	r3, [r2, r3]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff37 	bl	8006dcc <Oled_WriteData>
 8006f5e:	e009      	b.n	8006f74 <OLED_ShowChar+0xe0>
                   else
                       Oled_WriteData(F8X16[c*16+i+8]);
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	011a      	lsls	r2, r3, #4
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	4413      	add	r3, r2
 8006f68:	3308      	adds	r3, #8
 8006f6a:	4a20      	ldr	r2, [pc, #128]	@ (8006fec <OLED_ShowChar+0x158>)
 8006f6c:	5cd3      	ldrb	r3, [r2, r3]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff ff2c 	bl	8006dcc <Oled_WriteData>
             for(i=0;i<8;i++)
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	3301      	adds	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b07      	cmp	r3, #7
 8006f7e:	d9de      	bls.n	8006f3e <OLED_ShowChar+0xaa>
                       Oled_WriteData(~F6x8[c][i]);
                   else
                       Oled_WriteData(F6x8[c][i]);
                 }
           }
 }
 8006f80:	e02f      	b.n	8006fe2 <OLED_ShowChar+0x14e>
                 OLED_Set_Pos(x,y);
 8006f82:	79ba      	ldrb	r2, [r7, #6]
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff60 	bl	8006e4e <OLED_Set_Pos>
                 for(i=0;i<6;i++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
 8006f92:	e023      	b.n	8006fdc <OLED_ShowChar+0x148>
                   if(Color_Turn)
 8006f94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00f      	beq.n	8006fbc <OLED_ShowChar+0x128>
                       Oled_WriteData(~F6x8[c][i]);
 8006f9c:	7bba      	ldrb	r2, [r7, #14]
 8006f9e:	7bf9      	ldrb	r1, [r7, #15]
 8006fa0:	4813      	ldr	r0, [pc, #76]	@ (8006ff0 <OLED_ShowChar+0x15c>)
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4403      	add	r3, r0
 8006fac:	440b      	add	r3, r1
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff09 	bl	8006dcc <Oled_WriteData>
 8006fba:	e00c      	b.n	8006fd6 <OLED_ShowChar+0x142>
                       Oled_WriteData(F6x8[c][i]);
 8006fbc:	7bba      	ldrb	r2, [r7, #14]
 8006fbe:	7bf9      	ldrb	r1, [r7, #15]
 8006fc0:	480b      	ldr	r0, [pc, #44]	@ (8006ff0 <OLED_ShowChar+0x15c>)
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4403      	add	r3, r0
 8006fcc:	440b      	add	r3, r1
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff fefb 	bl	8006dcc <Oled_WriteData>
                 for(i=0;i<6;i++)
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d9d8      	bls.n	8006f94 <OLED_ShowChar+0x100>
 }
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd90      	pop	{r4, r7, pc}
 8006fea:	bf00      	nop
 8006fec:	08007cb4 	.word	0x08007cb4
 8006ff0:	08007a8c 	.word	0x08007a8c

08006ff4 <OLED_ShowString>:
  * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
 {
 8006ff4:	b590      	push	{r4, r7, lr}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	603a      	str	r2, [r7, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
 8007002:	460b      	mov	r3, r1
 8007004:	71bb      	strb	r3, [r7, #6]
 8007006:	4613      	mov	r3, r2
 8007008:	717b      	strb	r3, [r7, #5]
     uint8_t  j=0;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800700e:	e02f      	b.n	8007070 <OLED_ShowString+0x7c>
     {       OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4413      	add	r3, r2
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	797c      	ldrb	r4, [r7, #5]
 800701a:	79b9      	ldrb	r1, [r7, #6]
 800701c:	79f8      	ldrb	r0, [r7, #7]
 800701e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4623      	mov	r3, r4
 8007026:	f7ff ff35 	bl	8006e94 <OLED_ShowChar>
             if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 800702a:	797b      	ldrb	r3, [r7, #5]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d103      	bne.n	8007038 <OLED_ShowString+0x44>
                 x += 6;
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	3306      	adds	r3, #6
 8007034:	71fb      	strb	r3, [r7, #7]
 8007036:	e002      	b.n	800703e <OLED_ShowString+0x4a>
             else  //8X16的字体列加8，显示下一个字符
                 x += 8;
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	3308      	adds	r3, #8
 800703c:	71fb      	strb	r3, [r7, #7]

             if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	2b7a      	cmp	r3, #122	@ 0x7a
 8007042:	d907      	bls.n	8007054 <OLED_ShowString+0x60>
 8007044:	797b      	ldrb	r3, [r7, #5]
 8007046:	2b0c      	cmp	r3, #12
 8007048:	d104      	bne.n	8007054 <OLED_ShowString+0x60>
             {
                 x = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	71fb      	strb	r3, [r7, #7]
                 y++;
 800704e:	79bb      	ldrb	r3, [r7, #6]
 8007050:	3301      	adds	r3, #1
 8007052:	71bb      	strb	r3, [r7, #6]
             }
             if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b78      	cmp	r3, #120	@ 0x78
 8007058:	d907      	bls.n	800706a <OLED_ShowString+0x76>
 800705a:	797b      	ldrb	r3, [r7, #5]
 800705c:	2b10      	cmp	r3, #16
 800705e:	d104      	bne.n	800706a <OLED_ShowString+0x76>
             {
                 x = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	71fb      	strb	r3, [r7, #7]
                 y++;
 8007064:	79bb      	ldrb	r3, [r7, #6]
 8007066:	3301      	adds	r3, #1
 8007068:	71bb      	strb	r3, [r7, #6]
             }
             j++;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	3301      	adds	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4413      	add	r3, r2
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1c9      	bne.n	8007010 <OLED_ShowString+0x1c>
     }
 }
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bd90      	pop	{r4, r7, pc}
	...

08007088 <siprintf>:
 8007088:	b40e      	push	{r1, r2, r3}
 800708a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800708e:	b510      	push	{r4, lr}
 8007090:	2400      	movs	r4, #0
 8007092:	b09d      	sub	sp, #116	@ 0x74
 8007094:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007096:	9002      	str	r0, [sp, #8]
 8007098:	9006      	str	r0, [sp, #24]
 800709a:	9107      	str	r1, [sp, #28]
 800709c:	9104      	str	r1, [sp, #16]
 800709e:	4809      	ldr	r0, [pc, #36]	@ (80070c4 <siprintf+0x3c>)
 80070a0:	4909      	ldr	r1, [pc, #36]	@ (80070c8 <siprintf+0x40>)
 80070a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a6:	9105      	str	r1, [sp, #20]
 80070a8:	6800      	ldr	r0, [r0, #0]
 80070aa:	a902      	add	r1, sp, #8
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80070b0:	f000 f992 	bl	80073d8 <_svfiprintf_r>
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	701c      	strb	r4, [r3, #0]
 80070b8:	b01d      	add	sp, #116	@ 0x74
 80070ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070be:	b003      	add	sp, #12
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000028 	.word	0x20000028
 80070c8:	ffff0208 	.word	0xffff0208

080070cc <memset>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	4402      	add	r2, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <__errno>:
 80070dc:	4b01      	ldr	r3, [pc, #4]	@ (80070e4 <__errno+0x8>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000028 	.word	0x20000028

080070e8 <__libc_init_array>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	2600      	movs	r6, #0
 80070ec:	4d0c      	ldr	r5, [pc, #48]	@ (8007120 <__libc_init_array+0x38>)
 80070ee:	4c0d      	ldr	r4, [pc, #52]	@ (8007124 <__libc_init_array+0x3c>)
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	d109      	bne.n	800710c <__libc_init_array+0x24>
 80070f8:	f000 fc76 	bl	80079e8 <_init>
 80070fc:	2600      	movs	r6, #0
 80070fe:	4d0a      	ldr	r5, [pc, #40]	@ (8007128 <__libc_init_array+0x40>)
 8007100:	4c0a      	ldr	r4, [pc, #40]	@ (800712c <__libc_init_array+0x44>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	42a6      	cmp	r6, r4
 8007108:	d105      	bne.n	8007116 <__libc_init_array+0x2e>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007110:	4798      	blx	r3
 8007112:	3601      	adds	r6, #1
 8007114:	e7ee      	b.n	80070f4 <__libc_init_array+0xc>
 8007116:	f855 3b04 	ldr.w	r3, [r5], #4
 800711a:	4798      	blx	r3
 800711c:	3601      	adds	r6, #1
 800711e:	e7f2      	b.n	8007106 <__libc_init_array+0x1e>
 8007120:	080082d0 	.word	0x080082d0
 8007124:	080082d0 	.word	0x080082d0
 8007128:	080082d0 	.word	0x080082d0
 800712c:	080082d4 	.word	0x080082d4

08007130 <__retarget_lock_acquire_recursive>:
 8007130:	4770      	bx	lr

08007132 <__retarget_lock_release_recursive>:
 8007132:	4770      	bx	lr

08007134 <_free_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4605      	mov	r5, r0
 8007138:	2900      	cmp	r1, #0
 800713a:	d040      	beq.n	80071be <_free_r+0x8a>
 800713c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007140:	1f0c      	subs	r4, r1, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	bfb8      	it	lt
 8007146:	18e4      	addlt	r4, r4, r3
 8007148:	f000 f8de 	bl	8007308 <__malloc_lock>
 800714c:	4a1c      	ldr	r2, [pc, #112]	@ (80071c0 <_free_r+0x8c>)
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	b933      	cbnz	r3, 8007160 <_free_r+0x2c>
 8007152:	6063      	str	r3, [r4, #4]
 8007154:	6014      	str	r4, [r2, #0]
 8007156:	4628      	mov	r0, r5
 8007158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800715c:	f000 b8da 	b.w	8007314 <__malloc_unlock>
 8007160:	42a3      	cmp	r3, r4
 8007162:	d908      	bls.n	8007176 <_free_r+0x42>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf01      	itttt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	1809      	addeq	r1, r1, r0
 8007172:	6021      	streq	r1, [r4, #0]
 8007174:	e7ed      	b.n	8007152 <_free_r+0x1e>
 8007176:	461a      	mov	r2, r3
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	b10b      	cbz	r3, 8007180 <_free_r+0x4c>
 800717c:	42a3      	cmp	r3, r4
 800717e:	d9fa      	bls.n	8007176 <_free_r+0x42>
 8007180:	6811      	ldr	r1, [r2, #0]
 8007182:	1850      	adds	r0, r2, r1
 8007184:	42a0      	cmp	r0, r4
 8007186:	d10b      	bne.n	80071a0 <_free_r+0x6c>
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	4401      	add	r1, r0
 800718c:	1850      	adds	r0, r2, r1
 800718e:	4283      	cmp	r3, r0
 8007190:	6011      	str	r1, [r2, #0]
 8007192:	d1e0      	bne.n	8007156 <_free_r+0x22>
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4408      	add	r0, r1
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	6053      	str	r3, [r2, #4]
 800719e:	e7da      	b.n	8007156 <_free_r+0x22>
 80071a0:	d902      	bls.n	80071a8 <_free_r+0x74>
 80071a2:	230c      	movs	r3, #12
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	e7d6      	b.n	8007156 <_free_r+0x22>
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	1821      	adds	r1, r4, r0
 80071ac:	428b      	cmp	r3, r1
 80071ae:	bf01      	itttt	eq
 80071b0:	6819      	ldreq	r1, [r3, #0]
 80071b2:	685b      	ldreq	r3, [r3, #4]
 80071b4:	1809      	addeq	r1, r1, r0
 80071b6:	6021      	streq	r1, [r4, #0]
 80071b8:	6063      	str	r3, [r4, #4]
 80071ba:	6054      	str	r4, [r2, #4]
 80071bc:	e7cb      	b.n	8007156 <_free_r+0x22>
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000530 	.word	0x20000530

080071c4 <sbrk_aligned>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007204 <sbrk_aligned+0x40>)
 80071c8:	460c      	mov	r4, r1
 80071ca:	6831      	ldr	r1, [r6, #0]
 80071cc:	4605      	mov	r5, r0
 80071ce:	b911      	cbnz	r1, 80071d6 <sbrk_aligned+0x12>
 80071d0:	f000 fba8 	bl	8007924 <_sbrk_r>
 80071d4:	6030      	str	r0, [r6, #0]
 80071d6:	4621      	mov	r1, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 fba3 	bl	8007924 <_sbrk_r>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d103      	bne.n	80071ea <sbrk_aligned+0x26>
 80071e2:	f04f 34ff 	mov.w	r4, #4294967295
 80071e6:	4620      	mov	r0, r4
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	1cc4      	adds	r4, r0, #3
 80071ec:	f024 0403 	bic.w	r4, r4, #3
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d0f8      	beq.n	80071e6 <sbrk_aligned+0x22>
 80071f4:	1a21      	subs	r1, r4, r0
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fb94 	bl	8007924 <_sbrk_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d1f2      	bne.n	80071e6 <sbrk_aligned+0x22>
 8007200:	e7ef      	b.n	80071e2 <sbrk_aligned+0x1e>
 8007202:	bf00      	nop
 8007204:	2000052c 	.word	0x2000052c

08007208 <_malloc_r>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	1ccd      	adds	r5, r1, #3
 800720e:	f025 0503 	bic.w	r5, r5, #3
 8007212:	3508      	adds	r5, #8
 8007214:	2d0c      	cmp	r5, #12
 8007216:	bf38      	it	cc
 8007218:	250c      	movcc	r5, #12
 800721a:	2d00      	cmp	r5, #0
 800721c:	4606      	mov	r6, r0
 800721e:	db01      	blt.n	8007224 <_malloc_r+0x1c>
 8007220:	42a9      	cmp	r1, r5
 8007222:	d904      	bls.n	800722e <_malloc_r+0x26>
 8007224:	230c      	movs	r3, #12
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	2000      	movs	r0, #0
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007304 <_malloc_r+0xfc>
 8007232:	f000 f869 	bl	8007308 <__malloc_lock>
 8007236:	f8d8 3000 	ldr.w	r3, [r8]
 800723a:	461c      	mov	r4, r3
 800723c:	bb44      	cbnz	r4, 8007290 <_malloc_r+0x88>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff ffbf 	bl	80071c4 <sbrk_aligned>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	4604      	mov	r4, r0
 800724a:	d158      	bne.n	80072fe <_malloc_r+0xf6>
 800724c:	f8d8 4000 	ldr.w	r4, [r8]
 8007250:	4627      	mov	r7, r4
 8007252:	2f00      	cmp	r7, #0
 8007254:	d143      	bne.n	80072de <_malloc_r+0xd6>
 8007256:	2c00      	cmp	r4, #0
 8007258:	d04b      	beq.n	80072f2 <_malloc_r+0xea>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	eb04 0903 	add.w	r9, r4, r3
 8007264:	f000 fb5e 	bl	8007924 <_sbrk_r>
 8007268:	4581      	cmp	r9, r0
 800726a:	d142      	bne.n	80072f2 <_malloc_r+0xea>
 800726c:	6821      	ldr	r1, [r4, #0]
 800726e:	4630      	mov	r0, r6
 8007270:	1a6d      	subs	r5, r5, r1
 8007272:	4629      	mov	r1, r5
 8007274:	f7ff ffa6 	bl	80071c4 <sbrk_aligned>
 8007278:	3001      	adds	r0, #1
 800727a:	d03a      	beq.n	80072f2 <_malloc_r+0xea>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	442b      	add	r3, r5
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	f8d8 3000 	ldr.w	r3, [r8]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	bb62      	cbnz	r2, 80072e4 <_malloc_r+0xdc>
 800728a:	f8c8 7000 	str.w	r7, [r8]
 800728e:	e00f      	b.n	80072b0 <_malloc_r+0xa8>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	d420      	bmi.n	80072d8 <_malloc_r+0xd0>
 8007296:	2a0b      	cmp	r2, #11
 8007298:	d917      	bls.n	80072ca <_malloc_r+0xc2>
 800729a:	1961      	adds	r1, r4, r5
 800729c:	42a3      	cmp	r3, r4
 800729e:	6025      	str	r5, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	6059      	strne	r1, [r3, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	bf08      	it	eq
 80072a8:	f8c8 1000 	streq.w	r1, [r8]
 80072ac:	5162      	str	r2, [r4, r5]
 80072ae:	604b      	str	r3, [r1, #4]
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f82f 	bl	8007314 <__malloc_unlock>
 80072b6:	f104 000b 	add.w	r0, r4, #11
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	f020 0007 	bic.w	r0, r0, #7
 80072c0:	1ac2      	subs	r2, r0, r3
 80072c2:	bf1c      	itt	ne
 80072c4:	1a1b      	subne	r3, r3, r0
 80072c6:	50a3      	strne	r3, [r4, r2]
 80072c8:	e7af      	b.n	800722a <_malloc_r+0x22>
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	bf0c      	ite	eq
 80072d0:	f8c8 2000 	streq.w	r2, [r8]
 80072d4:	605a      	strne	r2, [r3, #4]
 80072d6:	e7eb      	b.n	80072b0 <_malloc_r+0xa8>
 80072d8:	4623      	mov	r3, r4
 80072da:	6864      	ldr	r4, [r4, #4]
 80072dc:	e7ae      	b.n	800723c <_malloc_r+0x34>
 80072de:	463c      	mov	r4, r7
 80072e0:	687f      	ldr	r7, [r7, #4]
 80072e2:	e7b6      	b.n	8007252 <_malloc_r+0x4a>
 80072e4:	461a      	mov	r2, r3
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d1fb      	bne.n	80072e4 <_malloc_r+0xdc>
 80072ec:	2300      	movs	r3, #0
 80072ee:	6053      	str	r3, [r2, #4]
 80072f0:	e7de      	b.n	80072b0 <_malloc_r+0xa8>
 80072f2:	230c      	movs	r3, #12
 80072f4:	4630      	mov	r0, r6
 80072f6:	6033      	str	r3, [r6, #0]
 80072f8:	f000 f80c 	bl	8007314 <__malloc_unlock>
 80072fc:	e794      	b.n	8007228 <_malloc_r+0x20>
 80072fe:	6005      	str	r5, [r0, #0]
 8007300:	e7d6      	b.n	80072b0 <_malloc_r+0xa8>
 8007302:	bf00      	nop
 8007304:	20000530 	.word	0x20000530

08007308 <__malloc_lock>:
 8007308:	4801      	ldr	r0, [pc, #4]	@ (8007310 <__malloc_lock+0x8>)
 800730a:	f7ff bf11 	b.w	8007130 <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	20000528 	.word	0x20000528

08007314 <__malloc_unlock>:
 8007314:	4801      	ldr	r0, [pc, #4]	@ (800731c <__malloc_unlock+0x8>)
 8007316:	f7ff bf0c 	b.w	8007132 <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	20000528 	.word	0x20000528

08007320 <__ssputs_r>:
 8007320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	461f      	mov	r7, r3
 8007326:	688e      	ldr	r6, [r1, #8]
 8007328:	4682      	mov	sl, r0
 800732a:	42be      	cmp	r6, r7
 800732c:	460c      	mov	r4, r1
 800732e:	4690      	mov	r8, r2
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	d82d      	bhi.n	8007390 <__ssputs_r+0x70>
 8007334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800733c:	d026      	beq.n	800738c <__ssputs_r+0x6c>
 800733e:	6965      	ldr	r5, [r4, #20]
 8007340:	6909      	ldr	r1, [r1, #16]
 8007342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007346:	eba3 0901 	sub.w	r9, r3, r1
 800734a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800734e:	1c7b      	adds	r3, r7, #1
 8007350:	444b      	add	r3, r9
 8007352:	106d      	asrs	r5, r5, #1
 8007354:	429d      	cmp	r5, r3
 8007356:	bf38      	it	cc
 8007358:	461d      	movcc	r5, r3
 800735a:	0553      	lsls	r3, r2, #21
 800735c:	d527      	bpl.n	80073ae <__ssputs_r+0x8e>
 800735e:	4629      	mov	r1, r5
 8007360:	f7ff ff52 	bl	8007208 <_malloc_r>
 8007364:	4606      	mov	r6, r0
 8007366:	b360      	cbz	r0, 80073c2 <__ssputs_r+0xa2>
 8007368:	464a      	mov	r2, r9
 800736a:	6921      	ldr	r1, [r4, #16]
 800736c:	f000 faf8 	bl	8007960 <memcpy>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	6126      	str	r6, [r4, #16]
 800737e:	444e      	add	r6, r9
 8007380:	6026      	str	r6, [r4, #0]
 8007382:	463e      	mov	r6, r7
 8007384:	6165      	str	r5, [r4, #20]
 8007386:	eba5 0509 	sub.w	r5, r5, r9
 800738a:	60a5      	str	r5, [r4, #8]
 800738c:	42be      	cmp	r6, r7
 800738e:	d900      	bls.n	8007392 <__ssputs_r+0x72>
 8007390:	463e      	mov	r6, r7
 8007392:	4632      	mov	r2, r6
 8007394:	4641      	mov	r1, r8
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	f000 faaa 	bl	80078f0 <memmove>
 800739c:	2000      	movs	r0, #0
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	1b9b      	subs	r3, r3, r6
 80073a2:	60a3      	str	r3, [r4, #8]
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	4433      	add	r3, r6
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	462a      	mov	r2, r5
 80073b0:	f000 fae4 	bl	800797c <_realloc_r>
 80073b4:	4606      	mov	r6, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1e0      	bne.n	800737c <__ssputs_r+0x5c>
 80073ba:	4650      	mov	r0, sl
 80073bc:	6921      	ldr	r1, [r4, #16]
 80073be:	f7ff feb9 	bl	8007134 <_free_r>
 80073c2:	230c      	movs	r3, #12
 80073c4:	f8ca 3000 	str.w	r3, [sl]
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	e7e9      	b.n	80073aa <__ssputs_r+0x8a>
	...

080073d8 <_svfiprintf_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4698      	mov	r8, r3
 80073de:	898b      	ldrh	r3, [r1, #12]
 80073e0:	4607      	mov	r7, r0
 80073e2:	061b      	lsls	r3, r3, #24
 80073e4:	460d      	mov	r5, r1
 80073e6:	4614      	mov	r4, r2
 80073e8:	b09d      	sub	sp, #116	@ 0x74
 80073ea:	d510      	bpl.n	800740e <_svfiprintf_r+0x36>
 80073ec:	690b      	ldr	r3, [r1, #16]
 80073ee:	b973      	cbnz	r3, 800740e <_svfiprintf_r+0x36>
 80073f0:	2140      	movs	r1, #64	@ 0x40
 80073f2:	f7ff ff09 	bl	8007208 <_malloc_r>
 80073f6:	6028      	str	r0, [r5, #0]
 80073f8:	6128      	str	r0, [r5, #16]
 80073fa:	b930      	cbnz	r0, 800740a <_svfiprintf_r+0x32>
 80073fc:	230c      	movs	r3, #12
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b01d      	add	sp, #116	@ 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	2340      	movs	r3, #64	@ 0x40
 800740c:	616b      	str	r3, [r5, #20]
 800740e:	2300      	movs	r3, #0
 8007410:	9309      	str	r3, [sp, #36]	@ 0x24
 8007412:	2320      	movs	r3, #32
 8007414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007418:	2330      	movs	r3, #48	@ 0x30
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007422:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80075bc <_svfiprintf_r+0x1e4>
 8007426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800742a:	4623      	mov	r3, r4
 800742c:	469a      	mov	sl, r3
 800742e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007432:	b10a      	cbz	r2, 8007438 <_svfiprintf_r+0x60>
 8007434:	2a25      	cmp	r2, #37	@ 0x25
 8007436:	d1f9      	bne.n	800742c <_svfiprintf_r+0x54>
 8007438:	ebba 0b04 	subs.w	fp, sl, r4
 800743c:	d00b      	beq.n	8007456 <_svfiprintf_r+0x7e>
 800743e:	465b      	mov	r3, fp
 8007440:	4622      	mov	r2, r4
 8007442:	4629      	mov	r1, r5
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ff6b 	bl	8007320 <__ssputs_r>
 800744a:	3001      	adds	r0, #1
 800744c:	f000 80a7 	beq.w	800759e <_svfiprintf_r+0x1c6>
 8007450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007452:	445a      	add	r2, fp
 8007454:	9209      	str	r2, [sp, #36]	@ 0x24
 8007456:	f89a 3000 	ldrb.w	r3, [sl]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 809f 	beq.w	800759e <_svfiprintf_r+0x1c6>
 8007460:	2300      	movs	r3, #0
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800746a:	f10a 0a01 	add.w	sl, sl, #1
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007476:	931a      	str	r3, [sp, #104]	@ 0x68
 8007478:	4654      	mov	r4, sl
 800747a:	2205      	movs	r2, #5
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	484e      	ldr	r0, [pc, #312]	@ (80075bc <_svfiprintf_r+0x1e4>)
 8007482:	f000 fa5f 	bl	8007944 <memchr>
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	b9d8      	cbnz	r0, 80074c2 <_svfiprintf_r+0xea>
 800748a:	06d0      	lsls	r0, r2, #27
 800748c:	bf44      	itt	mi
 800748e:	2320      	movmi	r3, #32
 8007490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007494:	0711      	lsls	r1, r2, #28
 8007496:	bf44      	itt	mi
 8007498:	232b      	movmi	r3, #43	@ 0x2b
 800749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800749e:	f89a 3000 	ldrb.w	r3, [sl]
 80074a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a4:	d015      	beq.n	80074d2 <_svfiprintf_r+0xfa>
 80074a6:	4654      	mov	r4, sl
 80074a8:	2000      	movs	r0, #0
 80074aa:	f04f 0c0a 	mov.w	ip, #10
 80074ae:	9a07      	ldr	r2, [sp, #28]
 80074b0:	4621      	mov	r1, r4
 80074b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b6:	3b30      	subs	r3, #48	@ 0x30
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d94b      	bls.n	8007554 <_svfiprintf_r+0x17c>
 80074bc:	b1b0      	cbz	r0, 80074ec <_svfiprintf_r+0x114>
 80074be:	9207      	str	r2, [sp, #28]
 80074c0:	e014      	b.n	80074ec <_svfiprintf_r+0x114>
 80074c2:	eba0 0308 	sub.w	r3, r0, r8
 80074c6:	fa09 f303 	lsl.w	r3, r9, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	46a2      	mov	sl, r4
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	e7d2      	b.n	8007478 <_svfiprintf_r+0xa0>
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	1d19      	adds	r1, r3, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	9103      	str	r1, [sp, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfbb      	ittet	lt
 80074de:	425b      	neglt	r3, r3
 80074e0:	f042 0202 	orrlt.w	r2, r2, #2
 80074e4:	9307      	strge	r3, [sp, #28]
 80074e6:	9307      	strlt	r3, [sp, #28]
 80074e8:	bfb8      	it	lt
 80074ea:	9204      	strlt	r2, [sp, #16]
 80074ec:	7823      	ldrb	r3, [r4, #0]
 80074ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80074f0:	d10a      	bne.n	8007508 <_svfiprintf_r+0x130>
 80074f2:	7863      	ldrb	r3, [r4, #1]
 80074f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f6:	d132      	bne.n	800755e <_svfiprintf_r+0x186>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	3402      	adds	r4, #2
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	9203      	str	r2, [sp, #12]
 8007502:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80075c0 <_svfiprintf_r+0x1e8>
 800750c:	2203      	movs	r2, #3
 800750e:	4650      	mov	r0, sl
 8007510:	7821      	ldrb	r1, [r4, #0]
 8007512:	f000 fa17 	bl	8007944 <memchr>
 8007516:	b138      	cbz	r0, 8007528 <_svfiprintf_r+0x150>
 8007518:	2240      	movs	r2, #64	@ 0x40
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	eba0 000a 	sub.w	r0, r0, sl
 8007520:	4082      	lsls	r2, r0
 8007522:	4313      	orrs	r3, r2
 8007524:	3401      	adds	r4, #1
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	2206      	movs	r2, #6
 800752e:	4825      	ldr	r0, [pc, #148]	@ (80075c4 <_svfiprintf_r+0x1ec>)
 8007530:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007534:	f000 fa06 	bl	8007944 <memchr>
 8007538:	2800      	cmp	r0, #0
 800753a:	d036      	beq.n	80075aa <_svfiprintf_r+0x1d2>
 800753c:	4b22      	ldr	r3, [pc, #136]	@ (80075c8 <_svfiprintf_r+0x1f0>)
 800753e:	bb1b      	cbnz	r3, 8007588 <_svfiprintf_r+0x1b0>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	3307      	adds	r3, #7
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	3308      	adds	r3, #8
 800754a:	9303      	str	r3, [sp, #12]
 800754c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754e:	4433      	add	r3, r6
 8007550:	9309      	str	r3, [sp, #36]	@ 0x24
 8007552:	e76a      	b.n	800742a <_svfiprintf_r+0x52>
 8007554:	460c      	mov	r4, r1
 8007556:	2001      	movs	r0, #1
 8007558:	fb0c 3202 	mla	r2, ip, r2, r3
 800755c:	e7a8      	b.n	80074b0 <_svfiprintf_r+0xd8>
 800755e:	2300      	movs	r3, #0
 8007560:	f04f 0c0a 	mov.w	ip, #10
 8007564:	4619      	mov	r1, r3
 8007566:	3401      	adds	r4, #1
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	4620      	mov	r0, r4
 800756c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007570:	3a30      	subs	r2, #48	@ 0x30
 8007572:	2a09      	cmp	r2, #9
 8007574:	d903      	bls.n	800757e <_svfiprintf_r+0x1a6>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0c6      	beq.n	8007508 <_svfiprintf_r+0x130>
 800757a:	9105      	str	r1, [sp, #20]
 800757c:	e7c4      	b.n	8007508 <_svfiprintf_r+0x130>
 800757e:	4604      	mov	r4, r0
 8007580:	2301      	movs	r3, #1
 8007582:	fb0c 2101 	mla	r1, ip, r1, r2
 8007586:	e7f0      	b.n	800756a <_svfiprintf_r+0x192>
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	4638      	mov	r0, r7
 8007590:	4b0e      	ldr	r3, [pc, #56]	@ (80075cc <_svfiprintf_r+0x1f4>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	f3af 8000 	nop.w
 8007598:	1c42      	adds	r2, r0, #1
 800759a:	4606      	mov	r6, r0
 800759c:	d1d6      	bne.n	800754c <_svfiprintf_r+0x174>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	065b      	lsls	r3, r3, #25
 80075a2:	f53f af2d 	bmi.w	8007400 <_svfiprintf_r+0x28>
 80075a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a8:	e72c      	b.n	8007404 <_svfiprintf_r+0x2c>
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <_svfiprintf_r+0x1f4>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	f000 f87d 	bl	80076b4 <_printf_i>
 80075ba:	e7ed      	b.n	8007598 <_svfiprintf_r+0x1c0>
 80075bc:	08008294 	.word	0x08008294
 80075c0:	0800829a 	.word	0x0800829a
 80075c4:	0800829e 	.word	0x0800829e
 80075c8:	00000000 	.word	0x00000000
 80075cc:	08007321 	.word	0x08007321

080075d0 <_printf_common>:
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	4616      	mov	r6, r2
 80075d6:	4698      	mov	r8, r3
 80075d8:	688a      	ldr	r2, [r1, #8]
 80075da:	690b      	ldr	r3, [r1, #16]
 80075dc:	4607      	mov	r7, r0
 80075de:	4293      	cmp	r3, r2
 80075e0:	bfb8      	it	lt
 80075e2:	4613      	movlt	r3, r2
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075ea:	460c      	mov	r4, r1
 80075ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075f0:	b10a      	cbz	r2, 80075f6 <_printf_common+0x26>
 80075f2:	3301      	adds	r3, #1
 80075f4:	6033      	str	r3, [r6, #0]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	0699      	lsls	r1, r3, #26
 80075fa:	bf42      	ittt	mi
 80075fc:	6833      	ldrmi	r3, [r6, #0]
 80075fe:	3302      	addmi	r3, #2
 8007600:	6033      	strmi	r3, [r6, #0]
 8007602:	6825      	ldr	r5, [r4, #0]
 8007604:	f015 0506 	ands.w	r5, r5, #6
 8007608:	d106      	bne.n	8007618 <_printf_common+0x48>
 800760a:	f104 0a19 	add.w	sl, r4, #25
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	6832      	ldr	r2, [r6, #0]
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	42ab      	cmp	r3, r5
 8007616:	dc2b      	bgt.n	8007670 <_printf_common+0xa0>
 8007618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	3b00      	subs	r3, #0
 8007620:	bf18      	it	ne
 8007622:	2301      	movne	r3, #1
 8007624:	0692      	lsls	r2, r2, #26
 8007626:	d430      	bmi.n	800768a <_printf_common+0xba>
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007630:	47c8      	blx	r9
 8007632:	3001      	adds	r0, #1
 8007634:	d023      	beq.n	800767e <_printf_common+0xae>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	f003 0306 	and.w	r3, r3, #6
 800763e:	2b04      	cmp	r3, #4
 8007640:	bf14      	ite	ne
 8007642:	2500      	movne	r5, #0
 8007644:	6833      	ldreq	r3, [r6, #0]
 8007646:	f04f 0600 	mov.w	r6, #0
 800764a:	bf08      	it	eq
 800764c:	68e5      	ldreq	r5, [r4, #12]
 800764e:	f104 041a 	add.w	r4, r4, #26
 8007652:	bf08      	it	eq
 8007654:	1aed      	subeq	r5, r5, r3
 8007656:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800765a:	bf08      	it	eq
 800765c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007660:	4293      	cmp	r3, r2
 8007662:	bfc4      	itt	gt
 8007664:	1a9b      	subgt	r3, r3, r2
 8007666:	18ed      	addgt	r5, r5, r3
 8007668:	42b5      	cmp	r5, r6
 800766a:	d11a      	bne.n	80076a2 <_printf_common+0xd2>
 800766c:	2000      	movs	r0, #0
 800766e:	e008      	b.n	8007682 <_printf_common+0xb2>
 8007670:	2301      	movs	r3, #1
 8007672:	4652      	mov	r2, sl
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d103      	bne.n	8007686 <_printf_common+0xb6>
 800767e:	f04f 30ff 	mov.w	r0, #4294967295
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	3501      	adds	r5, #1
 8007688:	e7c1      	b.n	800760e <_printf_common+0x3e>
 800768a:	2030      	movs	r0, #48	@ 0x30
 800768c:	18e1      	adds	r1, r4, r3
 800768e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007698:	4422      	add	r2, r4
 800769a:	3302      	adds	r3, #2
 800769c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076a0:	e7c2      	b.n	8007628 <_printf_common+0x58>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4622      	mov	r2, r4
 80076a6:	4641      	mov	r1, r8
 80076a8:	4638      	mov	r0, r7
 80076aa:	47c8      	blx	r9
 80076ac:	3001      	adds	r0, #1
 80076ae:	d0e6      	beq.n	800767e <_printf_common+0xae>
 80076b0:	3601      	adds	r6, #1
 80076b2:	e7d9      	b.n	8007668 <_printf_common+0x98>

080076b4 <_printf_i>:
 80076b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	7e0f      	ldrb	r7, [r1, #24]
 80076ba:	4691      	mov	r9, r2
 80076bc:	2f78      	cmp	r7, #120	@ 0x78
 80076be:	4680      	mov	r8, r0
 80076c0:	460c      	mov	r4, r1
 80076c2:	469a      	mov	sl, r3
 80076c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ca:	d807      	bhi.n	80076dc <_printf_i+0x28>
 80076cc:	2f62      	cmp	r7, #98	@ 0x62
 80076ce:	d80a      	bhi.n	80076e6 <_printf_i+0x32>
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	f000 80d1 	beq.w	8007878 <_printf_i+0x1c4>
 80076d6:	2f58      	cmp	r7, #88	@ 0x58
 80076d8:	f000 80b8 	beq.w	800784c <_printf_i+0x198>
 80076dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076e4:	e03a      	b.n	800775c <_printf_i+0xa8>
 80076e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ea:	2b15      	cmp	r3, #21
 80076ec:	d8f6      	bhi.n	80076dc <_printf_i+0x28>
 80076ee:	a101      	add	r1, pc, #4	@ (adr r1, 80076f4 <_printf_i+0x40>)
 80076f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076f4:	0800774d 	.word	0x0800774d
 80076f8:	08007761 	.word	0x08007761
 80076fc:	080076dd 	.word	0x080076dd
 8007700:	080076dd 	.word	0x080076dd
 8007704:	080076dd 	.word	0x080076dd
 8007708:	080076dd 	.word	0x080076dd
 800770c:	08007761 	.word	0x08007761
 8007710:	080076dd 	.word	0x080076dd
 8007714:	080076dd 	.word	0x080076dd
 8007718:	080076dd 	.word	0x080076dd
 800771c:	080076dd 	.word	0x080076dd
 8007720:	0800785f 	.word	0x0800785f
 8007724:	0800778b 	.word	0x0800778b
 8007728:	08007819 	.word	0x08007819
 800772c:	080076dd 	.word	0x080076dd
 8007730:	080076dd 	.word	0x080076dd
 8007734:	08007881 	.word	0x08007881
 8007738:	080076dd 	.word	0x080076dd
 800773c:	0800778b 	.word	0x0800778b
 8007740:	080076dd 	.word	0x080076dd
 8007744:	080076dd 	.word	0x080076dd
 8007748:	08007821 	.word	0x08007821
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6032      	str	r2, [r6, #0]
 8007754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800775c:	2301      	movs	r3, #1
 800775e:	e09c      	b.n	800789a <_printf_i+0x1e6>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	1d19      	adds	r1, r3, #4
 8007766:	6031      	str	r1, [r6, #0]
 8007768:	0606      	lsls	r6, r0, #24
 800776a:	d501      	bpl.n	8007770 <_printf_i+0xbc>
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	e003      	b.n	8007778 <_printf_i+0xc4>
 8007770:	0645      	lsls	r5, r0, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0xb8>
 8007774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007778:	2d00      	cmp	r5, #0
 800777a:	da03      	bge.n	8007784 <_printf_i+0xd0>
 800777c:	232d      	movs	r3, #45	@ 0x2d
 800777e:	426d      	negs	r5, r5
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007784:	230a      	movs	r3, #10
 8007786:	4858      	ldr	r0, [pc, #352]	@ (80078e8 <_printf_i+0x234>)
 8007788:	e011      	b.n	80077ae <_printf_i+0xfa>
 800778a:	6821      	ldr	r1, [r4, #0]
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	0608      	lsls	r0, r1, #24
 8007790:	f853 5b04 	ldr.w	r5, [r3], #4
 8007794:	d402      	bmi.n	800779c <_printf_i+0xe8>
 8007796:	0649      	lsls	r1, r1, #25
 8007798:	bf48      	it	mi
 800779a:	b2ad      	uxthmi	r5, r5
 800779c:	2f6f      	cmp	r7, #111	@ 0x6f
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	bf14      	ite	ne
 80077a2:	230a      	movne	r3, #10
 80077a4:	2308      	moveq	r3, #8
 80077a6:	4850      	ldr	r0, [pc, #320]	@ (80078e8 <_printf_i+0x234>)
 80077a8:	2100      	movs	r1, #0
 80077aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ae:	6866      	ldr	r6, [r4, #4]
 80077b0:	2e00      	cmp	r6, #0
 80077b2:	60a6      	str	r6, [r4, #8]
 80077b4:	db05      	blt.n	80077c2 <_printf_i+0x10e>
 80077b6:	6821      	ldr	r1, [r4, #0]
 80077b8:	432e      	orrs	r6, r5
 80077ba:	f021 0104 	bic.w	r1, r1, #4
 80077be:	6021      	str	r1, [r4, #0]
 80077c0:	d04b      	beq.n	800785a <_printf_i+0x1a6>
 80077c2:	4616      	mov	r6, r2
 80077c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c8:	fb03 5711 	mls	r7, r3, r1, r5
 80077cc:	5dc7      	ldrb	r7, [r0, r7]
 80077ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077d2:	462f      	mov	r7, r5
 80077d4:	42bb      	cmp	r3, r7
 80077d6:	460d      	mov	r5, r1
 80077d8:	d9f4      	bls.n	80077c4 <_printf_i+0x110>
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d10b      	bne.n	80077f6 <_printf_i+0x142>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	07df      	lsls	r7, r3, #31
 80077e2:	d508      	bpl.n	80077f6 <_printf_i+0x142>
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	6861      	ldr	r1, [r4, #4]
 80077e8:	4299      	cmp	r1, r3
 80077ea:	bfde      	ittt	le
 80077ec:	2330      	movle	r3, #48	@ 0x30
 80077ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077f6:	1b92      	subs	r2, r2, r6
 80077f8:	6122      	str	r2, [r4, #16]
 80077fa:	464b      	mov	r3, r9
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f8cd a000 	str.w	sl, [sp]
 8007804:	aa03      	add	r2, sp, #12
 8007806:	f7ff fee3 	bl	80075d0 <_printf_common>
 800780a:	3001      	adds	r0, #1
 800780c:	d14a      	bne.n	80078a4 <_printf_i+0x1f0>
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
 8007812:	b004      	add	sp, #16
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	f043 0320 	orr.w	r3, r3, #32
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	2778      	movs	r7, #120	@ 0x78
 8007822:	4832      	ldr	r0, [pc, #200]	@ (80078ec <_printf_i+0x238>)
 8007824:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	6831      	ldr	r1, [r6, #0]
 800782c:	061f      	lsls	r7, r3, #24
 800782e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007832:	d402      	bmi.n	800783a <_printf_i+0x186>
 8007834:	065f      	lsls	r7, r3, #25
 8007836:	bf48      	it	mi
 8007838:	b2ad      	uxthmi	r5, r5
 800783a:	6031      	str	r1, [r6, #0]
 800783c:	07d9      	lsls	r1, r3, #31
 800783e:	bf44      	itt	mi
 8007840:	f043 0320 	orrmi.w	r3, r3, #32
 8007844:	6023      	strmi	r3, [r4, #0]
 8007846:	b11d      	cbz	r5, 8007850 <_printf_i+0x19c>
 8007848:	2310      	movs	r3, #16
 800784a:	e7ad      	b.n	80077a8 <_printf_i+0xf4>
 800784c:	4826      	ldr	r0, [pc, #152]	@ (80078e8 <_printf_i+0x234>)
 800784e:	e7e9      	b.n	8007824 <_printf_i+0x170>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	f023 0320 	bic.w	r3, r3, #32
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e7f6      	b.n	8007848 <_printf_i+0x194>
 800785a:	4616      	mov	r6, r2
 800785c:	e7bd      	b.n	80077da <_printf_i+0x126>
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	6825      	ldr	r5, [r4, #0]
 8007862:	1d18      	adds	r0, r3, #4
 8007864:	6961      	ldr	r1, [r4, #20]
 8007866:	6030      	str	r0, [r6, #0]
 8007868:	062e      	lsls	r6, r5, #24
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	d501      	bpl.n	8007872 <_printf_i+0x1be>
 800786e:	6019      	str	r1, [r3, #0]
 8007870:	e002      	b.n	8007878 <_printf_i+0x1c4>
 8007872:	0668      	lsls	r0, r5, #25
 8007874:	d5fb      	bpl.n	800786e <_printf_i+0x1ba>
 8007876:	8019      	strh	r1, [r3, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	4616      	mov	r6, r2
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	e7bc      	b.n	80077fa <_printf_i+0x146>
 8007880:	6833      	ldr	r3, [r6, #0]
 8007882:	2100      	movs	r1, #0
 8007884:	1d1a      	adds	r2, r3, #4
 8007886:	6032      	str	r2, [r6, #0]
 8007888:	681e      	ldr	r6, [r3, #0]
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	4630      	mov	r0, r6
 800788e:	f000 f859 	bl	8007944 <memchr>
 8007892:	b108      	cbz	r0, 8007898 <_printf_i+0x1e4>
 8007894:	1b80      	subs	r0, r0, r6
 8007896:	6060      	str	r0, [r4, #4]
 8007898:	6863      	ldr	r3, [r4, #4]
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	2300      	movs	r3, #0
 800789e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a2:	e7aa      	b.n	80077fa <_printf_i+0x146>
 80078a4:	4632      	mov	r2, r6
 80078a6:	4649      	mov	r1, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	47d0      	blx	sl
 80078ae:	3001      	adds	r0, #1
 80078b0:	d0ad      	beq.n	800780e <_printf_i+0x15a>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	079b      	lsls	r3, r3, #30
 80078b6:	d413      	bmi.n	80078e0 <_printf_i+0x22c>
 80078b8:	68e0      	ldr	r0, [r4, #12]
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	4298      	cmp	r0, r3
 80078be:	bfb8      	it	lt
 80078c0:	4618      	movlt	r0, r3
 80078c2:	e7a6      	b.n	8007812 <_printf_i+0x15e>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4632      	mov	r2, r6
 80078c8:	4649      	mov	r1, r9
 80078ca:	4640      	mov	r0, r8
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d09d      	beq.n	800780e <_printf_i+0x15a>
 80078d2:	3501      	adds	r5, #1
 80078d4:	68e3      	ldr	r3, [r4, #12]
 80078d6:	9903      	ldr	r1, [sp, #12]
 80078d8:	1a5b      	subs	r3, r3, r1
 80078da:	42ab      	cmp	r3, r5
 80078dc:	dcf2      	bgt.n	80078c4 <_printf_i+0x210>
 80078de:	e7eb      	b.n	80078b8 <_printf_i+0x204>
 80078e0:	2500      	movs	r5, #0
 80078e2:	f104 0619 	add.w	r6, r4, #25
 80078e6:	e7f5      	b.n	80078d4 <_printf_i+0x220>
 80078e8:	080082a5 	.word	0x080082a5
 80078ec:	080082b6 	.word	0x080082b6

080078f0 <memmove>:
 80078f0:	4288      	cmp	r0, r1
 80078f2:	b510      	push	{r4, lr}
 80078f4:	eb01 0402 	add.w	r4, r1, r2
 80078f8:	d902      	bls.n	8007900 <memmove+0x10>
 80078fa:	4284      	cmp	r4, r0
 80078fc:	4623      	mov	r3, r4
 80078fe:	d807      	bhi.n	8007910 <memmove+0x20>
 8007900:	1e43      	subs	r3, r0, #1
 8007902:	42a1      	cmp	r1, r4
 8007904:	d008      	beq.n	8007918 <memmove+0x28>
 8007906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800790e:	e7f8      	b.n	8007902 <memmove+0x12>
 8007910:	4601      	mov	r1, r0
 8007912:	4402      	add	r2, r0
 8007914:	428a      	cmp	r2, r1
 8007916:	d100      	bne.n	800791a <memmove+0x2a>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800791e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007922:	e7f7      	b.n	8007914 <memmove+0x24>

08007924 <_sbrk_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	2300      	movs	r3, #0
 8007928:	4d05      	ldr	r5, [pc, #20]	@ (8007940 <_sbrk_r+0x1c>)
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 fcec 	bl	800130c <_sbrk>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_sbrk_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_sbrk_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20000524 	.word	0x20000524

08007944 <memchr>:
 8007944:	4603      	mov	r3, r0
 8007946:	b510      	push	{r4, lr}
 8007948:	b2c9      	uxtb	r1, r1
 800794a:	4402      	add	r2, r0
 800794c:	4293      	cmp	r3, r2
 800794e:	4618      	mov	r0, r3
 8007950:	d101      	bne.n	8007956 <memchr+0x12>
 8007952:	2000      	movs	r0, #0
 8007954:	e003      	b.n	800795e <memchr+0x1a>
 8007956:	7804      	ldrb	r4, [r0, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	428c      	cmp	r4, r1
 800795c:	d1f6      	bne.n	800794c <memchr+0x8>
 800795e:	bd10      	pop	{r4, pc}

08007960 <memcpy>:
 8007960:	440a      	add	r2, r1
 8007962:	4291      	cmp	r1, r2
 8007964:	f100 33ff 	add.w	r3, r0, #4294967295
 8007968:	d100      	bne.n	800796c <memcpy+0xc>
 800796a:	4770      	bx	lr
 800796c:	b510      	push	{r4, lr}
 800796e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007972:	4291      	cmp	r1, r2
 8007974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007978:	d1f9      	bne.n	800796e <memcpy+0xe>
 800797a:	bd10      	pop	{r4, pc}

0800797c <_realloc_r>:
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4607      	mov	r7, r0
 8007982:	4614      	mov	r4, r2
 8007984:	460d      	mov	r5, r1
 8007986:	b921      	cbnz	r1, 8007992 <_realloc_r+0x16>
 8007988:	4611      	mov	r1, r2
 800798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	f7ff bc3b 	b.w	8007208 <_malloc_r>
 8007992:	b92a      	cbnz	r2, 80079a0 <_realloc_r+0x24>
 8007994:	f7ff fbce 	bl	8007134 <_free_r>
 8007998:	4625      	mov	r5, r4
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	f000 f81a 	bl	80079d8 <_malloc_usable_size_r>
 80079a4:	4284      	cmp	r4, r0
 80079a6:	4606      	mov	r6, r0
 80079a8:	d802      	bhi.n	80079b0 <_realloc_r+0x34>
 80079aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ae:	d8f4      	bhi.n	800799a <_realloc_r+0x1e>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff fc28 	bl	8007208 <_malloc_r>
 80079b8:	4680      	mov	r8, r0
 80079ba:	b908      	cbnz	r0, 80079c0 <_realloc_r+0x44>
 80079bc:	4645      	mov	r5, r8
 80079be:	e7ec      	b.n	800799a <_realloc_r+0x1e>
 80079c0:	42b4      	cmp	r4, r6
 80079c2:	4622      	mov	r2, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	bf28      	it	cs
 80079c8:	4632      	movcs	r2, r6
 80079ca:	f7ff ffc9 	bl	8007960 <memcpy>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff fbaf 	bl	8007134 <_free_r>
 80079d6:	e7f1      	b.n	80079bc <_realloc_r+0x40>

080079d8 <_malloc_usable_size_r>:
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f18      	subs	r0, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbc      	itt	lt
 80079e2:	580b      	ldrlt	r3, [r1, r0]
 80079e4:	18c0      	addlt	r0, r0, r3
 80079e6:	4770      	bx	lr

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
