
remode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d48  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08008e54  08008e54  00009e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009730  08009730  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009730  08009730  0000a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009738  08009738  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009738  08009738  0000a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800973c  0800973c  0000a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009740  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000078  080097b4  0000b078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  080097b4  0000b5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170df  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da4  00000000  00000000  0002217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00025f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b3  00000000  00000000  000275d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aba1  00000000  00000000  00028783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c85d  00000000  00000000  00043324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009541c  00000000  00000000  0005fb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  000f4fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fb33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e3c 	.word	0x08008e3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08008e3c 	.word	0x08008e3c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b3d      	ldr	r3, [pc, #244]	@ (8000264 <MX_ADC1_Init+0x108>)
 800016e:	4a3e      	ldr	r2, [pc, #248]	@ (8000268 <MX_ADC1_Init+0x10c>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b3c      	ldr	r3, [pc, #240]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b3a      	ldr	r3, [pc, #232]	@ (8000264 <MX_ADC1_Init+0x108>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b38      	ldr	r3, [pc, #224]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b37      	ldr	r3, [pc, #220]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b35      	ldr	r3, [pc, #212]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000194:	4b33      	ldr	r3, [pc, #204]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000196:	2206      	movs	r2, #6
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4832      	ldr	r0, [pc, #200]	@ (8000264 <MX_ADC1_Init+0x108>)
 800019c:	f001 fcfa 	bl	8001b94 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fd5a 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001b2:	2301      	movs	r3, #1
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	482a      	ldr	r0, [pc, #168]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001bc:	f001 ff7a 	bl	80020b4 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fd4a 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	4823      	ldr	r0, [pc, #140]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001d8:	f001 ff6c 	bl	80020b4 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fd3c 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001e6:	2302      	movs	r3, #2
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	481c      	ldr	r0, [pc, #112]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001f4:	f001 ff5e 	bl	80020b4 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fd2e 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000206:	2304      	movs	r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000210:	f001 ff50 	bl	80020b4 <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800021a:	f000 fd20 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800021e:	2310      	movs	r3, #16
 8000220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000222:	2305      	movs	r3, #5
 8000224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000226:	2304      	movs	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	480d      	ldr	r0, [pc, #52]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000230:	f001 ff40 	bl	80020b4 <HAL_ADC_ConfigChannel>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800023a:	f000 fd10 	bl	8000c5e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800023e:	2311      	movs	r3, #17
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000242:	2306      	movs	r3, #6
 8000244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <MX_ADC1_Init+0x108>)
 800024c:	f001 ff32 	bl	80020b4 <HAL_ADC_ConfigChannel>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000256:	f000 fd02 	bl	8000c5e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2c      	ldr	r2, [pc, #176]	@ (8000338 <HAL_ADC_MspInit+0xcc>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d151      	bne.n	8000330 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2a      	ldr	r2, [pc, #168]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b28      	ldr	r3, [pc, #160]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b25      	ldr	r3, [pc, #148]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a24      	ldr	r2, [pc, #144]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002bc:	230f      	movs	r3, #15
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	481d      	ldr	r0, [pc, #116]	@ (8000340 <HAL_ADC_MspInit+0xd4>)
 80002cc:	f002 feea 	bl	80030a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <HAL_ADC_MspInit+0xdc>)
 80002d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000304:	480f      	ldr	r0, [pc, #60]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000306:	f002 faa1 	bl	800284c <HAL_DMA_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000310:	f000 fca5 	bl	8000c5e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000318:	621a      	str	r2, [r3, #32]
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2012      	movs	r0, #18
 8000326:	f002 fa4e 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800032a:	2012      	movs	r0, #18
 800032c:	f002 fa67 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40012400 	.word	0x40012400
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800
 8000344:	200000c4 	.word	0x200000c4
 8000348:	40020008 	.word	0x40020008

0800034c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	200b      	movs	r0, #11
 8000370:	f002 fa29 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000374:	200b      	movs	r0, #11
 8000376:	f002 fa42 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	200c      	movs	r0, #12
 8000380:	f002 fa21 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000384:	200c      	movs	r0, #12
 8000386:	f002 fa3a 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200d      	movs	r0, #13
 8000390:	f002 fa19 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000394:	200d      	movs	r0, #13
 8000396:	f002 fa32 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2010      	movs	r0, #16
 80003a0:	f002 fa11 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003a4:	2010      	movs	r0, #16
 80003a6:	f002 fa2a 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2011      	movs	r0, #17
 80003b0:	f002 fa09 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003b4:	2011      	movs	r0, #17
 80003b6:	f002 fa22 	bl	80027fe <HAL_NVIC_EnableIRQ>

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b56      	ldr	r3, [pc, #344]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a55      	ldr	r2, [pc, #340]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b53      	ldr	r3, [pc, #332]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b50      	ldr	r3, [pc, #320]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a4f      	ldr	r2, [pc, #316]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b4d      	ldr	r3, [pc, #308]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <MX_GPIO_Init+0x170>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a49      	ldr	r2, [pc, #292]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b47      	ldr	r3, [pc, #284]	@ (8000538 <MX_GPIO_Init+0x170>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a43      	ldr	r2, [pc, #268]	@ (8000538 <MX_GPIO_Init+0x170>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b41      	ldr	r3, [pc, #260]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000442:	483e      	ldr	r0, [pc, #248]	@ (800053c <MX_GPIO_Init+0x174>)
 8000444:	f002 ffb2 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2103      	movs	r1, #3
 800044c:	483c      	ldr	r0, [pc, #240]	@ (8000540 <MX_GPIO_Init+0x178>)
 800044e:	f002 ffad 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000458:	4839      	ldr	r0, [pc, #228]	@ (8000540 <MX_GPIO_Init+0x178>)
 800045a:	f002 ffa7 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4831      	ldr	r0, [pc, #196]	@ (800053c <MX_GPIO_Init+0x174>)
 8000478:	f002 fe14 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800047c:	2310      	movs	r3, #16
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	482d      	ldr	r0, [pc, #180]	@ (8000544 <MX_GPIO_Init+0x17c>)
 8000490:	f002 fe08 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000494:	2303      	movs	r3, #3
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4825      	ldr	r0, [pc, #148]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004ac:	f002 fdfa 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	481f      	ldr	r0, [pc, #124]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004c2:	f002 fdef 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004c6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4819      	ldr	r0, [pc, #100]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004dc:	f002 fde2 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4813      	ldr	r0, [pc, #76]	@ (8000544 <MX_GPIO_Init+0x17c>)
 80004f6:	f002 fdd5 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : remode1_Pin remode2_Pin */
  GPIO_InitStruct.Pin = remode1_Pin|remode2_Pin;
 80004fa:	2318      	movs	r3, #24
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <MX_GPIO_Init+0x178>)
 800050e:	f002 fdc9 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000518:	2311      	movs	r3, #17
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_GPIO_Init+0x178>)
 800052c:	f002 fdba 	bl	80030a4 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000
 8000540:	40010c00 	.word	0x40010c00
 8000544:	40010800 	.word	0x40010800

08000548 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_I2C1_Init+0x50>)
 800054e:	4a13      	ldr	r2, [pc, #76]	@ (800059c <MX_I2C1_Init+0x54>)
 8000550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000554:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <MX_I2C1_Init+0x58>)
 8000556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_I2C1_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000566:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800056a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000578:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <MX_I2C1_Init+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000584:	4804      	ldr	r0, [pc, #16]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000586:	f002 ff43 	bl	8003410 <HAL_I2C_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000590:	f000 fb65 	bl	8000c5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000108 	.word	0x20000108
 800059c:	40005400 	.word	0x40005400
 80005a0:	00061a80 	.word	0x00061a80

080005a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a45      	ldr	r2, [pc, #276]	@ (80006d4 <HAL_I2C_MspInit+0x130>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	f040 8082 	bne.w	80006ca <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a43      	ldr	r2, [pc, #268]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b41      	ldr	r3, [pc, #260]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005de:	23c0      	movs	r3, #192	@ 0xc0
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	2312      	movs	r3, #18
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	483a      	ldr	r0, [pc, #232]	@ (80006dc <HAL_I2C_MspInit+0x138>)
 80005f2:	f002 fd57 	bl	80030a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f6:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a37      	ldr	r2, [pc, #220]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800060e:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000610:	4a34      	ldr	r2, [pc, #208]	@ (80006e4 <HAL_I2C_MspInit+0x140>)
 8000612:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000614:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800063a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800063e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000640:	4827      	ldr	r0, [pc, #156]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000642:	f002 f903 	bl	800284c <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 800064c:	f000 fb07 	bl	8000c5e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000654:	639a      	str	r2, [r3, #56]	@ 0x38
 8000656:	4a22      	ldr	r2, [pc, #136]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800065e:	4a23      	ldr	r2, [pc, #140]	@ (80006ec <HAL_I2C_MspInit+0x148>)
 8000660:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000664:	2210      	movs	r2, #16
 8000666:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000688:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800068c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800068e:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000690:	f002 f8dc 	bl	800284c <HAL_DMA_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800069a:	f000 fae0 	bl	8000c5e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a4:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	201f      	movs	r0, #31
 80006b0:	f002 f889 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006b4:	201f      	movs	r0, #31
 80006b6:	f002 f8a2 	bl	80027fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2020      	movs	r0, #32
 80006c0:	f002 f881 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006c4:	2020      	movs	r0, #32
 80006c6:	f002 f89a 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	2000015c 	.word	0x2000015c
 80006e4:	40020080 	.word	0x40020080
 80006e8:	200001a0 	.word	0x200001a0
 80006ec:	4002006c 	.word	0x4002006c

080006f0 <HAL_I2C_WriteCommand>:
 * 参    数：Control_bytes，控制字节
 * 参    数：Command 要写入的命令值，范围：0x00~0xFF
 * 返 回 值：无
 */
void HAL_I2C_WriteCommand(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t Command)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	807b      	strh	r3, [r7, #2]
 8000702:	460b      	mov	r3, r1
 8000704:	707b      	strb	r3, [r7, #1]
 8000706:	4613      	mov	r3, r2
 8000708:	703b      	strb	r3, [r7, #0]
    uint8_t TxData[2] = { Control_bytes , Command }; // 将控制字节和命令值打包
 800070a:	787b      	ldrb	r3, [r7, #1]
 800070c:	733b      	strb	r3, [r7, #12]
 800070e:	783b      	ldrb	r3, [r7, #0]
 8000710:	737b      	strb	r3, [r7, #13]

//    HAL_I2C_Master_Transmit(&hi2c1 , DevAddress << 1 , TxData , 2 , HAL_MAX_DELAY);
//      HAL_I2C_Master_Transmit_IT(&hi2c1 , DevAddress << 1 , TxData , 2 );
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 2);
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b299      	uxth	r1, r3
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	2302      	movs	r3, #2
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <HAL_I2C_WriteCommand+0x4c>)
 8000720:	f002 ffce 	bl	80036c0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000724:	bf00      	nop
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <HAL_I2C_WriteCommand+0x4c>)
 8000728:	f003 fb6c 	bl	8003e04 <HAL_I2C_GetState>
 800072c:	4603      	mov	r3, r0
 800072e:	2b20      	cmp	r3, #32
 8000730:	d1f9      	bne.n	8000726 <HAL_I2C_WriteCommand+0x36>

}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000108 	.word	0x20000108

08000740 <HAL_I2C_WriteData>:
 * 参    数：DataLength，要写入数据的数量
 * 返 回 值：无
 */
void HAL_I2C_WriteData(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t *Data,
        uint8_t DataLength)
{
 8000740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	817b      	strh	r3, [r7, #10]
 8000750:	4613      	mov	r3, r2
 8000752:	727b      	strb	r3, [r7, #9]
 8000754:	466b      	mov	r3, sp
 8000756:	461e      	mov	r6, r3
    uint8_t TxData[1 + DataLength]; // 创建缓冲区，包含控制字节和数据
 8000758:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800075c:	1c59      	adds	r1, r3, #1
 800075e:	1e4b      	subs	r3, r1, #1
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	460a      	mov	r2, r1
 8000764:	2300      	movs	r3, #0
 8000766:	4690      	mov	r8, r2
 8000768:	4699      	mov	r9, r3
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800077a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800077e:	460a      	mov	r2, r1
 8000780:	2300      	movs	r3, #0
 8000782:	4614      	mov	r4, r2
 8000784:	461d      	mov	r5, r3
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	00eb      	lsls	r3, r5, #3
 8000790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000794:	00e2      	lsls	r2, r4, #3
 8000796:	460b      	mov	r3, r1
 8000798:	3307      	adds	r3, #7
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	ebad 0d03 	sub.w	sp, sp, r3
 80007a2:	466b      	mov	r3, sp
 80007a4:	3300      	adds	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    TxData[0] = Control_bytes;        // 第一个字节是控制字节
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	7a7a      	ldrb	r2, [r7, #9]
 80007ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < DataLength; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	77fb      	strb	r3, [r7, #31]
 80007b2:	e00a      	b.n	80007ca <HAL_I2C_WriteData+0x8a>
    {
        TxData[1 + i] = Data[i];    // 将数据复制到缓冲区
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	441a      	add	r2, r3
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	3301      	adds	r3, #1
 80007be:	7811      	ldrb	r1, [r2, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DataLength; i++)
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	3301      	adds	r3, #1
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	7ffa      	ldrb	r2, [r7, #31]
 80007cc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3ef      	bcc.n	80007b4 <HAL_I2C_WriteData+0x74>
    }
//    HAL_I2C_Master_Transmit(&hi2c1, DevAddress << 1, TxData,  1 + DataLength, HAL_MAX_DELAY);
//    HAL_I2C_Master_Transmit_IT(&hi2c1, DevAddress << 1, TxData,  1 + DataLength);
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 1 + DataLength); // 发送数据
 80007d4:	897b      	ldrh	r3, [r7, #10]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	b299      	uxth	r1, r3
 80007da:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <HAL_I2C_WriteData+0xc8>)
 80007e8:	f002 ff6a 	bl	80036c0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007ec:	bf00      	nop
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <HAL_I2C_WriteData+0xc8>)
 80007f0:	f003 fb08 	bl	8003e04 <HAL_I2C_GetState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b20      	cmp	r3, #32
 80007f8:	d1f9      	bne.n	80007ee <HAL_I2C_WriteData+0xae>
 80007fa:	46b5      	mov	sp, r6
}
 80007fc:	bf00      	nop
 80007fe:	3724      	adds	r7, #36	@ 0x24
 8000800:	46bd      	mov	sp, r7
 8000802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000806:	bf00      	nop
 8000808:	20000108 	.word	0x20000108

0800080c <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b08b      	sub	sp, #44	@ 0x2c
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a58      	ldr	r2, [pc, #352]	@ (8000978 <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	f040 80a9 	bne.w	8000970 <HAL_ADC_ConvHalfCpltCallback+0x164>
    {
        static uint8_t i = 0;
//    i++;
        // 遍历所有通道进行滤波
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
 8000822:	e067      	b.n	80008f4 <HAL_ADC_ConvHalfCpltCallback+0xe8>
        {
            // 更新滤波器
            joystick_filters[ch].buffer[joystick_filters[ch].index] = adc_raw[ch];
 8000824:	7df8      	ldrb	r0, [r7, #23]
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	7df9      	ldrb	r1, [r7, #23]
 800082a:	4c54      	ldr	r4, [pc, #336]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800082c:	460b      	mov	r3, r1
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4423      	add	r3, r4
 8000836:	3310      	adds	r3, #16
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461c      	mov	r4, r3
 800083c:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <HAL_ADC_ConvHalfCpltCallback+0x174>)
 800083e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000842:	b298      	uxth	r0, r3
 8000844:	494d      	ldr	r1, [pc, #308]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8000846:	4613      	mov	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4413      	add	r3, r2
 800084c:	4423      	add	r3, r4
 800084e:	4602      	mov	r2, r0
 8000850:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            joystick_filters[ch].index = (joystick_filters[ch].index + 1) % FILTER_WINDOW;
 8000854:	7dfa      	ldrb	r2, [r7, #23]
 8000856:	4949      	ldr	r1, [pc, #292]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8000858:	4613      	mov	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	440b      	add	r3, r1
 8000862:	3310      	adds	r3, #16
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	425a      	negs	r2, r3
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	f002 0207 	and.w	r2, r2, #7
 8000872:	bf58      	it	pl
 8000874:	4253      	negpl	r3, r2
 8000876:	7dfa      	ldrb	r2, [r7, #23]
 8000878:	b2d8      	uxtb	r0, r3
 800087a:	4940      	ldr	r1, [pc, #256]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	440b      	add	r3, r1
 8000886:	3310      	adds	r3, #16
 8000888:	4602      	mov	r2, r0
 800088a:	701a      	strb	r2, [r3, #0]

            // 计算滑动平均
            uint32_t sum = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e00f      	b.n	80008b6 <HAL_ADC_ConvHalfCpltCallback+0xaa>
            {
                sum += joystick_filters[ch].buffer[i];
 8000896:	7dfa      	ldrb	r2, [r7, #23]
 8000898:	7bf9      	ldrb	r1, [r7, #15]
 800089a:	4838      	ldr	r0, [pc, #224]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800089c:	4613      	mov	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4413      	add	r3, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80008a8:	461a      	mov	r2, r3
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	4413      	add	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d9ec      	bls.n	8000896 <HAL_ADC_ConvHalfCpltCallback+0x8a>
            }
            filtered_values[ch] = sum / FILTER_WINDOW;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	b291      	uxth	r1, r2
 80008c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (abs(filtered_values[ch] - 2048) <= DEADZONE_THRESHOLD)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfb8      	it	lt
 80008dc:	425b      	neglt	r3, r3
 80008de:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e0:	dc05      	bgt.n	80008ee <HAL_ADC_ConvHalfCpltCallback+0xe2>
            {
                filtered_values[ch] = 2048;
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	3301      	adds	r3, #1
 80008f2:	75fb      	strb	r3, [r7, #23]
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d994      	bls.n	8000824 <HAL_ADC_ConvHalfCpltCallback+0x18>
            }
        }
        if (filtered_values[0] == 2048)
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000904:	d102      	bne.n	800090c <HAL_ADC_ConvHalfCpltCallback+0x100>
            i = 1;
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
        if (i == 1)
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d12d      	bne.n	8000970 <HAL_ADC_ConvHalfCpltCallback+0x164>
        {
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800091e:	885b      	ldrh	r3, [r3, #2]
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
                    filtered_values[3] , filtered_values[2]);
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000926:	88db      	ldrh	r3, [r3, #6]
 8000928:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 800092a:	4619      	mov	r1, r3
                    filtered_values[3] , filtered_values[2]);
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	9101      	str	r1, [sp, #4]
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	4a14      	ldr	r2, [pc, #80]	@ (800098c <HAL_ADC_ConvHalfCpltCallback+0x180>)
 800093c:	2114      	movs	r1, #20
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8000940:	f007 fd96 	bl	8008470 <sniprintf>

            sprintf(remode1 , "%d,%d " , filtered_values[0] , filtered_values[1]);
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800094e:	885b      	ldrh	r3, [r3, #2]
 8000950:	b29b      	uxth	r3, r3
 8000952:	4910      	ldr	r1, [pc, #64]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8000954:	4810      	ldr	r0, [pc, #64]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8000956:	f007 fdc1 	bl	80084dc <siprintf>
            sprintf(remode2 , "%d,%d " , filtered_values[2] , filtered_values[3]);
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000964:	88db      	ldrh	r3, [r3, #6]
 8000966:	b29b      	uxth	r3, r3
 8000968:	490a      	ldr	r1, [pc, #40]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <HAL_ADC_ConvHalfCpltCallback+0x190>)
 800096c:	f007 fdb6 	bl	80084dc <siprintf>

        }
    }
}
 8000970:	bf00      	nop
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000094 	.word	0x20000094
 800097c:	20000298 	.word	0x20000298
 8000980:	20000284 	.word	0x20000284
 8000984:	2000028c 	.word	0x2000028c
 8000988:	200002e0 	.word	0x200002e0
 800098c:	08008e54 	.word	0x08008e54
 8000990:	200001e4 	.word	0x200001e4
 8000994:	08008e64 	.word	0x08008e64
 8000998:	200001f8 	.word	0x200001f8
 800099c:	2000022c 	.word	0x2000022c

080009a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
        timerflag++; // 设置2000ms标志
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009be:	701a      	strb	r2, [r3, #0]
    }
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40012c00 	.word	0x40012c00
 80009d0:	20000294 	.word	0x20000294

080009d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8

    /* USER CODE BEGIN 1 */
    uint8_t i = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80009de:	f001 f853 	bl	8001a88 <HAL_Init>

    /* USER CODE BEGIN Init */
    HAL_SYSTICK_IRQHandler();
 80009e2:	f001 ff26 	bl	8002832 <HAL_SYSTICK_IRQHandler>
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80009e6:	f000 f8df 	bl	8000ba8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80009ea:	f7ff fced 	bl	80003c8 <MX_GPIO_Init>
    MX_DMA_Init();
 80009ee:	f7ff fcad 	bl	800034c <MX_DMA_Init>
    MX_I2C1_Init();
 80009f2:	f7ff fda9 	bl	8000548 <MX_I2C1_Init>
    MX_ADC1_Init();
 80009f6:	f7ff fbb1 	bl	800015c <MX_ADC1_Init>
    MX_SPI1_Init();
 80009fa:	f000 fd25 	bl	8001448 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 80009fe:	f000 ff9f 	bl	8001940 <MX_USART1_UART_Init>
    MX_TIM1_Init();
 8000a02:	f000 ff25 	bl	8001850 <MX_TIM1_Init>
    /* USER CODE BEGIN 2 */
    // 启动定时器中断
    HAL_TIM_Base_Start_IT(&htim1);
 8000a06:	485a      	ldr	r0, [pc, #360]	@ (8000b70 <main+0x19c>)
 8000a08:	f006 facc 	bl	8006fa4 <HAL_TIM_Base_Start_IT>

    // 初始化滤波器结构体
    memset(joystick_filters , 0 , sizeof(joystick_filters));
 8000a0c:	2248      	movs	r2, #72	@ 0x48
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4858      	ldr	r0, [pc, #352]	@ (8000b74 <main+0x1a0>)
 8000a12:	f007 fd85 	bl	8008520 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000a16:	4858      	ldr	r0, [pc, #352]	@ (8000b78 <main+0x1a4>)
 8000a18:	f001 fd46 	bl	80024a8 <HAL_ADCEx_Calibration_Start>
    hadc1.Instance->CR2 |= ADC_CR2_CAL;  // 启动内部校准
 8000a1c:	4b56      	ldr	r3, [pc, #344]	@ (8000b78 <main+0x1a4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	4b55      	ldr	r3, [pc, #340]	@ (8000b78 <main+0x1a4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0204 	orr.w	r2, r2, #4
 8000a2a:	609a      	str	r2, [r3, #8]
    while (hadc1.Instance->CR2 & ADC_CR2_CAL); // 等待校准完成
 8000a2c:	bf00      	nop
 8000a2e:	4b52      	ldr	r3, [pc, #328]	@ (8000b78 <main+0x1a4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f8      	bne.n	8000a2e <main+0x5a>

    OLED_Init();                           //OLED初始
 8000a3c:	f007 fb86 	bl	800814c <OLED_Init>
    OLED_ShowString(42 , 3 , "hellow" , 12 , 0);    //反相显示8X16字符串
 8000a40:	2300      	movs	r3, #0
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	230c      	movs	r3, #12
 8000a46:	4a4d      	ldr	r2, [pc, #308]	@ (8000b7c <main+0x1a8>)
 8000a48:	2103      	movs	r1, #3
 8000a4a:	202a      	movs	r0, #42	@ 0x2a
 8000a4c:	f007 fcc0 	bl	80083d0 <OLED_ShowString>

    //RF24L01引脚初始化
    NRF24L01_Gpio_Init();
 8000a50:	f000 fc78 	bl	8001344 <NRF24L01_Gpio_Init>

    //检测nRF24L01
    while (NRF24L01_check_DMA() == 0);
 8000a54:	bf00      	nop
 8000a56:	f000 fab5 	bl	8000fc4 <NRF24L01_check_DMA>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0fa      	beq.n	8000a56 <main+0x82>
    RF24L01_Init_DMA();
 8000a60:	f000 fc8c 	bl	800137c <RF24L01_Init_DMA>
    RF24L01_Set_Mode_DMA(MODE_TX);        //发送模式
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 fb3d 	bl	80010e4 <RF24L01_Set_Mode_DMA>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4944      	ldr	r1, [pc, #272]	@ (8000b80 <main+0x1ac>)
 8000a6e:	4842      	ldr	r0, [pc, #264]	@ (8000b78 <main+0x1a4>)
 8000a70:	f001 f968 	bl	8001d44 <HAL_ADC_Start_DMA>
        if (timerflag >= 1)
 8000a74:	4b43      	ldr	r3, [pc, #268]	@ (8000b84 <main+0x1b0>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d02c      	beq.n	8000ad8 <main+0x104>
        {

            if ((NRF24L01_TxPacket_DMA((uint8_t*) tx_buffer , strlen(tx_buffer)) == TX_OK))
 8000a7e:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <main+0x1b4>)
 8000a80:	f7ff fb64 	bl	800014c <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	483f      	ldr	r0, [pc, #252]	@ (8000b88 <main+0x1b4>)
 8000a8c:	f000 fb82 	bl	8001194 <NRF24L01_TxPacket_DMA>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b20      	cmp	r3, #32
 8000a94:	d103      	bne.n	8000a9e <main+0xca>
            {
                // 发送成功处理
//                HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
                timerflag = 0; // 清除标志
 8000a96:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <main+0x1b0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e01c      	b.n	8000ad8 <main+0x104>

            }
            else
            {
                if (clean >= 18)
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <main+0x1b8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b11      	cmp	r3, #17
 8000aa4:	d906      	bls.n	8000ab4 <main+0xe0>
                {
                    TX_Errow++;
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8000b90 <main+0x1bc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <main+0x1bc>)
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e002      	b.n	8000aba <main+0xe6>
                }
                else
                    TX_Errow = 0;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <main+0x1bc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
                if (TX_Errow >= 2)
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <main+0x1bc>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d90a      	bls.n	8000ad8 <main+0x104>
                {
                    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
 8000ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac6:	4833      	ldr	r0, [pc, #204]	@ (8000b94 <main+0x1c0>)
 8000ac8:	f002 fc88 	bl	80033dc <HAL_GPIO_TogglePin>
                    TX_Errow = 0;
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <main+0x1bc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
                    conversion = 1;
 8000ad2:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <main+0x1c4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
                }
            }

        }
        if (clean >= 15 && conversion == 1)
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b8c <main+0x1b8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b0e      	cmp	r3, #14
 8000ade:	d925      	bls.n	8000b2c <main+0x158>
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <main+0x1c4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d121      	bne.n	8000b2c <main+0x158>
        {
//            HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
            memset(g_RF24L01RxBuffer , 0 , sizeof(g_RF24L01RxBuffer)); // 清空接收缓冲区
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	482b      	ldr	r0, [pc, #172]	@ (8000b9c <main+0x1c8>)
 8000aee:	f007 fd17 	bl	8008520 <memset>
            RF24L01_Set_Mode_DMA(MODE_RX);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 faf6 	bl	80010e4 <RF24L01_Set_Mode_DMA>
            while (0 == NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)); // 接收字节
 8000af8:	bf00      	nop
 8000afa:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <main+0x1c8>)
 8000afc:	f000 fbca 	bl	8001294 <NRF24L01_RxPacket_DMA>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f9      	beq.n	8000afa <main+0x126>
            OLED_ShowString(40 , 2 , g_RF24L01RxBuffer , 12 , 0);
 8000b06:	2300      	movs	r3, #0
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	4a23      	ldr	r2, [pc, #140]	@ (8000b9c <main+0x1c8>)
 8000b0e:	2102      	movs	r1, #2
 8000b10:	2028      	movs	r0, #40	@ 0x28
 8000b12:	f007 fc5d 	bl	80083d0 <OLED_ShowString>
            memset(g_RF24L01RxBuffer , 0 , sizeof(g_RF24L01RxBuffer)); // 清空接收缓冲区
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4820      	ldr	r0, [pc, #128]	@ (8000b9c <main+0x1c8>)
 8000b1c:	f007 fd00 	bl	8008520 <memset>
            RF24L01_Set_Mode_DMA(MODE_TX); // 发送模式
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fadf 	bl	80010e4 <RF24L01_Set_Mode_DMA>

//            OLED_Clear();

            conversion = 0;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <main+0x1c4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
        }
        OLED_ShowString(0 , 0 , remode1 , 12 , 0);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	230c      	movs	r3, #12
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <main+0x1cc>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f007 fc4a 	bl	80083d0 <OLED_ShowString>
        OLED_ShowString(64 , 0 , remode2 , 12 , 0);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	230c      	movs	r3, #12
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <main+0x1d0>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	2040      	movs	r0, #64	@ 0x40
 8000b48:	f007 fc42 	bl	80083d0 <OLED_ShowString>

        if (clean >= 15 && i == 0) //oled刷新15次后显示
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <main+0x1b8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d98a      	bls.n	8000a6a <main+0x96>
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d187      	bne.n	8000a6a <main+0x96>
        {
            OLED_Clear();
 8000b5a:	f007 fb39 	bl	80081d0 <OLED_Clear>
            i = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	71fb      	strb	r3, [r7, #7]

            HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13 , 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <main+0x1c0>)
 8000b6a:	f002 fc1f 	bl	80033ac <HAL_GPIO_WritePin>
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000b6e:	e77c      	b.n	8000a6a <main+0x96>
 8000b70:	200003c8 	.word	0x200003c8
 8000b74:	20000298 	.word	0x20000298
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	08008e6c 	.word	0x08008e6c
 8000b80:	20000284 	.word	0x20000284
 8000b84:	20000294 	.word	0x20000294
 8000b88:	200001e4 	.word	0x200001e4
 8000b8c:	20000480 	.word	0x20000480
 8000b90:	20000281 	.word	0x20000281
 8000b94:	40011000 	.word	0x40011000
 8000b98:	20000280 	.word	0x20000280
 8000b9c:	20000260 	.word	0x20000260
 8000ba0:	200001f8 	.word	0x200001f8
 8000ba4:	2000022c 	.word	0x2000022c

08000ba8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	@ 0x50
 8000bac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bb2:	2228      	movs	r2, #40	@ 0x28
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f007 fcb2 	bl	8008520 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be6:	2301      	movs	r3, #1
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000bf4:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fca0 	bl	8005544 <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x66>
    {
        Error_Handler();
 8000c0a:	f000 f828 	bl	8000c5e <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c1e:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct , FLASH_LATENCY_2) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 ff0c 	bl	8005a48 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000c36:	f000 f812 	bl	8000c5e <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000c3e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c42:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 f88c 	bl	8005d64 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000c52:	f000 f804 	bl	8000c5e <Error_Handler>
    }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	@ 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c62:	b672      	cpsid	i
}
 8000c64:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <Error_Handler+0x8>
	...

08000c6c <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 8000c76:	f107 020f 	add.w	r2, r7, #15
 8000c7a:	1df9      	adds	r1, r7, #7
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <drv_spi_read_write_byte+0x28>)
 8000c86:	f005 fa5d 	bl	8006144 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
    return rx_data;      //返回
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200002e4 	.word	0x200002e4

08000c98 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_StatusTypeDef status;

    // 使用DMA进行SPI传输
    status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 8000ca2:	f107 020e 	add.w	r2, r7, #14
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2301      	movs	r3, #1
 8000caa:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <drv_spi_read_write_byte_dma+0x40>)
 8000cac:	f005 fca6 	bl	80065fc <HAL_SPI_TransmitReceive_DMA>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <drv_spi_read_write_byte_dma+0x26>
    {
        // 处理错误情况
        Error_Handler();
 8000cba:	f7ff ffd0 	bl	8000c5e <Error_Handler>
    }

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cbe:	bf00      	nop
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <drv_spi_read_write_byte_dma+0x40>)
 8000cc2:	f005 febc 	bl	8006a3e <HAL_SPI_GetState>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d1f9      	bne.n	8000cc0 <drv_spi_read_write_byte_dma+0x28>

    return rx_data;
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200002e4 	.word	0x200002e4

08000cdc <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	68f9      	ldr	r1, [r7, #12]
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <drv_spi_read_write_buffer_dma+0x38>)
 8000cf2:	f005 fc83 	bl	80065fc <HAL_SPI_TransmitReceive_DMA>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
            rx_buf, len);
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cfa:	bf00      	nop
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <drv_spi_read_write_buffer_dma+0x38>)
 8000cfe:	f005 fe9e 	bl	8006a3e <HAL_SPI_GetState>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d1f9      	bne.n	8000cfc <drv_spi_read_write_buffer_dma+0x20>
    return status;
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200002e4 	.word	0x200002e4

08000d18 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	733b      	strb	r3, [r7, #12]
 8000d26:	23ff      	movs	r3, #255	@ 0xff
 8000d28:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	813b      	strh	r3, [r7, #8]

    RF24L01_SET_CS_LOW();          // 片选
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2102      	movs	r1, #2
 8000d32:	480e      	ldr	r0, [pc, #56]	@ (8000d6c <NRF24L01_Read_Reg_DMA+0x54>)
 8000d34:	f002 fb3a 	bl	80033ac <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8000d38:	f107 0208 	add.w	r2, r7, #8
 8000d3c:	f107 010c 	add.w	r1, r7, #12
 8000d40:	2302      	movs	r3, #2
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <NRF24L01_Read_Reg_DMA+0x58>)
 8000d44:	f005 fc5a 	bl	80065fc <HAL_SPI_TransmitReceive_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d48:	bf00      	nop
 8000d4a:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <NRF24L01_Read_Reg_DMA+0x58>)
 8000d4c:	f005 fe77 	bl	8006a3e <HAL_SPI_GetState>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d1f9      	bne.n	8000d4a <NRF24L01_Read_Reg_DMA+0x32>

    RF24L01_SET_CS_HIGH();         // 取消片选
 8000d56:	2201      	movs	r2, #1
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <NRF24L01_Read_Reg_DMA+0x54>)
 8000d5c:	f002 fb26 	bl	80033ac <HAL_GPIO_WritePin>

    return rx_buf[1];              // 返回接收到的数据
 8000d60:	7a7b      	ldrb	r3, [r7, #9]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	200002e4 	.word	0x200002e4

08000d74 <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b092      	sub	sp, #72	@ 0x48
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[32];  // 最大32字节
    uint8_t rx_buf[32];

    // 准备发送数据
    tx_buf[0] = NRF_READ_REG | RegAddr;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d90:	3301      	adds	r3, #1
 8000d92:	21ff      	movs	r1, #255	@ 0xff
 8000d94:	4618      	mov	r0, r3
 8000d96:	f007 fbc3 	bl	8008520 <memset>

    RF24L01_SET_CS_LOW();          // 片选
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	480f      	ldr	r0, [pc, #60]	@ (8000ddc <NRF24L01_Read_Buf_DMA+0x68>)
 8000da0:	f002 fb04 	bl	80033ac <HAL_GPIO_WritePin>

    // 使用DMA批量传输
    drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f107 0108 	add.w	r1, r7, #8
 8000db0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff91 	bl	8000cdc <drv_spi_read_write_buffer_dma>

    // 复制接收到的数据到输出缓冲区
    memcpy(pBuf, &rx_buf[1], len);
 8000dba:	79ba      	ldrb	r2, [r7, #6]
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f007 fbdf 	bl	8008588 <memcpy>

    RF24L01_SET_CS_HIGH();         // 取消片选
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <NRF24L01_Read_Buf_DMA+0x68>)
 8000dd0:	f002 faec 	bl	80033ac <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	3748      	adds	r7, #72	@ 0x48
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	733b      	strb	r3, [r7, #12]
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();      // 片选
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <NRF24L01_Write_Reg_DMA+0x58>)
 8000e04:	f002 fad2 	bl	80033ac <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480a      	ldr	r0, [pc, #40]	@ (8000e3c <NRF24L01_Write_Reg_DMA+0x5c>)
 8000e12:	f005 fb41 	bl	8006498 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e16:	bf00      	nop
 8000e18:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <NRF24L01_Write_Reg_DMA+0x5c>)
 8000e1a:	f005 fe10 	bl	8006a3e <HAL_SPI_GetState>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d1f9      	bne.n	8000e18 <NRF24L01_Write_Reg_DMA+0x38>

    RF24L01_SET_CS_HIGH();     // 取消片选
 8000e24:	2201      	movs	r2, #1
 8000e26:	2102      	movs	r1, #2
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <NRF24L01_Write_Reg_DMA+0x58>)
 8000e2a:	f002 fabf 	bl	80033ac <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	200002e4 	.word	0x200002e4

08000e40 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint8_t Status;

    RF24L01_SET_CS_LOW();      //片选
 8000e46:	2200      	movs	r2, #0
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <NRF24L01_Read_Status_Register+0x30>)
 8000e4c:	f002 faae 	bl	80033ac <HAL_GPIO_WritePin>

    Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8000e50:	2007      	movs	r0, #7
 8000e52:	f7ff ff0b 	bl	8000c6c <drv_spi_read_write_byte>
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]

    RF24L01_SET_CS_HIGH();     //取消片选
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <NRF24L01_Read_Status_Register+0x30>)
 8000e60:	f002 faa4 	bl	80033ac <HAL_GPIO_WritePin>

    return Status;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000e84:	71fb      	strb	r3, [r7, #7]
    status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 8000e86:	f7ff ffdb 	bl	8000e40 <NRF24L01_Read_Status_Register>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2102      	movs	r1, #2
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000e94:	f002 fa8a 	bl	80033ac <HAL_GPIO_WritePin>
    drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8000e98:	2027      	movs	r0, #39	@ 0x27
 8000e9a:	f7ff fee7 	bl	8000c6c <drv_spi_read_write_byte>
    drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fee0 	bl	8000c6c <drv_spi_read_write_byte>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000eb2:	f002 fa7b 	bl	80033ac <HAL_GPIO_WritePin>

    return NRF24L01_Read_Status_Register();                   // 返回新状态
 8000eb6:	f7ff ffc3 	bl	8000e40 <NRF24L01_Read_Status_Register>
 8000eba:	4603      	mov	r3, r0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010c00 	.word	0x40010c00

08000ec8 <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[6];  // 命令+5字节地址

    len = (len > 5) ? 5 : len;
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	bf28      	it	cs
 8000eda:	2305      	movcs	r3, #5
 8000edc:	70fb      	strb	r3, [r7, #3]
    tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8000ede:	2330      	movs	r3, #48	@ 0x30
 8000ee0:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, len);
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	3301      	adds	r3, #1
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f007 fb4b 	bl	8008588 <memcpy>

    RF24L01_SET_CS_LOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8000ef8:	f002 fa58 	bl	80033ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8000f0c:	f005 fac4 	bl	8006498 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f10:	bf00      	nop
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8000f14:	f005 fd93 	bl	8006a3e <HAL_SPI_GetState>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d1f9      	bne.n	8000f12 <NRF24L01_Set_TxAddr_DMA+0x4a>
    RF24L01_SET_CS_HIGH();
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8000f24:	f002 fa42 	bl	80033ac <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	200002e4 	.word	0x200002e4

08000f38 <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[6];  // 命令+5字节地址

    Len = (Len > 5) ? 5 : Len;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	bf28      	it	cs
 8000f4e:	2305      	movcs	r3, #5
 8000f50:	71bb      	strb	r3, [r7, #6]
    PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	bf28      	it	cs
 8000f58:	2305      	movcs	r3, #5
 8000f5a:	71fb      	strb	r3, [r7, #7]

    tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	330a      	adds	r3, #10
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, Len);
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	3301      	adds	r3, #1
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f007 fb05 	bl	8008588 <memcpy>

    RF24L01_SET_CS_LOW();
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2102      	movs	r1, #2
 8000f82:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <NRF24L01_Set_RxAddr_DMA+0x84>)
 8000f84:	f002 fa12 	bl	80033ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480a      	ldr	r0, [pc, #40]	@ (8000fc0 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8000f98:	f005 fa7e 	bl	8006498 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f9c:	bf00      	nop
 8000f9e:	4808      	ldr	r0, [pc, #32]	@ (8000fc0 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8000fa0:	f005 fd4d 	bl	8006a3e <HAL_SPI_GetState>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d1f9      	bne.n	8000f9e <NRF24L01_Set_RxAddr_DMA+0x66>
    RF24L01_SET_CS_HIGH();
 8000faa:	2201      	movs	r2, #1
 8000fac:	2102      	movs	r1, #2
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <NRF24L01_Set_RxAddr_DMA+0x84>)
 8000fb0:	f002 f9fc 	bl	80033ac <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	200002e4 	.word	0x200002e4

08000fc4 <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 8000fca:	4a42      	ldr	r2, [pc, #264]	@ (80010d4 <NRF24L01_check_DMA+0x110>)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd4:	6018      	str	r0, [r3, #0]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	7019      	strb	r1, [r3, #0]
    uint8_t tx_buf[6], rx_buf[6];
    uint32_t start_time = HAL_GetTick();
 8000fda:	f000 fdad 	bl	8001b38 <HAL_GetTick>
 8000fde:	61b8      	str	r0, [r7, #24]

    while (1)
    {
        // 使用DMA写入地址
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8000fe0:	2330      	movs	r3, #48	@ 0x30
 8000fe2:	723b      	strb	r3, [r7, #8]
        memcpy(&tx_buf[1], buf, 5);
 8000fe4:	f107 0309 	add.w	r3, r7, #9
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	6810      	ldr	r0, [r2, #0]
 8000fee:	6018      	str	r0, [r3, #0]
 8000ff0:	7912      	ldrb	r2, [r2, #4]
 8000ff2:	711a      	strb	r2, [r3, #4]

        RF24L01_SET_CS_LOW();
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4837      	ldr	r0, [pc, #220]	@ (80010d8 <NRF24L01_check_DMA+0x114>)
 8000ffa:	f002 f9d7 	bl	80033ac <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2206      	movs	r2, #6
 8001004:	4619      	mov	r1, r3
 8001006:	4835      	ldr	r0, [pc, #212]	@ (80010dc <NRF24L01_check_DMA+0x118>)
 8001008:	f005 fa46 	bl	8006498 <HAL_SPI_Transmit_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800100c:	bf00      	nop
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <NRF24L01_check_DMA+0x118>)
 8001010:	f005 fd15 	bl	8006a3e <HAL_SPI_GetState>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1f9      	bne.n	800100e <NRF24L01_check_DMA+0x4a>
        RF24L01_SET_CS_HIGH();
 800101a:	2201      	movs	r2, #1
 800101c:	2102      	movs	r1, #2
 800101e:	482e      	ldr	r0, [pc, #184]	@ (80010d8 <NRF24L01_check_DMA+0x114>)
 8001020:	f002 f9c4 	bl	80033ac <HAL_GPIO_WritePin>

        // 使用DMA读取地址
        tx_buf[0] = NRF_READ_REG | TX_ADDR;
 8001024:	2310      	movs	r3, #16
 8001026:	723b      	strb	r3, [r7, #8]
        memset(&tx_buf[1], 0xFF, 5);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	3301      	adds	r3, #1
 800102e:	2205      	movs	r2, #5
 8001030:	21ff      	movs	r1, #255	@ 0xff
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fa74 	bl	8008520 <memset>

        RF24L01_SET_CS_LOW();
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	4826      	ldr	r0, [pc, #152]	@ (80010d8 <NRF24L01_check_DMA+0x114>)
 800103e:	f002 f9b5 	bl	80033ac <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 8001042:	463a      	mov	r2, r7
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	2306      	movs	r3, #6
 800104a:	4824      	ldr	r0, [pc, #144]	@ (80010dc <NRF24L01_check_DMA+0x118>)
 800104c:	f005 fad6 	bl	80065fc <HAL_SPI_TransmitReceive_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001050:	bf00      	nop
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <NRF24L01_check_DMA+0x118>)
 8001054:	f005 fcf3 	bl	8006a3e <HAL_SPI_GetState>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d1f9      	bne.n	8001052 <NRF24L01_check_DMA+0x8e>
        RF24L01_SET_CS_HIGH();
 800105e:	2201      	movs	r2, #1
 8001060:	2102      	movs	r1, #2
 8001062:	481d      	ldr	r0, [pc, #116]	@ (80010d8 <NRF24L01_check_DMA+0x114>)
 8001064:	f002 f9a2 	bl	80033ac <HAL_GPIO_WritePin>

        // 比较结果
        for (i = 0; i < 5; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	77fb      	strb	r3, [r7, #31]
 800106c:	e00f      	b.n	800108e <NRF24L01_check_DMA+0xca>
        {
            if (buf[i] != rx_buf[i + 1])
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	3320      	adds	r3, #32
 8001072:	443b      	add	r3, r7
 8001074:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	3301      	adds	r3, #1
 800107c:	3320      	adds	r3, #32
 800107e:	443b      	add	r3, r7
 8001080:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001084:	429a      	cmp	r2, r3
 8001086:	d106      	bne.n	8001096 <NRF24L01_check_DMA+0xd2>
        for (i = 0; i < 5; i++)
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d9ec      	bls.n	800106e <NRF24L01_check_DMA+0xaa>
 8001094:	e000      	b.n	8001098 <NRF24L01_check_DMA+0xd4>
            {
                break;
 8001096:	bf00      	nop
            }
        }

        if (i == 5)
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b05      	cmp	r3, #5
 800109c:	d101      	bne.n	80010a2 <NRF24L01_check_DMA+0xde>
        {
            return 1; // 检测成功
 800109e:	2301      	movs	r3, #1
 80010a0:	e013      	b.n	80010ca <NRF24L01_check_DMA+0x106>
        }

        // 超时处理(5秒超时)
        if (HAL_GetTick() - start_time > 5000)
 80010a2:	f000 fd49 	bl	8001b38 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <NRF24L01_check_DMA+0xf4>
        {
            return 0; // 检测失败
 80010b4:	2300      	movs	r3, #0
 80010b6:	e008      	b.n	80010ca <NRF24L01_check_DMA+0x106>
        }

        // 错误指示
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <NRF24L01_check_DMA+0x11c>)
 80010be:	f002 f98d 	bl	80033dc <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	@ 0x64
 80010c4:	f000 fd42 	bl	8001b4c <HAL_Delay>
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80010c8:	e78a      	b.n	8000fe0 <NRF24L01_check_DMA+0x1c>
    }
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08008e90 	.word	0x08008e90
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	200002e4 	.word	0x200002e4
 80010e0:	40011000 	.word	0x40011000

080010e4 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2], rx_buf[2];

    // 使用DMA读取CONFIG寄存器
    tx_buf[0] = NRF_READ_REG | CONFIG;
 80010ee:	2300      	movs	r3, #0
 80010f0:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0xFF;
 80010f2:	23ff      	movs	r3, #255	@ 0xff
 80010f4:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 80010f6:	2200      	movs	r2, #0
 80010f8:	2102      	movs	r1, #2
 80010fa:	4824      	ldr	r0, [pc, #144]	@ (800118c <RF24L01_Set_Mode_DMA+0xa8>)
 80010fc:	f002 f956 	bl	80033ac <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	f107 010c 	add.w	r1, r7, #12
 8001108:	2302      	movs	r3, #2
 800110a:	4821      	ldr	r0, [pc, #132]	@ (8001190 <RF24L01_Set_Mode_DMA+0xac>)
 800110c:	f005 fa76 	bl	80065fc <HAL_SPI_TransmitReceive_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001110:	bf00      	nop
 8001112:	481f      	ldr	r0, [pc, #124]	@ (8001190 <RF24L01_Set_Mode_DMA+0xac>)
 8001114:	f005 fc93 	bl	8006a3e <HAL_SPI_GetState>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d1f9      	bne.n	8001112 <RF24L01_Set_Mode_DMA+0x2e>
    RF24L01_SET_CS_HIGH();
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	481a      	ldr	r0, [pc, #104]	@ (800118c <RF24L01_Set_Mode_DMA+0xa8>)
 8001124:	f002 f942 	bl	80033ac <HAL_GPIO_WritePin>

    uint8_t controlreg = rx_buf[1];
 8001128:	7a7b      	ldrb	r3, [r7, #9]
 800112a:	73fb      	strb	r3, [r7, #15]

    // 修改模式位
    if (Mode == MODE_TX)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <RF24L01_Set_Mode_DMA+0x58>
    {
        controlreg &= ~(1 << PRIM_RX);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e006      	b.n	800114a <RF24L01_Set_Mode_DMA+0x66>
    }
    else if (Mode == MODE_RX)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d103      	bne.n	800114a <RF24L01_Set_Mode_DMA+0x66>
    {
        controlreg |= (1 << PRIM_RX);
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
    }

    // 使用DMA写入CONFIG寄存器
    tx_buf[0] = NRF_WRITE_REG | CONFIG;
 800114a:	2320      	movs	r3, #32
 800114c:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = controlreg;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 8001152:	2200      	movs	r2, #0
 8001154:	2102      	movs	r1, #2
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <RF24L01_Set_Mode_DMA+0xa8>)
 8001158:	f002 f928 	bl	80033ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2202      	movs	r2, #2
 8001162:	4619      	mov	r1, r3
 8001164:	480a      	ldr	r0, [pc, #40]	@ (8001190 <RF24L01_Set_Mode_DMA+0xac>)
 8001166:	f005 f997 	bl	8006498 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800116a:	bf00      	nop
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <RF24L01_Set_Mode_DMA+0xac>)
 800116e:	f005 fc66 	bl	8006a3e <HAL_SPI_GetState>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d1f9      	bne.n	800116c <RF24L01_Set_Mode_DMA+0x88>
    RF24L01_SET_CS_HIGH();
 8001178:	2201      	movs	r2, #1
 800117a:	2102      	movs	r1, #2
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <RF24L01_Set_Mode_DMA+0xa8>)
 800117e:	f002 f915 	bl	80033ac <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010c00 	.word	0x40010c00
 8001190:	200002e4 	.word	0x200002e4

08001194 <NRF24L01_TxPacket_DMA>:
 *         MAX_TX：达到最大重发次数
 *         TX_OK：发送完成
 *         0xFF:其他原因
 */
uint8_t NRF24L01_TxPacket_DMA(uint8_t *txbuf, uint8_t Length)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
    uint8_t l_Status = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]
    uint32_t start_time = HAL_GetTick();
 80011a4:	f000 fcc8 	bl	8001b38 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]
    uint8_t tx_cmd = WR_TX_PLOAD;
 80011aa:	23a0      	movs	r3, #160	@ 0xa0
 80011ac:	73fb      	strb	r3, [r7, #15]

    // 清空TX FIFO
    RF24L01_SET_CS_LOW();
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	4835      	ldr	r0, [pc, #212]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 80011b4:	f002 f8fa 	bl	80033ac <HAL_GPIO_WritePin>
    drv_spi_read_write_byte_dma(FLUSH_TX);
 80011b8:	20e1      	movs	r0, #225	@ 0xe1
 80011ba:	f7ff fd6d 	bl	8000c98 <drv_spi_read_write_byte_dma>
    RF24L01_SET_CS_HIGH();
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	4831      	ldr	r0, [pc, #196]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 80011c4:	f002 f8f2 	bl	80033ac <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	482e      	ldr	r0, [pc, #184]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 80011ce:	f002 f8ed 	bl	80033ac <HAL_GPIO_WritePin>

    // 使用DMA发送数据
    RF24L01_SET_CS_LOW();
 80011d2:	2200      	movs	r2, #0
 80011d4:	2102      	movs	r1, #2
 80011d6:	482c      	ldr	r0, [pc, #176]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 80011d8:	f002 f8e8 	bl	80033ac <HAL_GPIO_WritePin>

    // 先发送命令字节
    drv_spi_read_write_byte_dma(tx_cmd);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fd5a 	bl	8000c98 <drv_spi_read_write_byte_dma>

    // 然后使用DMA发送数据负载
    HAL_SPI_Transmit_DMA(&hspi1, txbuf, Length);
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4827      	ldr	r0, [pc, #156]	@ (800128c <NRF24L01_TxPacket_DMA+0xf8>)
 80011ee:	f005 f953 	bl	8006498 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011f2:	bf00      	nop
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <NRF24L01_TxPacket_DMA+0xf8>)
 80011f6:	f005 fc22 	bl	8006a3e <HAL_SPI_GetState>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d1f9      	bne.n	80011f4 <NRF24L01_TxPacket_DMA+0x60>

    RF24L01_SET_CS_HIGH();
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4820      	ldr	r0, [pc, #128]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 8001206:	f002 f8d1 	bl	80033ac <HAL_GPIO_WritePin>
    RF24L01_SET_CE_HIGH();  // 启动发送
 800120a:	2201      	movs	r2, #1
 800120c:	2101      	movs	r1, #1
 800120e:	481e      	ldr	r0, [pc, #120]	@ (8001288 <NRF24L01_TxPacket_DMA+0xf4>)
 8001210:	f002 f8cc 	bl	80033ac <HAL_GPIO_WritePin>

    // 等待传输完成或超时
    while (RF24L01_GET_IRQ_STATUS() != 0)
 8001214:	e011      	b.n	800123a <NRF24L01_TxPacket_DMA+0xa6>
    {
        if (HAL_GetTick() - start_time >100)  // 500ms超时
 8001216:	f000 fc8f 	bl	8001b38 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	@ 0x64
 8001222:	d907      	bls.n	8001234 <NRF24L01_TxPacket_DMA+0xa0>
        {
            NRF24L01_Gpio_Init();
 8001224:	f000 f88e 	bl	8001344 <NRF24L01_Gpio_Init>
            RF24L01_Init_DMA();
 8001228:	f000 f8a8 	bl	800137c <RF24L01_Init_DMA>
            RF24L01_Set_Mode_DMA(MODE_TX);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff59 	bl	80010e4 <RF24L01_Set_Mode_DMA>
            break;
 8001232:	e008      	b.n	8001246 <NRF24L01_TxPacket_DMA+0xb2>
        }
        HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 fc89 	bl	8001b4c <HAL_Delay>
    while (RF24L01_GET_IRQ_STATUS() != 0)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <NRF24L01_TxPacket_DMA+0xfc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b10      	cmp	r3, #16
 8001244:	d0e7      	beq.n	8001216 <NRF24L01_TxPacket_DMA+0x82>
    }

    // 读取并清除状态
    l_Status = NRF24L01_Read_Reg_DMA(STATUS);
 8001246:	2007      	movs	r0, #7
 8001248:	f7ff fd66 	bl	8000d18 <NRF24L01_Read_Reg_DMA>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
    NRF24L01_Write_Reg_DMA(STATUS, l_Status);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	4619      	mov	r1, r3
 8001254:	2007      	movs	r0, #7
 8001256:	f7ff fdc3 	bl	8000de0 <NRF24L01_Write_Reg_DMA>

    if (l_Status & MAX_TX) // 达到最大重发次数
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <NRF24L01_TxPacket_DMA+0xdc>
    {
        NRF24L01_Write_Reg_DMA(FLUSH_TX, 0xff);
 8001264:	21ff      	movs	r1, #255	@ 0xff
 8001266:	20e1      	movs	r0, #225	@ 0xe1
 8001268:	f7ff fdba 	bl	8000de0 <NRF24L01_Write_Reg_DMA>
        return MAX_TX;
 800126c:	2310      	movs	r3, #16
 800126e:	e007      	b.n	8001280 <NRF24L01_TxPacket_DMA+0xec>
    }
    if (l_Status & TX_OK)  // 发送完成
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <NRF24L01_TxPacket_DMA+0xea>
    {
        return TX_OK;
 800127a:	2320      	movs	r3, #32
 800127c:	e000      	b.n	8001280 <NRF24L01_TxPacket_DMA+0xec>
    }

    return 0xFF;  // 其他原因发送失败
 800127e:	23ff      	movs	r3, #255	@ 0xff
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010c00 	.word	0x40010c00
 800128c:	200002e4 	.word	0x200002e4
 8001290:	40010800 	.word	0x40010800

08001294 <NRF24L01_RxPacket_DMA>:
 *         @rxbuf:接收数据存放地址
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t l_Status = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	75fb      	strb	r3, [r7, #23]
    uint32_t start_time = HAL_GetTick();
 80012a0:	f000 fc4a 	bl	8001b38 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]
    uint8_t l_RxLength = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]

    RF24L01_SET_CS_LOW();      //片选
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	4823      	ldr	r0, [pc, #140]	@ (800133c <NRF24L01_RxPacket_DMA+0xa8>)
 80012b0:	f002 f87c 	bl	80033ac <HAL_GPIO_WritePin>
    drv_spi_read_write_byte_dma( FLUSH_RX);
 80012b4:	20e2      	movs	r0, #226	@ 0xe2
 80012b6:	f7ff fcef 	bl	8000c98 <drv_spi_read_write_byte_dma>
    RF24L01_SET_CS_HIGH();
 80012ba:	2201      	movs	r2, #1
 80012bc:	2102      	movs	r1, #2
 80012be:	481f      	ldr	r0, [pc, #124]	@ (800133c <NRF24L01_RxPacket_DMA+0xa8>)
 80012c0:	f002 f874 	bl	80033ac <HAL_GPIO_WritePin>

    // 等待传输完成或超时
        while (RF24L01_GET_IRQ_STATUS() != 0)
 80012c4:	e00e      	b.n	80012e4 <NRF24L01_RxPacket_DMA+0x50>
        {
            if (HAL_GetTick() - start_time > 100)  // 500ms超时
 80012c6:	f000 fc37 	bl	8001b38 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	@ 0x64
 80012d2:	d907      	bls.n	80012e4 <NRF24L01_RxPacket_DMA+0x50>
            {
                NRF24L01_Gpio_Init();
 80012d4:	f000 f836 	bl	8001344 <NRF24L01_Gpio_Init>
                RF24L01_Init_DMA();
 80012d8:	f000 f850 	bl	800137c <RF24L01_Init_DMA>
                RF24L01_Set_Mode_DMA(MODE_RX);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff01 	bl	80010e4 <RF24L01_Set_Mode_DMA>
                break;
 80012e2:	e005      	b.n	80012f0 <NRF24L01_RxPacket_DMA+0x5c>
        while (RF24L01_GET_IRQ_STATUS() != 0)
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <NRF24L01_RxPacket_DMA+0xac>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d0ea      	beq.n	80012c6 <NRF24L01_RxPacket_DMA+0x32>
            }

        }

    l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
 80012f0:	2007      	movs	r0, #7
 80012f2:	f7ff fd11 	bl	8000d18 <NRF24L01_Read_Reg_DMA>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]
    NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	4619      	mov	r1, r3
 80012fe:	2007      	movs	r0, #7
 8001300:	f7ff fd6e 	bl	8000de0 <NRF24L01_Write_Reg_DMA>
    if (l_Status & RX_OK)   //接收到数据
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d010      	beq.n	8001330 <NRF24L01_RxPacket_DMA+0x9c>
    {
        l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
 800130e:	2060      	movs	r0, #96	@ 0x60
 8001310:	f7ff fd02 	bl	8000d18 <NRF24L01_Read_Reg_DMA>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
        NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	461a      	mov	r2, r3
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2061      	movs	r0, #97	@ 0x61
 8001320:	f7ff fd28 	bl	8000d74 <NRF24L01_Read_Buf_DMA>
        NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 8001324:	21ff      	movs	r1, #255	@ 0xff
 8001326:	20e2      	movs	r0, #226	@ 0xe2
 8001328:	f7ff fd5a 	bl	8000de0 <NRF24L01_Write_Reg_DMA>
        return l_RxLength;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	e000      	b.n	8001332 <NRF24L01_RxPacket_DMA+0x9e>
    }

    return 0;               //没有收到数据
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40010800 	.word	0x40010800

08001344 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2101      	movs	r1, #1
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <NRF24L01_Gpio_Init+0x30>)
 800134e:	f002 f82d 	bl	80033ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2110      	movs	r1, #16
 8001356:	4808      	ldr	r0, [pc, #32]	@ (8001378 <NRF24L01_Gpio_Init+0x34>)
 8001358:	f002 f828 	bl	80033ac <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();      //??24L01
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <NRF24L01_Gpio_Init+0x30>)
 8001362:	f002 f823 	bl	80033ac <HAL_GPIO_WritePin>
    RF24L01_SET_CS_HIGH();     //??SPI??
 8001366:	2201      	movs	r2, #1
 8001368:	2102      	movs	r1, #2
 800136a:	4802      	ldr	r0, [pc, #8]	@ (8001374 <NRF24L01_Gpio_Init+0x30>)
 800136c:	f002 f81e 	bl	80033ac <HAL_GPIO_WritePin>

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010c00 	.word	0x40010c00
 8001378:	40010800 	.word	0x40010800

0800137c <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
    uint8_t addr[5] = { INIT_ADDR };
 8001382:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <RF24L01_Init_DMA+0xbc>)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138a:	6018      	str	r0, [r3, #0]
 800138c:	3304      	adds	r3, #4
 800138e:	7019      	strb	r1, [r3, #0]

    // 初始化状态
    RF24L01_SET_CE_HIGH();
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	4829      	ldr	r0, [pc, #164]	@ (800143c <RF24L01_Init_DMA+0xc0>)
 8001396:	f002 f809 	bl	80033ac <HAL_GPIO_WritePin>
    NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 800139a:	2070      	movs	r0, #112	@ 0x70
 800139c:	f7ff fd6a 	bl	8000e74 <NRF24L01_Clear_IRQ_Flag>
                    AW_5BYTES },
            { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
                    RF_SETUP, 0x26 } };

    // 使用DMA批量写入寄存器配置
    for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e036      	b.n	8001414 <RF24L01_Init_DMA+0x98>
    {
        uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80013a6:	4a26      	ldr	r2, [pc, #152]	@ (8001440 <RF24L01_Init_DMA+0xc4>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	703b      	strb	r3, [r7, #0]
                init_config[i].val };
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <RF24L01_Init_DMA+0xc4>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	785b      	ldrb	r3, [r3, #1]
        uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80013c0:	707b      	strb	r3, [r7, #1]

        RF24L01_SET_CS_LOW();
 80013c2:	2200      	movs	r2, #0
 80013c4:	2102      	movs	r1, #2
 80013c6:	481d      	ldr	r0, [pc, #116]	@ (800143c <RF24L01_Init_DMA+0xc0>)
 80013c8:	f001 fff0 	bl	80033ac <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80013cc:	463b      	mov	r3, r7
 80013ce:	2202      	movs	r2, #2
 80013d0:	4619      	mov	r1, r3
 80013d2:	481c      	ldr	r0, [pc, #112]	@ (8001444 <RF24L01_Init_DMA+0xc8>)
 80013d4:	f005 f860 	bl	8006498 <HAL_SPI_Transmit_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d8:	bf00      	nop
 80013da:	481a      	ldr	r0, [pc, #104]	@ (8001444 <RF24L01_Init_DMA+0xc8>)
 80013dc:	f005 fb2f 	bl	8006a3e <HAL_SPI_GetState>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d1f9      	bne.n	80013da <RF24L01_Init_DMA+0x5e>
        RF24L01_SET_CS_HIGH();
 80013e6:	2201      	movs	r2, #1
 80013e8:	2102      	movs	r1, #2
 80013ea:	4814      	ldr	r0, [pc, #80]	@ (800143c <RF24L01_Init_DMA+0xc0>)
 80013ec:	f001 ffde 	bl	80033ac <HAL_GPIO_WritePin>

        // 添加必要的延时(某些寄存器写入后需要稳定时间)
        if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
 80013f0:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <RF24L01_Init_DMA+0xc4>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <RF24L01_Init_DMA+0x8c>
 80013fc:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <RF24L01_Init_DMA+0xc4>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d102      	bne.n	800140e <RF24L01_Init_DMA+0x92>
        {
            HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fb9f 	bl	8001b4c <HAL_Delay>
    for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d9c5      	bls.n	80013a6 <RF24L01_Init_DMA+0x2a>
        }
    }

    // 设置地址(使用DMA版本)
    NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2105      	movs	r1, #5
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fd52 	bl	8000ec8 <NRF24L01_Set_TxAddr_DMA>
    NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2205      	movs	r2, #5
 8001428:	4619      	mov	r1, r3
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fd84 	bl	8000f38 <NRF24L01_Set_RxAddr_DMA>

    // 可选的速度和功率设置
    // NRF24L01_Set_Speed_DMA(SPEED_1M);
    // NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	08008e98 	.word	0x08008e98
 800143c:	40010c00 	.word	0x40010c00
 8001440:	08008ea0 	.word	0x08008ea0
 8001444:	200002e4 	.word	0x200002e4

08001448 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_SPI1_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <MX_SPI1_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_SPI1_Init+0x64>)
 800147c:	2218      	movs	r2, #24
 800147e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_SPI1_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_SPI1_Init+0x64>)
 800149a:	f004 fdcf 	bl	800603c <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014a4:	f7ff fbdb 	bl	8000c5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200002e4 	.word	0x200002e4
 80014b0:	40013000 	.word	0x40013000

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a47      	ldr	r2, [pc, #284]	@ (80015ec <HAL_SPI_MspInit+0x138>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	f040 8086 	bne.w	80015e2 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	4b46      	ldr	r3, [pc, #280]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a45      	ldr	r2, [pc, #276]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a3f      	ldr	r2, [pc, #252]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <HAL_SPI_MspInit+0x13c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001506:	23a0      	movs	r3, #160	@ 0xa0
 8001508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4836      	ldr	r0, [pc, #216]	@ (80015f4 <HAL_SPI_MspInit+0x140>)
 800151a:	f001 fdc3 	bl	80030a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800151e:	2340      	movs	r3, #64	@ 0x40
 8001520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	4830      	ldr	r0, [pc, #192]	@ (80015f4 <HAL_SPI_MspInit+0x140>)
 8001532:	f001 fdb7 	bl	80030a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001536:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001538:	4a30      	ldr	r2, [pc, #192]	@ (80015fc <HAL_SPI_MspInit+0x148>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001548:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 800154a:	2280      	movs	r2, #128	@ 0x80
 800154c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800155a:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001562:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001566:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001568:	4823      	ldr	r0, [pc, #140]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 800156a:	f001 f96f 	bl	800284c <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001574:	f7ff fb73 	bl	8000c5e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 800157c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <HAL_SPI_MspInit+0x144>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001584:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_SPI_MspInit+0x150>)
 8001588:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 800158c:	2210      	movs	r2, #16
 800158e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159c:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015b6:	4812      	ldr	r0, [pc, #72]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015b8:	f001 f948 	bl	800284c <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80015c2:	f7ff fb4c 	bl	8000c5e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015ca:	649a      	str	r2, [r3, #72]	@ 0x48
 80015cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <HAL_SPI_MspInit+0x14c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2023      	movs	r0, #35	@ 0x23
 80015d8:	f001 f8f5 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015dc:	2023      	movs	r0, #35	@ 0x23
 80015de:	f001 f90e 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40013000 	.word	0x40013000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	2000033c 	.word	0x2000033c
 80015fc:	4002001c 	.word	0x4002001c
 8001600:	20000380 	.word	0x20000380
 8001604:	40020030 	.word	0x40020030

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_MspInit+0x7c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_MspInit+0x7c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_MspInit+0x7c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_MspInit+0x7c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a16      	ldr	r2, [pc, #88]	@ (8001684 <HAL_MspInit+0x7c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <HAL_MspInit+0x7c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2004      	movs	r0, #4
 8001644:	f001 f8bf 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001648:	2004      	movs	r0, #4
 800164a:	f001 f8d8 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2005      	movs	r0, #5
 8001654:	f001 f8b7 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001658:	2005      	movs	r0, #5
 800165a:	f001 f8d0 	bl	80027fe <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_MspInit+0x80>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_MspInit+0x80>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f000 fa1a 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80016e8:	f001 fb5e 	bl	8002da8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Channel1_IRQHandler+0x10>)
 8001702:	f001 fa11 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000c4 	.word	0x200000c4

08001710 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Channel2_IRQHandler+0x10>)
 8001716:	f001 fa07 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000033c 	.word	0x2000033c

08001724 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Channel3_IRQHandler+0x10>)
 800172a:	f001 f9fd 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000380 	.word	0x20000380

08001738 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <DMA1_Channel6_IRQHandler+0x10>)
 800173e:	f001 f9f3 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001a0 	.word	0x200001a0

0800174c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <DMA1_Channel7_IRQHandler+0x10>)
 8001752:	f001 f9e9 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000015c 	.word	0x2000015c

08001760 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <ADC1_2_IRQHandler+0x10>)
 8001766:	f000 fbcb 	bl	8001f00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000094 	.word	0x20000094

08001774 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM1_UP_IRQHandler+0x10>)
 800177a:	f005 fc65 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003c8 	.word	0x200003c8

08001788 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <I2C1_EV_IRQHandler+0x10>)
 800178e:	f002 f8bb 	bl	8003908 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000108 	.word	0x20000108

0800179c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <I2C1_ER_IRQHandler+0x10>)
 80017a2:	f002 fa22 	bl	8003bea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000108 	.word	0x20000108

080017b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <SPI1_IRQHandler+0x10>)
 80017b6:	f005 f81d 	bl	80067f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002e4 	.word	0x200002e4

080017c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <USART1_IRQHandler+0x10>)
 80017ca:	f005 ffdd 	bl	8007788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000410 	.word	0x20000410

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f006 fe92 	bl	8008530 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20005000 	.word	0x20005000
 8001838:	00000400 	.word	0x00000400
 800183c:	200003c4 	.word	0x200003c4
 8001840:	200005d0 	.word	0x200005d0

08001844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <MX_TIM1_Init+0x9c>)
 800186e:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_TIM1_Init+0x9c>)
 8001874:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <MX_TIM1_Init+0x9c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_TIM1_Init+0x9c>)
 8001882:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MX_TIM1_Init+0x9c>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_TIM1_Init+0x9c>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_TIM1_Init+0x9c>)
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189a:	4814      	ldr	r0, [pc, #80]	@ (80018ec <MX_TIM1_Init+0x9c>)
 800189c:	f005 fb33 	bl	8006f06 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018a6:	f7ff f9da 	bl	8000c5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <MX_TIM1_Init+0x9c>)
 80018b8:	f005 fcb6 	bl	8007228 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018c2:	f7ff f9cc 	bl	8000c5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <MX_TIM1_Init+0x9c>)
 80018d4:	f005 fe98 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018de:	f7ff f9be 	bl	8000c5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200003c8 	.word	0x200003c8
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_TIM_Base_MspInit+0x44>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d113      	bne.n	800192e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_TIM_Base_MspInit+0x48>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_TIM_Base_MspInit+0x48>)
 800190c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001910:	6193      	str	r3, [r2, #24]
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_TIM_Base_MspInit+0x48>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2019      	movs	r0, #25
 8001924:	f000 ff4f 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001928:	2019      	movs	r0, #25
 800192a:	f000 ff68 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40021000 	.word	0x40021000

08001940 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_USART1_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 800194c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_USART1_UART_Init+0x4c>)
 8001978:	f005 feb6 	bl	80076e8 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001982:	f7ff f96c 	bl	8000c5e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000410 	.word	0x20000410
 8001990:	40013800 	.word	0x40013800

08001994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a20      	ldr	r2, [pc, #128]	@ (8001a30 <HAL_UART_MspInit+0x9c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d139      	bne.n	8001a28 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_UART_MspInit+0xa0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	480f      	ldr	r0, [pc, #60]	@ (8001a38 <HAL_UART_MspInit+0xa4>)
 80019fa:	f001 fb53 	bl	80030a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <HAL_UART_MspInit+0xa4>)
 8001a14:	f001 fb46 	bl	80030a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f000 fed2 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a22:	2025      	movs	r0, #37	@ 0x25
 8001a24:	f000 feeb 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010800 	.word	0x40010800

08001a3c <Reset_Handler>:
 8001a3c:	f7ff ff02 	bl	8001844 <SystemInit>
 8001a40:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <LoopFillZerobss+0xe>)
 8001a42:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <LoopFillZerobss+0x12>)
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x16>)
 8001a46:	2300      	movs	r3, #0
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:
 8001a4a:	58d4      	ldr	r4, [r2, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:
 8001a50:	18c4      	adds	r4, r0, r3
 8001a52:	428c      	cmp	r4, r1
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <LoopFillZerobss+0x1a>)
 8001a58:	4c09      	ldr	r4, [pc, #36]	@ (8001a80 <LoopFillZerobss+0x1e>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:
 8001a62:	42a2      	cmp	r2, r4
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>
 8001a66:	f006 fd69 	bl	800853c <__libc_init_array>
 8001a6a:	f7fe ffb3 	bl	80009d4 <main>
 8001a6e:	4770      	bx	lr
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000074 	.word	0x20000074
 8001a78:	08009740 	.word	0x08009740
 8001a7c:	20000078 	.word	0x20000078
 8001a80:	200005cc 	.word	0x200005cc

08001a84 <CAN1_RX1_IRQHandler>:
 8001a84:	e7fe      	b.n	8001a84 <CAN1_RX1_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 fe89 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fdb0 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fea1 	bl	800281a <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 fe69 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a03      	ldr	r2, [pc, #12]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000458 	.word	0x20000458

08001b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	@ (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000458 	.word	0x20000458

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffe0 	bl	8001b38 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0be      	b.n	8001d34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fb4a 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fbbd 	bl	8002358 <ADC_ConversionStop_Disable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 8099 	bne.w	8001d22 <HAL_ADC_Init+0x18e>
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 8095 	bne.w	8001d22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c00:	f023 0302 	bic.w	r3, r3, #2
 8001c04:	f043 0202 	orr.w	r2, r3, #2
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7b1b      	ldrb	r3, [r3, #12]
 8001c1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_Init+0xa2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_ADC_Init+0xa8>
 8001c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_Init+0xaa>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7d1b      	ldrb	r3, [r3, #20]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d119      	bne.n	8001c80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7b1b      	ldrb	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	035a      	lsls	r2, r3, #13
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e00b      	b.n	8001c80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <HAL_ADC_Init+0x1a8>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb0:	d003      	beq.n	8001cba <HAL_ADC_Init+0x126>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	051b      	lsls	r3, r3, #20
 8001cc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_ADC_Init+0x1ac>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cfe:	e018      	b.n	8001d32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	f023 0312 	bic.w	r3, r3, #18
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	ffe1f7fd 	.word	0xffe1f7fd
 8001d40:	ff1f0efe 	.word	0xff1f0efe

08001d44 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a64      	ldr	r2, [pc, #400]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADC_Start_DMA+0x24>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a63      	ldr	r2, [pc, #396]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d106      	bne.n	8001d76 <HAL_ADC_Start_DMA+0x32>
 8001d68:	4b60      	ldr	r3, [pc, #384]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 80b3 	bne.w	8001edc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x40>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0ae      	b.n	8001ee2 <HAL_ADC_Start_DMA+0x19e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fa89 	bl	80022a4 <ADC_Enable>
 8001d92:	4603      	mov	r3, r0
 8001d94:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 809a 	bne.w	8001ed2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x84>
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d115      	bne.n	8001df4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d026      	beq.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df2:	e01d      	b.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a39      	ldr	r2, [pc, #228]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_ADC_Start_DMA+0xd0>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d10d      	bne.n	8001e30 <HAL_ADC_Start_DMA+0xec>
 8001e14:	4b35      	ldr	r3, [pc, #212]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e40:	f023 0206 	bic.w	r2, r3, #6
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_ADC_Start_DMA+0x1b0>)
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1b4>)
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_ADC_Start_DMA+0x1b8>)
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0202 	mvn.w	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e88:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a18      	ldr	r0, [r3, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	334c      	adds	r3, #76	@ 0x4c
 8001e94:	4619      	mov	r1, r3
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f000 fd31 	bl	8002900 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ea8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eac:	d108      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ebc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ece:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ed0:	e006      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001eda:	e001      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012400 	.word	0x40012400
 8001ef0:	40012800 	.word	0x40012800
 8001ef4:	080023db 	.word	0x080023db
 8001ef8:	08002457 	.word	0x08002457
 8001efc:	08002473 	.word	0x08002473

08001f00 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03e      	beq.n	8001fa0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d039      	beq.n	8001fa0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f52:	d11d      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d119      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0220 	bic.w	r2, r2, #32
 8001f6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f874 	bl	800207e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0212 	mvn.w	r2, #18
 8001f9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04d      	beq.n	8002046 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d048      	beq.n	8002046 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001fd6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001fda:	d012      	beq.n	8002002 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d125      	bne.n	8002036 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ff4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ff8:	d11d      	bne.n	8002036 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d119      	bne.n	8002036 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002010:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fae4 	bl	8002604 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 020c 	mvn.w	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d012      	beq.n	8002076 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f812 	bl	8002090 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x20>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0dc      	b.n	800228e <HAL_ADC_ConfigChannel+0x1da>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d81c      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b05      	subs	r3, #5
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b05      	subs	r3, #5
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	@ 0x34
 800211c:	e03c      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d81c      	bhi.n	8002160 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b23      	subs	r3, #35	@ 0x23
 8002138:	221f      	movs	r2, #31
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	4019      	ands	r1, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b23      	subs	r3, #35	@ 0x23
 8002152:	fa00 f203 	lsl.w	r2, r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	@ 0x30
 800215e:	e01b      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	@ 0x41
 8002172:	221f      	movs	r2, #31
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3b41      	subs	r3, #65	@ 0x41
 800218c:	fa00 f203 	lsl.w	r2, r0, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b09      	cmp	r3, #9
 800219e:	d91c      	bls.n	80021da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6898      	ldr	r0, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	e019      	b.n	800220e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6919      	ldr	r1, [r3, #16]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	2207      	movs	r2, #7
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6898      	ldr	r0, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d003      	beq.n	800221e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800221a:	2b11      	cmp	r3, #17
 800221c:	d132      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_ADC_ConfigChannel+0x1e4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d125      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d126      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002244:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d11a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_ADC_ConfigChannel+0x1e8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9a      	lsrs	r2, r3, #18
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002264:	e002      	b.n	800226c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1b2>
 8002272:	e007      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40012400 	.word	0x40012400
 800229c:	20000000 	.word	0x20000000
 80022a0:	431bde83 	.word	0x431bde83

080022a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d040      	beq.n	8002344 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <ADC_Enable+0xac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <ADC_Enable+0xb0>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022e0:	e002      	b.n	80022e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ee:	f7ff fc23 	bl	8001b38 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022f4:	e01f      	b.n	8002336 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022f6:	f7ff fc1f 	bl	8001b38 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d918      	bls.n	8002336 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d011      	beq.n	8002336 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d1d8      	bne.n	80022f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83

08002358 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d12e      	bne.n	80023d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002382:	f7ff fbd9 	bl	8001b38 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002388:	e01b      	b.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800238a:	f7ff fbd5 	bl	8001b38 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d914      	bls.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10d      	bne.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e007      	b.n	80023d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d0dc      	beq.n	800238a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d127      	bne.n	8002444 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800240a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800240e:	d115      	bne.n	800243c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002414:	2b00      	cmp	r3, #0
 8002416:	d111      	bne.n	800243c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fe1e 	bl	800207e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002442:	e004      	b.n	800244e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7fe f9d1 	bl	800080c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002484:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f043 0204 	orr.w	r2, r3, #4
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7ff fe02 	bl	80020a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e097      	b.n	80025f6 <HAL_ADCEx_Calibration_Start+0x14e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff42 	bl	8002358 <ADC_ConversionStop_Disable>
 80024d4:	4603      	mov	r3, r0
 80024d6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fee3 	bl	80022a4 <ADC_Enable>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 8081 	bne.w	80025ec <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024f2:	f023 0302 	bic.w	r3, r3, #2
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80024fe:	4b40      	ldr	r3, [pc, #256]	@ (8002600 <HAL_ADCEx_Calibration_Start+0x158>)
 8002500:	681c      	ldr	r4, [r3, #0]
 8002502:	2002      	movs	r0, #2
 8002504:	f003 fce4 	bl	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002508:	4603      	mov	r3, r0
 800250a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800250e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002510:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002512:	e002      	b.n	800251a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3b01      	subs	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f9      	bne.n	8002514 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002530:	f7ff fb02 	bl	8001b38 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002536:	e01b      	b.n	8002570 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002538:	f7ff fafe 	bl	8001b38 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d914      	bls.n	8002570 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f023 0312 	bic.w	r3, r3, #18
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e042      	b.n	80025f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1dc      	bne.n	8002538 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0204 	orr.w	r2, r2, #4
 800258c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800258e:	f7ff fad3 	bl	8001b38 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002594:	e01b      	b.n	80025ce <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002596:	f7ff facf 	bl	8001b38 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b0a      	cmp	r3, #10
 80025a2:	d914      	bls.n	80025ce <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	f023 0312 	bic.w	r3, r3, #18
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e013      	b.n	80025f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1dc      	bne.n	8002596 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	f023 0303 	bic.w	r3, r3, #3
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4906      	ldr	r1, [pc, #24]	@ (80026b0 <__NVIC_EnableIRQ+0x34>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff90 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff2d 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff42 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff90 	bl	8002708 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5f 	bl	80026b4 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff35 	bl	800267c <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa2 	bl	800276c <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002836:	f000 f802 	bl	800283e <HAL_SYSTICK_Callback>
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e043      	b.n	80028ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	4b22      	ldr	r3, [pc, #136]	@ (80028f4 <HAL_DMA_Init+0xa8>)
 800286a:	4413      	add	r3, r2
 800286c:	4a22      	ldr	r2, [pc, #136]	@ (80028f8 <HAL_DMA_Init+0xac>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	009a      	lsls	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1f      	ldr	r2, [pc, #124]	@ (80028fc <HAL_DMA_Init+0xb0>)
 800287e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002896:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800289a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	bffdfff8 	.word	0xbffdfff8
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	40020000 	.word	0x40020000

08002900 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_DMA_Start_IT+0x20>
 800291c:	2302      	movs	r3, #2
 800291e:	e04b      	b.n	80029b8 <HAL_DMA_Start_IT+0xb8>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13a      	bne.n	80029aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f9f8 	bl	8002d4e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 020e 	orr.w	r2, r2, #14
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00f      	b.n	8002998 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 020a 	orr.w	r2, r2, #10
 8002996:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e005      	b.n	80029b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2204      	movs	r2, #4
 80029dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e020      	b.n	8002a2c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 020e 	bic.w	r2, r2, #14
 80029f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d005      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e051      	b.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 020e 	bic.w	r2, r2, #14
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	@ (8002b0c <HAL_DMA_Abort_IT+0xd4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d029      	beq.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <HAL_DMA_Abort_IT+0xd8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x9e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_DMA_Abort_IT+0xdc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01a      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x98>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_DMA_Abort_IT+0xe0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d012      	beq.n	8002aca <HAL_DMA_Abort_IT+0x92>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <HAL_DMA_Abort_IT+0xe4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00a      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x8c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_DMA_Abort_IT+0xe8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d102      	bne.n	8002abe <HAL_DMA_Abort_IT+0x86>
 8002ab8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002abc:	e00e      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002abe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac2:	e00b      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ac8:	e008      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ace:	e005      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad4:	e002      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_Abort_IT+0xa4>
 8002ada:	2301      	movs	r3, #1
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_DMA_Abort_IT+0xec>)
 8002ade:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
    } 
  }
  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020008 	.word	0x40020008
 8002b10:	4002001c 	.word	0x4002001c
 8002b14:	40020030 	.word	0x40020030
 8002b18:	40020044 	.word	0x40020044
 8002b1c:	40020058 	.word	0x40020058
 8002b20:	4002006c 	.word	0x4002006c
 8002b24:	40020000 	.word	0x40020000

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d04f      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xc8>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a66      	ldr	r2, [pc, #408]	@ (8002d18 <HAL_DMA_IRQHandler+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d029      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xae>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a65      	ldr	r2, [pc, #404]	@ (8002d1c <HAL_DMA_IRQHandler+0x1f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xaa>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a63      	ldr	r2, [pc, #396]	@ (8002d20 <HAL_DMA_IRQHandler+0x1f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0xa4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a62      	ldr	r2, [pc, #392]	@ (8002d24 <HAL_DMA_IRQHandler+0x1fc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d012      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x9e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	@ (8002d28 <HAL_DMA_IRQHandler+0x200>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x98>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5f      	ldr	r2, [pc, #380]	@ (8002d2c <HAL_DMA_IRQHandler+0x204>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_DMA_IRQHandler+0x92>
 8002bb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bb8:	e00e      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bbe:	e00b      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bc4:	e008      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bca:	e005      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd0:	e002      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bd2:	2340      	movs	r3, #64	@ 0x40
 8002bd4:	e000      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	4a55      	ldr	r2, [pc, #340]	@ (8002d30 <HAL_DMA_IRQHandler+0x208>)
 8002bda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8094 	beq.w	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bee:	e08e      	b.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d056      	beq.n	8002cae <HAL_DMA_IRQHandler+0x186>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d051      	beq.n	8002cae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020a 	bic.w	r2, r2, #10
 8002c26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a38      	ldr	r2, [pc, #224]	@ (8002d18 <HAL_DMA_IRQHandler+0x1f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d029      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x166>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a37      	ldr	r2, [pc, #220]	@ (8002d1c <HAL_DMA_IRQHandler+0x1f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x162>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	@ (8002d20 <HAL_DMA_IRQHandler+0x1f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x15c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a34      	ldr	r2, [pc, #208]	@ (8002d24 <HAL_DMA_IRQHandler+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d012      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x156>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a32      	ldr	r2, [pc, #200]	@ (8002d28 <HAL_DMA_IRQHandler+0x200>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00a      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x150>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a31      	ldr	r2, [pc, #196]	@ (8002d2c <HAL_DMA_IRQHandler+0x204>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x14a>
 8002c6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c70:	e00e      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c76:	e00b      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c7c:	e008      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c82:	e005      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c88:	e002      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <HAL_DMA_IRQHandler+0x208>)
 8002c92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d034      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cac:	e02f      	b.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    }
  }
  return;
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
}
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40020008 	.word	0x40020008
 8002d1c:	4002001c 	.word	0x4002001c
 8002d20:	40020030 	.word	0x40020030
 8002d24:	40020044 	.word	0x40020044
 8002d28:	40020058 	.word	0x40020058
 8002d2c:	4002006c 	.word	0x4002006c
 8002d30:	40020000 	.word	0x40020000

08002d34 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d42:	b2db      	uxtb	r3, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d108      	bne.n	8002d8e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d8c:	e007      	b.n	8002d9e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002db2:	4b6b      	ldr	r3, [pc, #428]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_FLASH_IRQHandler+0x22>
 8002dbe:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002dca:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002dd0:	4b64      	ldr	r3, [pc, #400]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002dd8:	f000 f8f4 	bl	8002fc4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8cc 	bl	8002f7a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002de2:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002de8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a0 	beq.w	8002f36 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002df6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002df8:	2220      	movs	r2, #32
 8002dfa:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002dfc:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8097 	beq.w	8002f36 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002e08:	4b56      	ldr	r3, [pc, #344]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d12d      	bne.n	8002e6e <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002e12:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e1a:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002e1c:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d017      	beq.n	8002e54 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002e24:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f89c 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002e30:	4b4c      	ldr	r3, [pc, #304]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e38:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e40:	4b47      	ldr	r3, [pc, #284]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4a46      	ldr	r2, [pc, #280]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002e46:	f023 0302 	bic.w	r3, r3, #2
 8002e4a:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f909 	bl	8003064 <FLASH_PageErase>
 8002e52:	e070      	b.n	8002f36 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	4a42      	ldr	r2, [pc, #264]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e60:	4b40      	ldr	r3, [pc, #256]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f87e 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>
 8002e6c:	e063      	b.n	8002f36 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d10c      	bne.n	8002e92 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4a38      	ldr	r2, [pc, #224]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f86f 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e051      	b.n	8002f36 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002e92:	4b34      	ldr	r3, [pc, #208]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e9a:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002e9c:	4b31      	ldr	r3, [pc, #196]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d024      	beq.n	8002eee <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002eac:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002eae:	4b2d      	ldr	r3, [pc, #180]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002eb6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	0c02      	lsrs	r2, r0, #16
 8002ec4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ec8:	0c0b      	lsrs	r3, r1, #16
 8002eca:	4926      	ldr	r1, [pc, #152]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ecc:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ed0:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ede:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ee2:	b293      	uxth	r3, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f850 	bl	8002f8c <FLASH_Program_HalfWord>
 8002eec:	e023      	b.n	8002f36 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d105      	bne.n	8002f04 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f833 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>
 8002f02:	e011      	b.n	8002f28 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d106      	bne.n	8002f1c <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	3b02      	subs	r3, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f827 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>
 8002f1a:	e005      	b.n	8002f28 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	3b06      	subs	r3, #6
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f820 	bl	8002f68 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2e:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_FLASH_IRQHandler+0x1bc>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	4a03      	ldr	r2, [pc, #12]	@ (8002f60 <HAL_FLASH_IRQHandler+0x1b8>)
 8002f52:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002f56:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40022000 	.word	0x40022000
 8002f64:	20000460 	.word	0x20000460

08002f68 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <FLASH_Program_HalfWord+0x30>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <FLASH_Program_HalfWord+0x34>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <FLASH_Program_HalfWord+0x34>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	801a      	strh	r2, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000460 	.word	0x20000460
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002fce:	4b23      	ldr	r3, [pc, #140]	@ (800305c <FLASH_SetErrorCode+0x98>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002fda:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 8002fe4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fee:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <FLASH_SetErrorCode+0x98>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ffa:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 8003004:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <FLASH_SetErrorCode+0x98>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <FLASH_SetErrorCode+0x9c>)
 8003024:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <FLASH_SetErrorCode+0x98>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a0c      	ldr	r2, [pc, #48]	@ (800305c <FLASH_SetErrorCode+0x98>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f240 1201 	movw	r2, #257	@ 0x101
 8003038:	4293      	cmp	r3, r2
 800303a:	d106      	bne.n	800304a <FLASH_SetErrorCode+0x86>
 800303c:	4b07      	ldr	r3, [pc, #28]	@ (800305c <FLASH_SetErrorCode+0x98>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a06      	ldr	r2, [pc, #24]	@ (800305c <FLASH_SetErrorCode+0x98>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	61d3      	str	r3, [r2, #28]
}  
 8003048:	e002      	b.n	8003050 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <FLASH_SetErrorCode+0x98>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60d3      	str	r3, [r2, #12]
}  
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	20000460 	.word	0x20000460

08003064 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <FLASH_PageErase+0x38>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003072:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <FLASH_PageErase+0x3c>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <FLASH_PageErase+0x3c>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800307e:	4a08      	ldr	r2, [pc, #32]	@ (80030a0 <FLASH_PageErase+0x3c>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <FLASH_PageErase+0x3c>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4a05      	ldr	r2, [pc, #20]	@ (80030a0 <FLASH_PageErase+0x3c>)
 800308a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800308e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000460 	.word	0x20000460
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	@ 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b6:	e169      	b.n	800338c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b8:	2201      	movs	r2, #1
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 8158 	bne.w	8003386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a9a      	ldr	r2, [pc, #616]	@ (8003344 <HAL_GPIO_Init+0x2a0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d05e      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030e0:	4a98      	ldr	r2, [pc, #608]	@ (8003344 <HAL_GPIO_Init+0x2a0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d875      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030e6:	4a98      	ldr	r2, [pc, #608]	@ (8003348 <HAL_GPIO_Init+0x2a4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d058      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030ec:	4a96      	ldr	r2, [pc, #600]	@ (8003348 <HAL_GPIO_Init+0x2a4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d86f      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030f2:	4a96      	ldr	r2, [pc, #600]	@ (800334c <HAL_GPIO_Init+0x2a8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d052      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 80030f8:	4a94      	ldr	r2, [pc, #592]	@ (800334c <HAL_GPIO_Init+0x2a8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d869      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 80030fe:	4a94      	ldr	r2, [pc, #592]	@ (8003350 <HAL_GPIO_Init+0x2ac>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d04c      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 8003104:	4a92      	ldr	r2, [pc, #584]	@ (8003350 <HAL_GPIO_Init+0x2ac>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d863      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 800310a:	4a92      	ldr	r2, [pc, #584]	@ (8003354 <HAL_GPIO_Init+0x2b0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d046      	beq.n	800319e <HAL_GPIO_Init+0xfa>
 8003110:	4a90      	ldr	r2, [pc, #576]	@ (8003354 <HAL_GPIO_Init+0x2b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d85d      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 8003116:	2b12      	cmp	r3, #18
 8003118:	d82a      	bhi.n	8003170 <HAL_GPIO_Init+0xcc>
 800311a:	2b12      	cmp	r3, #18
 800311c:	d859      	bhi.n	80031d2 <HAL_GPIO_Init+0x12e>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_GPIO_Init+0x80>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	0800319f 	.word	0x0800319f
 8003128:	08003179 	.word	0x08003179
 800312c:	0800318b 	.word	0x0800318b
 8003130:	080031cd 	.word	0x080031cd
 8003134:	080031d3 	.word	0x080031d3
 8003138:	080031d3 	.word	0x080031d3
 800313c:	080031d3 	.word	0x080031d3
 8003140:	080031d3 	.word	0x080031d3
 8003144:	080031d3 	.word	0x080031d3
 8003148:	080031d3 	.word	0x080031d3
 800314c:	080031d3 	.word	0x080031d3
 8003150:	080031d3 	.word	0x080031d3
 8003154:	080031d3 	.word	0x080031d3
 8003158:	080031d3 	.word	0x080031d3
 800315c:	080031d3 	.word	0x080031d3
 8003160:	080031d3 	.word	0x080031d3
 8003164:	080031d3 	.word	0x080031d3
 8003168:	08003181 	.word	0x08003181
 800316c:	08003195 	.word	0x08003195
 8003170:	4a79      	ldr	r2, [pc, #484]	@ (8003358 <HAL_GPIO_Init+0x2b4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003176:	e02c      	b.n	80031d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e029      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	623b      	str	r3, [r7, #32]
          break;
 8003188:	e024      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	3308      	adds	r3, #8
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e01f      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	330c      	adds	r3, #12
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e01a      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031a6:	2304      	movs	r3, #4
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e013      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b4:	2308      	movs	r3, #8
 80031b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	611a      	str	r2, [r3, #16]
          break;
 80031be:	e009      	b.n	80031d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c0:	2308      	movs	r3, #8
 80031c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	615a      	str	r2, [r3, #20]
          break;
 80031ca:	e003      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
          break;
 80031d0:	e000      	b.n	80031d4 <HAL_GPIO_Init+0x130>
          break;
 80031d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2bff      	cmp	r3, #255	@ 0xff
 80031d8:	d801      	bhi.n	80031de <HAL_GPIO_Init+0x13a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_Init+0x13e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2bff      	cmp	r3, #255	@ 0xff
 80031e8:	d802      	bhi.n	80031f0 <HAL_GPIO_Init+0x14c>
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x152>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	3b08      	subs	r3, #8
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	210f      	movs	r1, #15
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80b1 	beq.w	8003386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003224:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <HAL_GPIO_Init+0x2b8>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a4c      	ldr	r2, [pc, #304]	@ (800335c <HAL_GPIO_Init+0x2b8>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_GPIO_Init+0x2b8>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800323c:	4a48      	ldr	r2, [pc, #288]	@ (8003360 <HAL_GPIO_Init+0x2bc>)
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a40      	ldr	r2, [pc, #256]	@ (8003364 <HAL_GPIO_Init+0x2c0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_GPIO_Init+0x1ec>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3f      	ldr	r2, [pc, #252]	@ (8003368 <HAL_GPIO_Init+0x2c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00d      	beq.n	800328c <HAL_GPIO_Init+0x1e8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3e      	ldr	r2, [pc, #248]	@ (800336c <HAL_GPIO_Init+0x2c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <HAL_GPIO_Init+0x1e4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3d      	ldr	r2, [pc, #244]	@ (8003370 <HAL_GPIO_Init+0x2cc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_GPIO_Init+0x1e0>
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003284:	2304      	movs	r3, #4
 8003286:	e004      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003288:	2302      	movs	r3, #2
 800328a:	e002      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_GPIO_Init+0x1ee>
 8003290:	2300      	movs	r3, #0
 8003292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003294:	f002 0203 	and.w	r2, r2, #3
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	4093      	lsls	r3, r2
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032a2:	492f      	ldr	r1, [pc, #188]	@ (8003360 <HAL_GPIO_Init+0x2bc>)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	3302      	adds	r3, #2
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	492c      	ldr	r1, [pc, #176]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4928      	ldr	r1, [pc, #160]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4922      	ldr	r1, [pc, #136]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	491e      	ldr	r1, [pc, #120]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4918      	ldr	r1, [pc, #96]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800331a:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	43db      	mvns	r3, r3
 8003322:	4914      	ldr	r1, [pc, #80]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 8003324:	4013      	ands	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d021      	beq.n	8003378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	490e      	ldr	r1, [pc, #56]	@ (8003374 <HAL_GPIO_Init+0x2d0>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e021      	b.n	8003386 <HAL_GPIO_Init+0x2e2>
 8003342:	bf00      	nop
 8003344:	10320000 	.word	0x10320000
 8003348:	10310000 	.word	0x10310000
 800334c:	10220000 	.word	0x10220000
 8003350:	10210000 	.word	0x10210000
 8003354:	10120000 	.word	0x10120000
 8003358:	10110000 	.word	0x10110000
 800335c:	40021000 	.word	0x40021000
 8003360:	40010000 	.word	0x40010000
 8003364:	40010800 	.word	0x40010800
 8003368:	40010c00 	.word	0x40010c00
 800336c:	40011000 	.word	0x40011000
 8003370:	40011400 	.word	0x40011400
 8003374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_GPIO_Init+0x304>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	43db      	mvns	r3, r3
 8003380:	4909      	ldr	r1, [pc, #36]	@ (80033a8 <HAL_GPIO_Init+0x304>)
 8003382:	4013      	ands	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	3301      	adds	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f ae8e 	bne.w	80030b8 <HAL_GPIO_Init+0x14>
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	372c      	adds	r7, #44	@ 0x2c
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43d9      	mvns	r1, r3
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	400b      	ands	r3, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e12b      	b.n	800367a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd f8b4 	bl	80005a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003474:	f002 fc30 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8003478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a81      	ldr	r2, [pc, #516]	@ (8003684 <HAL_I2C_Init+0x274>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d807      	bhi.n	8003494 <HAL_I2C_Init+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a80      	ldr	r2, [pc, #512]	@ (8003688 <HAL_I2C_Init+0x278>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e006      	b.n	80034a2 <HAL_I2C_Init+0x92>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a7d      	ldr	r2, [pc, #500]	@ (800368c <HAL_I2C_Init+0x27c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0e7      	b.n	800367a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a78      	ldr	r2, [pc, #480]	@ (8003690 <HAL_I2C_Init+0x280>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003684 <HAL_I2C_Init+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <HAL_I2C_Init+0xd4>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e009      	b.n	80034f8 <HAL_I2C_Init+0xe8>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a69      	ldr	r2, [pc, #420]	@ (8003694 <HAL_I2C_Init+0x284>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	3301      	adds	r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800350a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	495c      	ldr	r1, [pc, #368]	@ (8003684 <HAL_I2C_Init+0x274>)
 8003514:	428b      	cmp	r3, r1
 8003516:	d819      	bhi.n	800354c <HAL_I2C_Init+0x13c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e59      	subs	r1, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fbb1 f3f3 	udiv	r3, r1, r3
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800352c:	400b      	ands	r3, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_I2C_Init+0x138>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e59      	subs	r1, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003546:	e051      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 8003548:	2304      	movs	r3, #4
 800354a:	e04f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HAL_I2C_Init+0x168>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e012      	b.n	800359e <HAL_I2C_Init+0x18e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x196>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <HAL_I2C_Init+0x1bc>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e58      	subs	r0, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	440b      	add	r3, r1
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	6809      	ldr	r1, [r1, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800361a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6911      	ldr	r1, [r2, #16]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	000186a0 	.word	0x000186a0
 8003688:	001e847f 	.word	0x001e847f
 800368c:	003d08ff 	.word	0x003d08ff
 8003690:	431bde83 	.word	0x431bde83
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036aa:	2b80      	cmp	r3, #128	@ 0x80
 80036ac:	d103      	bne.n	80036b6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  }
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	817b      	strh	r3, [r7, #10]
 80036d0:	4613      	mov	r3, r2
 80036d2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	f040 8101 	bne.w	80038e8 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80036e6:	4b83      	ldr	r3, [pc, #524]	@ (80038f4 <HAL_I2C_Master_Transmit_DMA+0x234>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	4a82      	ldr	r2, [pc, #520]	@ (80038f8 <HAL_I2C_Master_Transmit_DMA+0x238>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0a1a      	lsrs	r2, r3, #8
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3b01      	subs	r3, #1
 8003704:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d112      	bne.n	8003732 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
 8003730:	e0db      	b.n	80038ea <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d0df      	beq.n	8003700 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800374a:	2302      	movs	r3, #2
 800374c:	e0cd      	b.n	80038ea <HAL_I2C_Master_Transmit_DMA+0x22a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d007      	beq.n	8003774 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2221      	movs	r2, #33	@ 0x21
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2210      	movs	r2, #16
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	893a      	ldrh	r2, [r7, #8]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a52      	ldr	r2, [pc, #328]	@ (80038fc <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80037b6:	897a      	ldrh	r2, [r7, #10]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d073      	beq.n	80038ac <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d022      	beq.n	8003812 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003900 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003904 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	4619      	mov	r1, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3310      	adds	r3, #16
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	f7ff f87d 	bl	8002900 <HAL_DMA_Start_IT>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d139      	bne.n	8003884 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8003810:	e013      	b.n	800383a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e057      	b.n	80038ea <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003850:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003870:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e02f      	b.n	80038e4 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e01e      	b.n	80038ea <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80038e2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000
 80038f8:	14f8b589 	.word	0x14f8b589
 80038fc:	ffff0000 	.word	0xffff0000
 8003900:	08005131 	.word	0x08005131
 8003904:	080052ef 	.word	0x080052ef

08003908 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003928:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003930:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b10      	cmp	r3, #16
 8003936:	d003      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x38>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	f040 80c1 	bne.w	8003ac2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_I2C_EV_IRQHandler+0x6e>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003960:	d003      	beq.n	800396a <HAL_I2C_EV_IRQHandler+0x62>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003968:	d101      	bne.n	800396e <HAL_I2C_EV_IRQHandler+0x66>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x68>
 800396e:	2300      	movs	r3, #0
 8003970:	2b01      	cmp	r3, #1
 8003972:	f000 8132 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0x92>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f001 fdbf 	bl	8005510 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fda6 	bl	80044e4 <I2C_Master_SB>
 8003998:	e092      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	08db      	lsrs	r3, r3, #3
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_I2C_EV_IRQHandler+0xb2>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	0a5b      	lsrs	r3, r3, #9
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fe1b 	bl	80045ee <I2C_Master_ADD10>
 80039b8:	e082      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0xd2>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fe34 	bl	8004640 <I2C_Master_ADDR>
 80039d8:	e072      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d03b      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f4:	f000 80f3 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	09db      	lsrs	r3, r3, #7
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00f      	beq.n	8003a24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	0a9b      	lsrs	r3, r3, #10
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f9fe 	bl	8003e1e <I2C_MasterTransmit_TXE>
 8003a22:	e04d      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80d6 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	0a5b      	lsrs	r3, r3, #9
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80cf 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a40:	7bbb      	ldrb	r3, [r7, #14]
 8003a42:	2b21      	cmp	r3, #33	@ 0x21
 8003a44:	d103      	bne.n	8003a4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa85 	bl	8003f56 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4c:	e0c7      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	f040 80c4 	bne.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 faf3 	bl	8004042 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5c:	e0bf      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6c:	f000 80b7 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00f      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x194>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x194>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb6c 	bl	8004172 <I2C_MasterReceive_RXNE>
 8003a9a:	e011      	b.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 809a 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	0a5b      	lsrs	r3, r3, #9
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8093 	beq.w	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fc22 	bl	8004302 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abe:	e08e      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ac0:	e08d      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e007      	b.n	8003ae4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x20e>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	0a5b      	lsrs	r3, r3, #9
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b0c:	69b9      	ldr	r1, [r7, #24]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 ffed 	bl	8004aee <I2C_Slave_ADDR>
 8003b14:	e066      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	0a5b      	lsrs	r3, r3, #9
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 f828 	bl	8004b84 <I2C_Slave_STOPF>
 8003b34:	e056      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	2b21      	cmp	r3, #33	@ 0x21
 8003b3a:	d002      	beq.n	8003b42 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b3c:	7bbb      	ldrb	r3, [r7, #14]
 8003b3e:	2b29      	cmp	r3, #41	@ 0x29
 8003b40:	d125      	bne.n	8003b8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	09db      	lsrs	r3, r3, #7
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <HAL_I2C_EV_IRQHandler+0x266>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	0a9b      	lsrs	r3, r3, #10
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_I2C_EV_IRQHandler+0x266>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 ff05 	bl	8004976 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b6c:	e039      	b.n	8003be2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d033      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0a5b      	lsrs	r3, r3, #9
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d02d      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 ff32 	bl	80049f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8c:	e029      	b.n	8003be2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00f      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	0a9b      	lsrs	r3, r3, #10
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ff3c 	bl	8004a30 <I2C_SlaveReceive_RXNE>
 8003bb8:	e014      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 ff6a 	bl	8004aac <I2C_SlaveReceive_BTF>
 8003bd8:	e004      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003be2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	@ 0x28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_I2C_ER_IRQHandler+0x5e>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c36:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	0a5b      	lsrs	r3, r3, #9
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <HAL_I2C_ER_IRQHandler+0x88>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	0a9b      	lsrs	r3, r3, #10
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03f      	beq.n	8003cfe <HAL_I2C_ER_IRQHandler+0x114>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d039      	beq.n	8003cfe <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003c8a:	7efb      	ldrb	r3, [r7, #27]
 8003c8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ca4:	7ebb      	ldrb	r3, [r7, #26]
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d112      	bne.n	8003cd0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b21      	cmp	r3, #33	@ 0x21
 8003cb4:	d008      	beq.n	8003cc8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b29      	cmp	r3, #41	@ 0x29
 8003cba:	d005      	beq.n	8003cc8 <HAL_I2C_ER_IRQHandler+0xde>
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b28      	cmp	r3, #40	@ 0x28
 8003cc0:	d106      	bne.n	8003cd0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b21      	cmp	r3, #33	@ 0x21
 8003cc6:	d103      	bne.n	8003cd0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f001 f88b 	bl	8004de4 <I2C_Slave_AF>
 8003cce:	e016      	b.n	8003cfe <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ce2:	7efb      	ldrb	r3, [r7, #27]
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d002      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0x104>
 8003ce8:	7efb      	ldrb	r3, [r7, #27]
 8003cea:	2b40      	cmp	r3, #64	@ 0x40
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	0adb      	lsrs	r3, r3, #11
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <HAL_I2C_ER_IRQHandler+0x13e>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003d26:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 f8c6 	bl	8004ecc <I2C_ITError>
  }
}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e34:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d150      	bne.n	8003ee6 <I2C_MasterTransmit_TXE+0xc8>
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b21      	cmp	r3, #33	@ 0x21
 8003e48:	d14d      	bne.n	8003ee6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d01d      	beq.n	8003e8c <I2C_MasterTransmit_TXE+0x6e>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d01a      	beq.n	8003e8c <I2C_MasterTransmit_TXE+0x6e>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e5c:	d016      	beq.n	8003e8c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e6c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2211      	movs	r2, #17
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff5f 	bl	8003d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e8a:	e060      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e9a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d107      	bne.n	8003ed6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff74 	bl	8003dbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ed4:	e03b      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff32 	bl	8003d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ee4:	e033      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b21      	cmp	r3, #33	@ 0x21
 8003eea:	d005      	beq.n	8003ef8 <I2C_MasterTransmit_TXE+0xda>
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	2b40      	cmp	r3, #64	@ 0x40
 8003ef0:	d12d      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b22      	cmp	r3, #34	@ 0x22
 8003ef6:	d12a      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f12:	e01c      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d103      	bne.n	8003f28 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f88e 	bl	8004042 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f26:	e012      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f4c:	e7ff      	b.n	8003f4e <I2C_MasterTransmit_TXE+0x130>
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	@ 0x21
 8003f6e:	d164      	bne.n	800403a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f9e:	e04c      	b.n	800403a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d01d      	beq.n	8003fe2 <I2C_MasterTransmit_BTF+0x8c>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d01a      	beq.n	8003fe2 <I2C_MasterTransmit_BTF+0x8c>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fb2:	d016      	beq.n	8003fe2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fc2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2211      	movs	r2, #17
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff feb4 	bl	8003d48 <HAL_I2C_MasterTxCpltCallback>
}
 8003fe0:	e02b      	b.n	800403a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ff0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004000:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d107      	bne.n	800402c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fec9 	bl	8003dbc <HAL_I2C_MemTxCpltCallback>
}
 800402a:	e006      	b.n	800403a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fe87 	bl	8003d48 <HAL_I2C_MasterTxCpltCallback>
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004050:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11d      	bne.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10b      	bne.n	800407a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	b2da      	uxtb	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004078:	e077      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	b29b      	uxth	r3, r3
 8004080:	121b      	asrs	r3, r3, #8
 8004082:	b2da      	uxtb	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004094:	e069      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10b      	bne.n	80040b6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040b4:	e059      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d152      	bne.n	8004164 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b22      	cmp	r3, #34	@ 0x22
 80040c2:	d10d      	bne.n	80040e0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040de:	e044      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b21      	cmp	r3, #33	@ 0x21
 80040ee:	d112      	bne.n	8004116 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004114:	e029      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d124      	bne.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b21      	cmp	r3, #33	@ 0x21
 8004124:	d121      	bne.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004134:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004144:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe2d 	bl	8003dbc <HAL_I2C_MemTxCpltCallback>
}
 8004162:	e002      	b.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fa97 	bl	8003698 <I2C_Flush_DR>
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b22      	cmp	r3, #34	@ 0x22
 8004184:	f040 80b9 	bne.w	80042fa <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d921      	bls.n	80041e0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	f040 8096 	bne.w	80042fa <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80041de:	e08c      	b.n	80042fa <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d07f      	beq.n	80042e8 <I2C_MasterReceive_RXNE+0x176>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <I2C_MasterReceive_RXNE+0x82>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d179      	bne.n	80042e8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 f959 	bl	80054ac <I2C_WaitOnSTOPRequestThroughIT>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d14c      	bne.n	800429a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800421e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	d10a      	bne.n	8004270 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fdb0 	bl	8003dce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800426e:	e044      	b.n	80042fa <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d002      	beq.n	8004284 <I2C_MasterReceive_RXNE+0x112>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b20      	cmp	r3, #32
 8004282:	d103      	bne.n	800428c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
 800428a:	e002      	b.n	8004292 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2212      	movs	r2, #18
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fd61 	bl	8003d5a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004298:	e02f      	b.n	80042fa <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fd7d 	bl	8003de0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042e6:	e008      	b.n	80042fa <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	605a      	str	r2, [r3, #4]
}
 80042f8:	e7ff      	b.n	80042fa <I2C_MasterReceive_RXNE+0x188>
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b04      	cmp	r3, #4
 8004318:	d11b      	bne.n	8004352 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004328:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004350:	e0c4      	b.n	80044dc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b03      	cmp	r3, #3
 800435a:	d129      	bne.n	80043b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800436a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00a      	beq.n	8004388 <I2C_MasterReceive_BTF+0x86>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d007      	beq.n	8004388 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004386:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043ae:	e095      	b.n	80044dc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d17d      	bne.n	80044b6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d002      	beq.n	80043c6 <I2C_MasterReceive_BTF+0xc4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d108      	bne.n	80043d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e016      	b.n	8004406 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d002      	beq.n	80043e4 <I2C_MasterReceive_BTF+0xe2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d108      	bne.n	80043f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e007      	b.n	8004406 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004404:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004460:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d10a      	bne.n	800448c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fca2 	bl	8003dce <HAL_I2C_MemRxCpltCallback>
}
 800448a:	e027      	b.n	80044dc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d002      	beq.n	80044a0 <I2C_MasterReceive_BTF+0x19e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b20      	cmp	r3, #32
 800449e:	d103      	bne.n	80044a8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044a6:	e002      	b.n	80044ae <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2212      	movs	r2, #18
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fc53 	bl	8003d5a <HAL_I2C_MasterRxCpltCallback>
}
 80044b4:	e012      	b.n	80044dc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d117      	bne.n	8004528 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004510:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004512:	e067      	b.n	80045e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]
}
 8004526:	e05d      	b.n	80045e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004530:	d133      	bne.n	800459a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b21      	cmp	r3, #33	@ 0x21
 800453c:	d109      	bne.n	8004552 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800454e:	611a      	str	r2, [r3, #16]
 8004550:	e008      	b.n	8004564 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <I2C_Master_SB+0x92>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457a:	2b00      	cmp	r3, #0
 800457c:	d032      	beq.n	80045e4 <I2C_Master_SB+0x100>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02d      	beq.n	80045e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004596:	605a      	str	r2, [r3, #4]
}
 8004598:	e024      	b.n	80045e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	11db      	asrs	r3, r3, #7
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0306 	and.w	r3, r3, #6
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f063 030f 	orn	r3, r3, #15
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]
}
 80045be:	e011      	b.n	80045e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10d      	bne.n	80045e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	11db      	asrs	r3, r3, #7
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f063 030e 	orn	r3, r3, #14
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <I2C_Master_ADD10+0x26>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00c      	beq.n	8004636 <I2C_Master_ADD10+0x48>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004634:	605a      	str	r2, [r3, #4]
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b091      	sub	sp, #68	@ 0x44
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800464e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b22      	cmp	r3, #34	@ 0x22
 8004668:	f040 8174 	bne.w	8004954 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <I2C_Master_ADDR+0x54>
 8004674:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d10b      	bne.n	8004694 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467c:	2300      	movs	r3, #0
 800467e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	e16b      	b.n	800496c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <I2C_Master_ADDR+0x98>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046a4:	d118      	bne.n	80046d8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80046d6:	e149      	b.n	800496c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d113      	bne.n	800470a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e120      	b.n	800494c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 808a 	bne.w	800482a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800471c:	d137      	bne.n	800478e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473c:	d113      	bne.n	8004766 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	e0f2      	b.n	800494c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e0de      	b.n	800494c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2b08      	cmp	r3, #8
 8004792:	d02e      	beq.n	80047f2 <I2C_Master_ADDR+0x1b2>
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b20      	cmp	r3, #32
 8004798:	d02b      	beq.n	80047f2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	2b12      	cmp	r3, #18
 800479e:	d102      	bne.n	80047a6 <I2C_Master_ADDR+0x166>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d125      	bne.n	80047f2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d00e      	beq.n	80047ca <I2C_Master_ADDR+0x18a>
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d00b      	beq.n	80047ca <I2C_Master_ADDR+0x18a>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d008      	beq.n	80047ca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e007      	b.n	80047da <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	e0ac      	b.n	800494c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004800:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e090      	b.n	800494c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d158      	bne.n	80048e6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004836:	2b04      	cmp	r3, #4
 8004838:	d021      	beq.n	800487e <I2C_Master_ADDR+0x23e>
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	2b02      	cmp	r3, #2
 800483e:	d01e      	beq.n	800487e <I2C_Master_ADDR+0x23e>
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	2b10      	cmp	r3, #16
 8004844:	d01b      	beq.n	800487e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004854:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e012      	b.n	80048a4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800488c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b2:	d14b      	bne.n	800494c <I2C_Master_ADDR+0x30c>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048ba:	d00b      	beq.n	80048d4 <I2C_Master_ADDR+0x294>
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d008      	beq.n	80048d4 <I2C_Master_ADDR+0x294>
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d005      	beq.n	80048d4 <I2C_Master_ADDR+0x294>
 80048c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d002      	beq.n	80048d4 <I2C_Master_ADDR+0x294>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d13b      	bne.n	800494c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	e032      	b.n	800494c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004904:	d117      	bne.n	8004936 <I2C_Master_ADDR+0x2f6>
 8004906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004908:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800490c:	d00b      	beq.n	8004926 <I2C_Master_ADDR+0x2e6>
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d008      	beq.n	8004926 <I2C_Master_ADDR+0x2e6>
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	2b08      	cmp	r3, #8
 8004918:	d005      	beq.n	8004926 <I2C_Master_ADDR+0x2e6>
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b10      	cmp	r3, #16
 800491e:	d002      	beq.n	8004926 <I2C_Master_ADDR+0x2e6>
 8004920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004922:	2b20      	cmp	r3, #32
 8004924:	d107      	bne.n	8004936 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004934:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004952:	e00b      	b.n	800496c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
}
 800496a:	e7ff      	b.n	800496c <I2C_Master_ADDR+0x32c>
 800496c:	bf00      	nop
 800496e:	3744      	adds	r7, #68	@ 0x44
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02b      	beq.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d114      	bne.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b29      	cmp	r3, #41	@ 0x29
 80049c2:	d111      	bne.n	80049e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2221      	movs	r2, #33	@ 0x21
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2228      	movs	r2, #40	@ 0x28
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff f9c2 	bl	8003d6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02c      	beq.n	8004aa4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <I2C_SlaveReceive_RXNE+0x74>
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7e:	d111      	bne.n	8004aa4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2222      	movs	r2, #34	@ 0x22
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2228      	movs	r2, #40	@ 0x28
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff f96d 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b08:	2b28      	cmp	r3, #40	@ 0x28
 8004b0a:	d127      	bne.n	8004b5c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	09db      	lsrs	r3, r3, #7
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	81bb      	strh	r3, [r7, #12]
 8004b3e:	e002      	b.n	8004b46 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b4e:	89ba      	ldrh	r2, [r7, #12]
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff f91b 	bl	8003d90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b5a:	e00e      	b.n	8004b7a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be0:	d172      	bne.n	8004cc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d002      	beq.n	8004bee <I2C_Slave_STOPF+0x6a>
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bec:	d135      	bne.n	8004c5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe f884 	bl	8002d34 <HAL_DMA_GetState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d049      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	4a69      	ldr	r2, [pc, #420]	@ (8004ddc <I2C_Slave_STOPF+0x258>)
 8004c38:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fd fefa 	bl	8002a38 <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03d      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c58:	e035      	b.n	8004cc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f84e 	bl	8002d34 <HAL_DMA_GetState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d014      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8004ddc <I2C_Slave_STOPF+0x258>)
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fec4 	bl	8002a38 <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
 8004cc4:	e000      	b.n	8004cc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03e      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d112      	bne.n	8004d06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d112      	bne.n	8004d3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8b7 	bl	8004ecc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d5e:	e039      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d64:	d109      	bne.n	8004d7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2228      	movs	r2, #40	@ 0x28
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff f802 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b28      	cmp	r3, #40	@ 0x28
 8004d84:	d111      	bne.n	8004daa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <I2C_Slave_STOPF+0x25c>)
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff f801 	bl	8003daa <HAL_I2C_ListenCpltCallback>
}
 8004da8:	e014      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	2b22      	cmp	r3, #34	@ 0x22
 8004db0:	d002      	beq.n	8004db8 <I2C_Slave_STOPF+0x234>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b22      	cmp	r3, #34	@ 0x22
 8004db6:	d10d      	bne.n	8004dd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe ffd5 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	0800535d 	.word	0x0800535d
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d002      	beq.n	8004e06 <I2C_Slave_AF+0x22>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d129      	bne.n	8004e5a <I2C_Slave_AF+0x76>
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b28      	cmp	r3, #40	@ 0x28
 8004e0a:	d126      	bne.n	8004e5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec8 <I2C_Slave_AF+0xe4>)
 8004e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fe ffa9 	bl	8003daa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e58:	e031      	b.n	8004ebe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b21      	cmp	r3, #33	@ 0x21
 8004e5e:	d129      	bne.n	8004eb4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <I2C_Slave_AF+0xe4>)
 8004e64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2221      	movs	r2, #33	@ 0x21
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe fbf6 	bl	8003698 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fe ff5d 	bl	8003d6c <HAL_I2C_SlaveTxCpltCallback>
}
 8004eb2:	e004      	b.n	8004ebe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ebc:	615a      	str	r2, [r3, #20]
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	ffff0000 	.word	0xffff0000

08004ecc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ee2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d002      	beq.n	8004ef0 <I2C_ITError+0x24>
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d10a      	bne.n	8004f06 <I2C_ITError+0x3a>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b22      	cmp	r3, #34	@ 0x22
 8004ef4:	d107      	bne.n	8004f06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f0c:	2b28      	cmp	r3, #40	@ 0x28
 8004f0e:	d107      	bne.n	8004f20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2228      	movs	r2, #40	@ 0x28
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f1e:	e015      	b.n	8004f4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f2e:	d00a      	beq.n	8004f46 <I2C_ITError+0x7a>
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b60      	cmp	r3, #96	@ 0x60
 8004f34:	d007      	beq.n	8004f46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f5a:	d162      	bne.n	8005022 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d020      	beq.n	8004fbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7e:	4a6a      	ldr	r2, [pc, #424]	@ (8005128 <I2C_ITError+0x25c>)
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fd56 	bl	8002a38 <HAL_DMA_Abort_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8089 	beq.w	80050a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
 8004fba:	e074      	b.n	80050a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	4a59      	ldr	r2, [pc, #356]	@ (8005128 <I2C_ITError+0x25c>)
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd fd35 	bl	8002a38 <HAL_DMA_Abort_IT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d068      	beq.n	80050a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d10b      	bne.n	8004ffa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800501c:	4610      	mov	r0, r2
 800501e:	4798      	blx	r3
 8005020:	e041      	b.n	80050a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b60      	cmp	r3, #96	@ 0x60
 800502c:	d125      	bne.n	800507a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b40      	cmp	r3, #64	@ 0x40
 8005048:	d10b      	bne.n	8005062 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe febd 	bl	8003df2 <HAL_I2C_AbortCpltCallback>
 8005078:	e015      	b.n	80050a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d10b      	bne.n	80050a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fe fe9d 	bl	8003de0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10e      	bne.n	80050d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d113      	bne.n	8005120 <I2C_ITError+0x254>
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b28      	cmp	r3, #40	@ 0x28
 80050fc:	d110      	bne.n	8005120 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a0a      	ldr	r2, [pc, #40]	@ (800512c <I2C_ITError+0x260>)
 8005102:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe fe45 	bl	8003daa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	0800535d 	.word	0x0800535d
 800512c:	ffff0000 	.word	0xffff0000

08005130 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800514c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005162:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005170:	2200      	movs	r2, #0
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800518a:	2b21      	cmp	r3, #33	@ 0x21
 800518c:	d007      	beq.n	800519e <I2C_DMAXferCplt+0x6e>
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005194:	2b22      	cmp	r3, #34	@ 0x22
 8005196:	d131      	bne.n	80051fc <I2C_DMAXferCplt+0xcc>
 8005198:	7cbb      	ldrb	r3, [r7, #18]
 800519a:	2b20      	cmp	r3, #32
 800519c:	d12e      	bne.n	80051fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	2b29      	cmp	r3, #41	@ 0x29
 80051b8:	d10a      	bne.n	80051d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2221      	movs	r2, #33	@ 0x21
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2228      	movs	r2, #40	@ 0x28
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051c8:	6978      	ldr	r0, [r7, #20]
 80051ca:	f7fe fdcf 	bl	8003d6c <HAL_I2C_SlaveTxCpltCallback>
 80051ce:	e00c      	b.n	80051ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d4:	d109      	bne.n	80051ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2222      	movs	r2, #34	@ 0x22
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2228      	movs	r2, #40	@ 0x28
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051e4:	6978      	ldr	r0, [r7, #20]
 80051e6:	f7fe fdca 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051fa:	e074      	b.n	80052e6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d06e      	beq.n	80052e6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d107      	bne.n	8005222 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005220:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005230:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005238:	d009      	beq.n	800524e <I2C_DMAXferCplt+0x11e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d006      	beq.n	800524e <I2C_DMAXferCplt+0x11e>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005246:	d002      	beq.n	800524e <I2C_DMAXferCplt+0x11e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b20      	cmp	r3, #32
 800524c:	d107      	bne.n	800525e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800525c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800526c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800527c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800528c:	6978      	ldr	r0, [r7, #20]
 800528e:	f7fe fda7 	bl	8003de0 <HAL_I2C_ErrorCallback>
}
 8005292:	e028      	b.n	80052e6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d10a      	bne.n	80052be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7fe fd89 	bl	8003dce <HAL_I2C_MemRxCpltCallback>
}
 80052bc:	e013      	b.n	80052e6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d002      	beq.n	80052d2 <I2C_DMAXferCplt+0x1a2>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d103      	bne.n	80052da <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d8:	e002      	b.n	80052e0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2212      	movs	r2, #18
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7fe fd3a 	bl	8003d5a <HAL_I2C_MasterRxCpltCallback>
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005308:	2200      	movs	r2, #0
 800530a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	f043 0210 	orr.w	r2, r3, #16
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7fe fd46 	bl	8003de0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005374:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005376:	4b4b      	ldr	r3, [pc, #300]	@ (80054a4 <I2C_DMAAbort+0x148>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	08db      	lsrs	r3, r3, #3
 800537c:	4a4a      	ldr	r2, [pc, #296]	@ (80054a8 <I2C_DMAAbort+0x14c>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	0a1a      	lsrs	r2, r3, #8
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	00da      	lsls	r2, r3, #3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80053a2:	e00a      	b.n	80053ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b8:	d0ea      	beq.n	8005390 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c6:	2200      	movs	r2, #0
 80053c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	2200      	movs	r2, #0
 80053d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fc:	2200      	movs	r2, #0
 80053fe:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	2200      	movs	r2, #0
 800540e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b60      	cmp	r3, #96	@ 0x60
 800542a:	d10e      	bne.n	800544a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005442:	6978      	ldr	r0, [r7, #20]
 8005444:	f7fe fcd5 	bl	8003df2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005448:	e027      	b.n	800549a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005450:	2b28      	cmp	r3, #40	@ 0x28
 8005452:	d117      	bne.n	8005484 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005472:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2228      	movs	r2, #40	@ 0x28
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005482:	e007      	b.n	8005494 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005494:	6978      	ldr	r0, [r7, #20]
 8005496:	f7fe fca3 	bl	8003de0 <HAL_I2C_ErrorCallback>
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000
 80054a8:	14f8b589 	.word	0x14f8b589

080054ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054b8:	4b13      	ldr	r3, [pc, #76]	@ (8005508 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	08db      	lsrs	r3, r3, #3
 80054be:	4a13      	ldr	r2, [pc, #76]	@ (800550c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	0a1a      	lsrs	r2, r3, #8
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e008      	b.n	80054fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f8:	d0e9      	beq.n	80054ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000000 	.word	0x20000000
 800550c:	14f8b589 	.word	0x14f8b589

08005510 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005520:	d103      	bne.n	800552a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005528:	e007      	b.n	800553a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005532:	d102      	bne.n	800553a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2208      	movs	r2, #8
 8005538:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e272      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8087 	beq.w	8005672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005564:	4b92      	ldr	r3, [pc, #584]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b04      	cmp	r3, #4
 800556e:	d00c      	beq.n	800558a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005570:	4b8f      	ldr	r3, [pc, #572]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b08      	cmp	r3, #8
 800557a:	d112      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5e>
 800557c:	4b8c      	ldr	r3, [pc, #560]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005588:	d10b      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558a:	4b89      	ldr	r3, [pc, #548]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d06c      	beq.n	8005670 <HAL_RCC_OscConfig+0x12c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d168      	bne.n	8005670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e24c      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x76>
 80055ac:	4b80      	ldr	r3, [pc, #512]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7f      	ldr	r2, [pc, #508]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e02e      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x98>
 80055c2:	4b7b      	ldr	r3, [pc, #492]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7a      	ldr	r2, [pc, #488]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b78      	ldr	r3, [pc, #480]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a77      	ldr	r2, [pc, #476]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e01d      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCC_OscConfig+0xbc>
 80055e6:	4b72      	ldr	r3, [pc, #456]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a71      	ldr	r2, [pc, #452]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a6e      	ldr	r2, [pc, #440]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e00b      	b.n	8005618 <HAL_RCC_OscConfig+0xd4>
 8005600:	4b6b      	ldr	r3, [pc, #428]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6a      	ldr	r2, [pc, #424]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b68      	ldr	r3, [pc, #416]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a67      	ldr	r2, [pc, #412]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fc fa8a 	bl	8001b38 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005628:	f7fc fa86 	bl	8001b38 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	@ 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e200      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	4b5d      	ldr	r3, [pc, #372]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0xe4>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fc fa76 	bl	8001b38 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005650:	f7fc fa72 	bl	8001b38 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	@ 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e1ec      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	4b53      	ldr	r3, [pc, #332]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x10c>
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d063      	beq.n	8005746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800567e:	4b4c      	ldr	r3, [pc, #304]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800568a:	4b49      	ldr	r3, [pc, #292]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b08      	cmp	r3, #8
 8005694:	d11c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x18c>
 8005696:	4b46      	ldr	r3, [pc, #280]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d116      	bne.n	80056d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	4b43      	ldr	r3, [pc, #268]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_RCC_OscConfig+0x176>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e1c0      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ba:	4b3d      	ldr	r3, [pc, #244]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4939      	ldr	r1, [pc, #228]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ce:	e03a      	b.n	8005746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d8:	4b36      	ldr	r3, [pc, #216]	@ (80057b4 <HAL_RCC_OscConfig+0x270>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fc fa2b 	bl	8001b38 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e6:	f7fc fa27 	bl	8001b38 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e1a1      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f8:	4b2d      	ldr	r3, [pc, #180]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005704:	4b2a      	ldr	r3, [pc, #168]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4927      	ldr	r1, [pc, #156]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	e015      	b.n	8005746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571a:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <HAL_RCC_OscConfig+0x270>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fc fa0a 	bl	8001b38 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005728:	f7fc fa06 	bl	8001b38 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e180      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03a      	beq.n	80057c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d019      	beq.n	800578e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575a:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <HAL_RCC_OscConfig+0x274>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005760:	f7fc f9ea 	bl	8001b38 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005768:	f7fc f9e6 	bl	8001b38 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e160      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <HAL_RCC_OscConfig+0x26c>)
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005786:	2001      	movs	r0, #1
 8005788:	f000 face 	bl	8005d28 <RCC_Delay>
 800578c:	e01c      	b.n	80057c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578e:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <HAL_RCC_OscConfig+0x274>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005794:	f7fc f9d0 	bl	8001b38 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800579a:	e00f      	b.n	80057bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800579c:	f7fc f9cc 	bl	8001b38 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d908      	bls.n	80057bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e146      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	42420000 	.word	0x42420000
 80057b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057bc:	4b92      	ldr	r3, [pc, #584]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e9      	bne.n	800579c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80a6 	beq.w	8005922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b8b      	ldr	r3, [pc, #556]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	4b88      	ldr	r3, [pc, #544]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	4a87      	ldr	r2, [pc, #540]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	61d3      	str	r3, [r2, #28]
 80057f2:	4b85      	ldr	r3, [pc, #532]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057fe:	2301      	movs	r3, #1
 8005800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005802:	4b82      	ldr	r3, [pc, #520]	@ (8005a0c <HAL_RCC_OscConfig+0x4c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d118      	bne.n	8005840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800580e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a0c <HAL_RCC_OscConfig+0x4c8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a7e      	ldr	r2, [pc, #504]	@ (8005a0c <HAL_RCC_OscConfig+0x4c8>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581a:	f7fc f98d 	bl	8001b38 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005822:	f7fc f989 	bl	8001b38 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b64      	cmp	r3, #100	@ 0x64
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e103      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005834:	4b75      	ldr	r3, [pc, #468]	@ (8005a0c <HAL_RCC_OscConfig+0x4c8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <HAL_RCC_OscConfig+0x312>
 8005848:	4b6f      	ldr	r3, [pc, #444]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6213      	str	r3, [r2, #32]
 8005854:	e02d      	b.n	80058b2 <HAL_RCC_OscConfig+0x36e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x334>
 800585e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	4a69      	ldr	r2, [pc, #420]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	6213      	str	r3, [r2, #32]
 800586a:	4b67      	ldr	r3, [pc, #412]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4a66      	ldr	r2, [pc, #408]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	f023 0304 	bic.w	r3, r3, #4
 8005874:	6213      	str	r3, [r2, #32]
 8005876:	e01c      	b.n	80058b2 <HAL_RCC_OscConfig+0x36e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b05      	cmp	r3, #5
 800587e:	d10c      	bne.n	800589a <HAL_RCC_OscConfig+0x356>
 8005880:	4b61      	ldr	r3, [pc, #388]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	4a60      	ldr	r2, [pc, #384]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005886:	f043 0304 	orr.w	r3, r3, #4
 800588a:	6213      	str	r3, [r2, #32]
 800588c:	4b5e      	ldr	r3, [pc, #376]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4a5d      	ldr	r2, [pc, #372]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6213      	str	r3, [r2, #32]
 8005898:	e00b      	b.n	80058b2 <HAL_RCC_OscConfig+0x36e>
 800589a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	4a5a      	ldr	r2, [pc, #360]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	6213      	str	r3, [r2, #32]
 80058a6:	4b58      	ldr	r3, [pc, #352]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	4a57      	ldr	r2, [pc, #348]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	f023 0304 	bic.w	r3, r3, #4
 80058b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d015      	beq.n	80058e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ba:	f7fc f93d 	bl	8001b38 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fc f939 	bl	8001b38 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e0b1      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ee      	beq.n	80058c2 <HAL_RCC_OscConfig+0x37e>
 80058e4:	e014      	b.n	8005910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e6:	f7fc f927 	bl	8001b38 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fc f923 	bl	8001b38 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e09b      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005904:	4b40      	ldr	r3, [pc, #256]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1ee      	bne.n	80058ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d105      	bne.n	8005922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005916:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800591c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8087 	beq.w	8005a3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800592c:	4b36      	ldr	r3, [pc, #216]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 030c 	and.w	r3, r3, #12
 8005934:	2b08      	cmp	r3, #8
 8005936:	d061      	beq.n	80059fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d146      	bne.n	80059ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005940:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <HAL_RCC_OscConfig+0x4cc>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005946:	f7fc f8f7 	bl	8001b38 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594e:	f7fc f8f3 	bl	8001b38 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e06d      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005960:	4b29      	ldr	r3, [pc, #164]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005974:	d108      	bne.n	8005988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005976:	4b24      	ldr	r3, [pc, #144]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4921      	ldr	r1, [pc, #132]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 8005984:	4313      	orrs	r3, r2
 8005986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005988:	4b1f      	ldr	r3, [pc, #124]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a19      	ldr	r1, [r3, #32]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	430b      	orrs	r3, r1
 800599a:	491b      	ldr	r1, [pc, #108]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x4cc>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fc f8c7 	bl	8001b38 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ae:	f7fc f8c3 	bl	8001b38 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e03d      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059c0:	4b11      	ldr	r3, [pc, #68]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x46a>
 80059cc:	e035      	b.n	8005a3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0x4cc>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fc f8b0 	bl	8001b38 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fc f8ac 	bl	8001b38 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e026      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_RCC_OscConfig+0x4c4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x498>
 80059fa:	e01e      	b.n	8005a3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e019      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <HAL_RCC_OscConfig+0x500>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000

08005a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d0      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d910      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b67      	ldr	r3, [pc, #412]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 0207 	bic.w	r2, r3, #7
 8005a72:	4965      	ldr	r1, [pc, #404]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0b8      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa4:	4b59      	ldr	r3, [pc, #356]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a58      	ldr	r2, [pc, #352]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005aae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005abc:	4b53      	ldr	r3, [pc, #332]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a52      	ldr	r2, [pc, #328]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005ac6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac8:	4b50      	ldr	r3, [pc, #320]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	494d      	ldr	r1, [pc, #308]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d040      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aee:	4b47      	ldr	r3, [pc, #284]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d115      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e07f      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b06:	4b41      	ldr	r3, [pc, #260]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e073      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b16:	4b3d      	ldr	r3, [pc, #244]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e06b      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b26:	4b39      	ldr	r3, [pc, #228]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f023 0203 	bic.w	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4936      	ldr	r1, [pc, #216]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b38:	f7fb fffe 	bl	8001b38 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fb fffa 	bl	8001b38 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e053      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	4b2d      	ldr	r3, [pc, #180]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 020c 	and.w	r2, r3, #12
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1eb      	bne.n	8005b40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d210      	bcs.n	8005b98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 0207 	bic.w	r2, r3, #7
 8005b7e:	4922      	ldr	r1, [pc, #136]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b86:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e032      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba4:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4916      	ldr	r1, [pc, #88]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bc2:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	490e      	ldr	r1, [pc, #56]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bd6:	f000 f821 	bl	8005c1c <HAL_RCC_GetSysClockFreq>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	490a      	ldr	r1, [pc, #40]	@ (8005c10 <HAL_RCC_ClockConfig+0x1c8>)
 8005be8:	5ccb      	ldrb	r3, [r1, r3]
 8005bea:	fa22 f303 	lsr.w	r3, r2, r3
 8005bee:	4a09      	ldr	r2, [pc, #36]	@ (8005c14 <HAL_RCC_ClockConfig+0x1cc>)
 8005bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bf2:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <HAL_RCC_ClockConfig+0x1d0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fb ff5c 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40022000 	.word	0x40022000
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	08008eb4 	.word	0x08008eb4
 8005c14:	20000000 	.word	0x20000000
 8005c18:	20000004 	.word	0x20000004

08005c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c36:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d002      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x30>
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d003      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x36>
 8005c4a:	e027      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c4c:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c4e:	613b      	str	r3, [r7, #16]
      break;
 8005c50:	e027      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	0c9b      	lsrs	r3, r3, #18
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	4a17      	ldr	r2, [pc, #92]	@ (8005cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
 8005c5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c6a:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	0c5b      	lsrs	r3, r3, #17
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	4a11      	ldr	r2, [pc, #68]	@ (8005cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c76:	5cd3      	ldrb	r3, [r2, r3]
 8005c78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c7e:	fb03 f202 	mul.w	r2, r3, r2
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e004      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	613b      	str	r3, [r7, #16]
      break;
 8005c9a:	e002      	b.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c9e:	613b      	str	r3, [r7, #16]
      break;
 8005ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ca2:	693b      	ldr	r3, [r7, #16]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	007a1200 	.word	0x007a1200
 8005cb8:	08008ecc 	.word	0x08008ecc
 8005cbc:	08008edc 	.word	0x08008edc
 8005cc0:	003d0900 	.word	0x003d0900

08005cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc8:	4b02      	ldr	r3, [pc, #8]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	20000000 	.word	0x20000000

08005cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cdc:	f7ff fff2 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4903      	ldr	r1, [pc, #12]	@ (8005cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	08008ec4 	.word	0x08008ec4

08005d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d04:	f7ff ffde 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	0adb      	lsrs	r3, r3, #11
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4903      	ldr	r1, [pc, #12]	@ (8005d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40021000 	.word	0x40021000
 8005d24:	08008ec4 	.word	0x08008ec4

08005d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d30:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <RCC_Delay+0x34>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <RCC_Delay+0x38>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0a5b      	lsrs	r3, r3, #9
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d44:	bf00      	nop
  }
  while (Delay --);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	60fa      	str	r2, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f9      	bne.n	8005d44 <RCC_Delay+0x1c>
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	10624dd3 	.word	0x10624dd3

08005d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d07d      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d84:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10d      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d90:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4a4b      	ldr	r2, [pc, #300]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d9a:	61d3      	str	r3, [r2, #28]
 8005d9c:	4b49      	ldr	r3, [pc, #292]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	4b46      	ldr	r3, [pc, #280]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d118      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db8:	4b43      	ldr	r3, [pc, #268]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a42      	ldr	r2, [pc, #264]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dc4:	f7fb feb8 	bl	8001b38 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dca:	e008      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dcc:	f7fb feb4 	bl	8001b38 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	@ 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e06d      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dde:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dea:	4b36      	ldr	r3, [pc, #216]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d02e      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d027      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e08:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e12:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e18:	4b2c      	ldr	r3, [pc, #176]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e1e:	4a29      	ldr	r2, [pc, #164]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fb fe83 	bl	8001b38 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	e00a      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fb fe7f 	bl	8001b38 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e036      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ee      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e58:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4917      	ldr	r1, [pc, #92]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d105      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e70:	4b14      	ldr	r3, [pc, #80]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4a13      	ldr	r2, [pc, #76]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e88:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	490b      	ldr	r1, [pc, #44]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea6:	4b07      	ldr	r3, [pc, #28]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	4904      	ldr	r1, [pc, #16]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42420440 	.word	0x42420440

08005ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	f200 808a 	bhi.w	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d045      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d075      	beq.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f06:	e082      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005f08:	4b46      	ldr	r3, [pc, #280]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f0e:	4b45      	ldr	r3, [pc, #276]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d07b      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	0c9b      	lsrs	r3, r3, #18
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	4a41      	ldr	r2, [pc, #260]	@ (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d015      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f32:	4b3c      	ldr	r3, [pc, #240]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	0c5b      	lsrs	r3, r3, #17
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005f3e:	5cd3      	ldrb	r3, [r2, r3]
 8005f40:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f4c:	4a38      	ldr	r2, [pc, #224]	@ (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4a34      	ldr	r2, [pc, #208]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f68:	4b2e      	ldr	r3, [pc, #184]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f74:	d102      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	61bb      	str	r3, [r7, #24]
      break;
 8005f7a:	e04a      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4a2d      	ldr	r2, [pc, #180]	@ (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
      break;
 8005f8a:	e042      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005f8c:	4b25      	ldr	r3, [pc, #148]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9c:	d108      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e01f      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fba:	d109      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005fbc:	4b19      	ldr	r3, [pc, #100]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005fc8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e00f      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fda:	d11c      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005fdc:	4b11      	ldr	r3, [pc, #68]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d016      	beq.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005fe8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005fec:	61bb      	str	r3, [r7, #24]
      break;
 8005fee:	e012      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ff0:	e011      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ff2:	f7ff fe85 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	0b9b      	lsrs	r3, r3, #14
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	3301      	adds	r3, #1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fbb2 f3f3 	udiv	r3, r2, r3
 800600a:	61bb      	str	r3, [r7, #24]
      break;
 800600c:	e004      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800600e:	bf00      	nop
 8006010:	e002      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006012:	bf00      	nop
 8006014:	e000      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006016:	bf00      	nop
    }
  }
  return (frequency);
 8006018:	69bb      	ldr	r3, [r7, #24]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	08008ee0 	.word	0x08008ee0
 800602c:	08008ef0 	.word	0x08008ef0
 8006030:	007a1200 	.word	0x007a1200
 8006034:	003d0900 	.word	0x003d0900
 8006038:	aaaaaaab 	.word	0xaaaaaaab

0800603c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e076      	b.n	800613c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800605e:	d009      	beq.n	8006074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	61da      	str	r2, [r3, #28]
 8006066:	e005      	b.n	8006074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb fa10 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	ea42 0103 	orr.w	r1, r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	0c1a      	lsrs	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f002 0204 	and.w	r2, r2, #4
 800611a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800612a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	@ 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006152:	2301      	movs	r3, #1
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006156:	f7fb fcef 	bl	8001b38 <HAL_GetTick>
 800615a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006162:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d00c      	beq.n	800618e <HAL_SPI_TransmitReceive+0x4a>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800617a:	d106      	bne.n	800618a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <HAL_SPI_TransmitReceive+0x46>
 8006184:	7ffb      	ldrb	r3, [r7, #31]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d001      	beq.n	800618e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
 800618c:	e17f      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x5c>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x5c>
 800619a:	887b      	ldrh	r3, [r7, #2]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e174      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x6e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e16d      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d003      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2205      	movs	r2, #5
 80061ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	887a      	ldrh	r2, [r7, #2]
 80061de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	887a      	ldrh	r2, [r7, #2]
 80061f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	887a      	ldrh	r2, [r7, #2]
 80061f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620e:	2b40      	cmp	r3, #64	@ 0x40
 8006210:	d007      	beq.n	8006222 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622a:	d17e      	bne.n	800632a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_SPI_TransmitReceive+0xf6>
 8006234:	8afb      	ldrh	r3, [r7, #22]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d16c      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	881a      	ldrh	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	1c9a      	adds	r2, r3, #2
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625e:	e059      	b.n	8006314 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d11b      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x162>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d016      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x162>
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	2b01      	cmp	r3, #1
 800627c:	d113      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	1c9a      	adds	r2, r3, #2
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d119      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x1a4>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d014      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c8:	b292      	uxth	r2, r2
 80062ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	1c9a      	adds	r2, r3, #2
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e4:	2301      	movs	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062e8:	f7fb fc26 	bl	8001b38 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d80d      	bhi.n	8006314 <HAL_SPI_TransmitReceive+0x1d0>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d009      	beq.n	8006314 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e0bc      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1a0      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x11c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d19b      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x11c>
 8006328:	e082      	b.n	8006430 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x1f4>
 8006332:	8afb      	ldrh	r3, [r7, #22]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d171      	bne.n	800641c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800635e:	e05d      	b.n	800641c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d11c      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x264>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x264>
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	2b01      	cmp	r3, #1
 800637c:	d114      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d119      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x2a6>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d014      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e6:	2301      	movs	r3, #1
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063ea:	f7fb fba5 	bl	8001b38 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d803      	bhi.n	8006402 <HAL_SPI_TransmitReceive+0x2be>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d102      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2c4>
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e038      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d19c      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x21c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d197      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fd35 	bl	8006ea4 <SPI_EndRxTxTransaction>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e01d      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3728      	adds	r7, #40	@ 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d001      	beq.n	80064b6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
 80064b4:	e097      	b.n	80065e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit_DMA+0x2a>
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e08f      	b.n	80065e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_SPI_Transmit_DMA+0x3c>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e088      	b.n	80065e6 <HAL_SPI_Transmit_DMA+0x14e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2203      	movs	r2, #3
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	88fa      	ldrh	r2, [r7, #6]
 80064fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006522:	d10f      	bne.n	8006544 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006542:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006548:	4a29      	ldr	r2, [pc, #164]	@ (80065f0 <HAL_SPI_Transmit_DMA+0x158>)
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006550:	4a28      	ldr	r2, [pc, #160]	@ (80065f4 <HAL_SPI_Transmit_DMA+0x15c>)
 8006552:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006558:	4a27      	ldr	r2, [pc, #156]	@ (80065f8 <HAL_SPI_Transmit_DMA+0x160>)
 800655a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006560:	2200      	movs	r2, #0
 8006562:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	4619      	mov	r1, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800657c:	f7fc f9c0 	bl	8002900 <HAL_DMA_Start_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	f043 0210 	orr.w	r2, r3, #16
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e023      	b.n	80065e6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d007      	beq.n	80065bc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0220 	orr.w	r2, r2, #32
 80065d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0202 	orr.w	r2, r2, #2
 80065e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	08006c33 	.word	0x08006c33
 80065f4:	08006a59 	.word	0x08006a59
 80065f8:	08006c87 	.word	0x08006c87

080065fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006610:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d00c      	beq.n	8006638 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006624:	d106      	bne.n	8006634 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <HAL_SPI_TransmitReceive_DMA+0x38>
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b04      	cmp	r3, #4
 8006632:	d001      	beq.n	8006638 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
 8006636:	e0cf      	b.n	80067d8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0c4      	b.n	80067d8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006658:	2302      	movs	r3, #2
 800665a:	e0bd      	b.n	80067d8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b04      	cmp	r3, #4
 800666e:	d003      	beq.n	8006678 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2205      	movs	r2, #5
 8006674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	887a      	ldrh	r2, [r7, #2]
 8006688:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	887a      	ldrh	r2, [r7, #2]
 800668e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	887a      	ldrh	r2, [r7, #2]
 800669a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	887a      	ldrh	r2, [r7, #2]
 80066a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d108      	bne.n	80066cc <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066be:	4a48      	ldr	r2, [pc, #288]	@ (80067e0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80066c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c6:	4a47      	ldr	r2, [pc, #284]	@ (80067e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80066c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80066ca:	e007      	b.n	80066dc <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d0:	4a45      	ldr	r2, [pc, #276]	@ (80067e8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80066d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d8:	4a44      	ldr	r2, [pc, #272]	@ (80067ec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80066da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e0:	4a43      	ldr	r2, [pc, #268]	@ (80067f0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e8:	2200      	movs	r2, #0
 80066ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	4619      	mov	r1, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006702:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006704:	f7fc f8fc 	bl	8002900 <HAL_DMA_Start_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	f043 0210 	orr.w	r2, r3, #16
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e058      	b.n	80067d8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673a:	2200      	movs	r2, #0
 800673c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006742:	2200      	movs	r2, #0
 8006744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006752:	2200      	movs	r2, #0
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	4619      	mov	r1, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800676c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800676e:	f7fc f8c7 	bl	8002900 <HAL_DMA_Start_IT>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	f043 0210 	orr.w	r2, r3, #16
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e023      	b.n	80067d8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679a:	2b40      	cmp	r3, #64	@ 0x40
 800679c:	d007      	beq.n	80067ae <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ac:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0220 	orr.w	r2, r2, #32
 80067c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0202 	orr.w	r2, r2, #2
 80067d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	08006c4f 	.word	0x08006c4f
 80067e4:	08006aff 	.word	0x08006aff
 80067e8:	08006c6b 	.word	0x08006c6b
 80067ec:	08006ba5 	.word	0x08006ba5
 80067f0:	08006c87 	.word	0x08006c87

080067f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	099b      	lsrs	r3, r3, #6
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10f      	bne.n	8006838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
    return;
 8006836:	e0be      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_SPI_IRQHandler+0x66>
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	09db      	lsrs	r3, r3, #7
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
    return;
 8006858:	e0ad      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_SPI_IRQHandler+0x80>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80a1 	beq.w	80069b6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 809a 	beq.w	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	099b      	lsrs	r3, r3, #6
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d023      	beq.n	80068d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d011      	beq.n	80068be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	e00b      	b.n	80068d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
        return;
 80068d4:	e06f      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d014      	beq.n	800690c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	f043 0201 	orr.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04f      	beq.n	80069b4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006922:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_SPI_IRQHandler+0x14c>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d034      	beq.n	80069aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0203 	bic.w	r2, r2, #3
 800694e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d011      	beq.n	800697c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <HAL_SPI_IRQHandler+0x1c8>)
 800695e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006964:	4618      	mov	r0, r3
 8006966:	f7fc f867 	bl	8002a38 <HAL_DMA_Abort_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006974:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006988:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <HAL_SPI_IRQHandler+0x1c8>)
 800698a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006990:	4618      	mov	r0, r3
 8006992:	f7fc f851 	bl	8002a38 <HAL_DMA_Abort_IT>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80069a8:	e003      	b.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f83e 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069b0:	e000      	b.n	80069b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80069b2:	bf00      	nop
    return;
 80069b4:	bf00      	nop
  }
}
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	08006cc7 	.word	0x08006cc7

080069c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr

080069f6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a4c:	b2db      	uxtb	r3, r3
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a66:	f7fb f867 	bl	8001b38 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d03b      	beq.n	8006af2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0220 	bic.w	r2, r2, #32
 8006a88:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0202 	bic.w	r2, r2, #2
 8006a98:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	2164      	movs	r1, #100	@ 0x64
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	f000 fa00 	bl	8006ea4 <SPI_EndRxTxTransaction>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff9e 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006af0:	e002      	b.n	8006af8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	f7ff ff64 	bl	80069c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b0c:	f7fb f814 	bl	8001b38 <HAL_GetTick>
 8006b10:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d03b      	beq.n	8006b98 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0220 	bic.w	r2, r2, #32
 8006b2e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10d      	bne.n	8006b54 <SPI_DMAReceiveCplt+0x56>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b40:	d108      	bne.n	8006b54 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0203 	bic.w	r2, r2, #3
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	e007      	b.n	8006b64 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	2164      	movs	r1, #100	@ 0x64
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f949 	bl	8006e00 <SPI_EndRxTransaction>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff ff4b 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b96:	e002      	b.n	8006b9e <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff ff1a 	bl	80069d2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bb2:	f7fa ffc1 	bl	8001b38 <HAL_GetTick>
 8006bb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d02f      	beq.n	8006c26 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0220 	bic.w	r2, r2, #32
 8006bd4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	2164      	movs	r1, #100	@ 0x64
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f962 	bl	8006ea4 <SPI_EndRxTxTransaction>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0203 	bic.w	r2, r2, #3
 8006c00:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff ff04 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c24:	e002      	b.n	8006c2c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fedc 	bl	80069e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff fed8 	bl	80069f6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7ff fed3 	bl	8006a08 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fece 	bl	8006a1a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0203 	bic.w	r2, r2, #3
 8006ca2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca8:	f043 0210 	orr.w	r2, r3, #16
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff feb7 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fea3 	bl	8006a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d00:	f7fa ff1a 	bl	8001b38 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d10:	f7fa ff12 	bl	8001b38 <HAL_GetTick>
 8006d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d16:	4b39      	ldr	r3, [pc, #228]	@ (8006dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	0d1b      	lsrs	r3, r3, #20
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	fb02 f303 	mul.w	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d26:	e054      	b.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d050      	beq.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d30:	f7fa ff02 	bl	8001b38 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d902      	bls.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d13d      	bne.n	8006dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d5e:	d111      	bne.n	8006d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d68:	d004      	beq.n	8006d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d72:	d107      	bne.n	8006d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8c:	d10f      	bne.n	8006dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e017      	b.n	8006df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d19b      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000000 	.word	0x20000000

08006e00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e14:	d111      	bne.n	8006e3a <SPI_EndRxTransaction+0x3a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e1e:	d004      	beq.n	8006e2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e28:	d107      	bne.n	8006e3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e38:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e42:	d117      	bne.n	8006e74 <SPI_EndRxTransaction+0x74>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4c:	d112      	bne.n	8006e74 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	2101      	movs	r1, #1
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff ff49 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e68:	f043 0220 	orr.w	r2, r3, #32
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e013      	b.n	8006e9c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2180      	movs	r1, #128	@ 0x80
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ff36 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e000      	b.n	8006e9c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	2102      	movs	r1, #2
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff ff18 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e013      	b.n	8006efe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	2180      	movs	r1, #128	@ 0x80
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff05 	bl	8006cf0 <SPI_WaitFlagStateUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e000      	b.n	8006efe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e041      	b.n	8006f9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fa fce1 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f000 fa5b 	bl	8007400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d001      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e03a      	b.n	8007032 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a18      	ldr	r2, [pc, #96]	@ (800703c <HAL_TIM_Base_Start_IT+0x98>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x58>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe6:	d009      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x58>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a14      	ldr	r2, [pc, #80]	@ (8007040 <HAL_TIM_Base_Start_IT+0x9c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x58>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	@ (8007044 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d111      	bne.n	8007020 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b06      	cmp	r3, #6
 800700c:	d010      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0201 	orr.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	e007      	b.n	8007030 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800

08007048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d020      	beq.n	80070ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01b      	beq.n	80070ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0202 	mvn.w	r2, #2
 800707c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f998 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f98b 	bl	80073b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f99a 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0204 	mvn.w	r2, #4
 80070c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f972 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f965 	bl	80073b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f974 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01b      	beq.n	8007144 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0208 	mvn.w	r2, #8
 8007114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f94c 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f93f 	bl	80073b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f94e 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0210 	mvn.w	r2, #16
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2208      	movs	r2, #8
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f926 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f919 	bl	80073b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f928 	bl	80073da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0201 	mvn.w	r2, #1
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7f9 fbf6 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa7f 	bl	80076d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8f8 	bl	80073ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0220 	mvn.w	r2, #32
 8007218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa52 	bl	80076c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIM_ConfigClockSource+0x1c>
 8007240:	2302      	movs	r3, #2
 8007242:	e0b4      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x186>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800726a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727c:	d03e      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0xd4>
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007282:	f200 8087 	bhi.w	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728a:	f000 8086 	beq.w	800739a <HAL_TIM_ConfigClockSource+0x172>
 800728e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007292:	d87f      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 8007294:	2b70      	cmp	r3, #112	@ 0x70
 8007296:	d01a      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0xa6>
 8007298:	2b70      	cmp	r3, #112	@ 0x70
 800729a:	d87b      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 800729c:	2b60      	cmp	r3, #96	@ 0x60
 800729e:	d050      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x11a>
 80072a0:	2b60      	cmp	r3, #96	@ 0x60
 80072a2:	d877      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072a4:	2b50      	cmp	r3, #80	@ 0x50
 80072a6:	d03c      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0xfa>
 80072a8:	2b50      	cmp	r3, #80	@ 0x50
 80072aa:	d873      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072ac:	2b40      	cmp	r3, #64	@ 0x40
 80072ae:	d058      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x13a>
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d86f      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072b4:	2b30      	cmp	r3, #48	@ 0x30
 80072b6:	d064      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072b8:	2b30      	cmp	r3, #48	@ 0x30
 80072ba:	d86b      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d060      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d867      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d05c      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d05a      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072cc:	e062      	b.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072de:	f000 f974 	bl	80075ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	609a      	str	r2, [r3, #8]
      break;
 80072fa:	e04f      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800730c:	f000 f95d 	bl	80075ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800731e:	609a      	str	r2, [r3, #8]
      break;
 8007320:	e03c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800732e:	461a      	mov	r2, r3
 8007330:	f000 f8d4 	bl	80074dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2150      	movs	r1, #80	@ 0x50
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f92b 	bl	8007596 <TIM_ITRx_SetConfig>
      break;
 8007340:	e02c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800734e:	461a      	mov	r2, r3
 8007350:	f000 f8f2 	bl	8007538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2160      	movs	r1, #96	@ 0x60
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f91b 	bl	8007596 <TIM_ITRx_SetConfig>
      break;
 8007360:	e01c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	461a      	mov	r2, r3
 8007370:	f000 f8b4 	bl	80074dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2140      	movs	r1, #64	@ 0x40
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f90b 	bl	8007596 <TIM_ITRx_SetConfig>
      break;
 8007380:	e00c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f000 f902 	bl	8007596 <TIM_ITRx_SetConfig>
      break;
 8007392:	e003      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	e000      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800739a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
	...

08007400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a2f      	ldr	r2, [pc, #188]	@ (80074d0 <TIM_Base_SetConfig+0xd0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00b      	beq.n	8007430 <TIM_Base_SetConfig+0x30>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741e:	d007      	beq.n	8007430 <TIM_Base_SetConfig+0x30>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a2c      	ldr	r2, [pc, #176]	@ (80074d4 <TIM_Base_SetConfig+0xd4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_Base_SetConfig+0x30>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a2b      	ldr	r2, [pc, #172]	@ (80074d8 <TIM_Base_SetConfig+0xd8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a22      	ldr	r2, [pc, #136]	@ (80074d0 <TIM_Base_SetConfig+0xd0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00b      	beq.n	8007462 <TIM_Base_SetConfig+0x62>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007450:	d007      	beq.n	8007462 <TIM_Base_SetConfig+0x62>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a1f      	ldr	r2, [pc, #124]	@ (80074d4 <TIM_Base_SetConfig+0xd4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d003      	beq.n	8007462 <TIM_Base_SetConfig+0x62>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a1e      	ldr	r2, [pc, #120]	@ (80074d8 <TIM_Base_SetConfig+0xd8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d108      	bne.n	8007474 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0d      	ldr	r2, [pc, #52]	@ (80074d0 <TIM_Base_SetConfig+0xd0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d103      	bne.n	80074a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	611a      	str	r2, [r3, #16]
  }
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800

080074dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f023 0201 	bic.w	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 030a 	bic.w	r3, r3, #10
 8007518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0210 	bic.w	r2, r3, #16
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	031b      	lsls	r3, r3, #12
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	621a      	str	r2, [r3, #32]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f043 0307 	orr.w	r3, r3, #7
 80075b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	021a      	lsls	r2, r3, #8
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	609a      	str	r2, [r3, #8]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr

08007608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e046      	b.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a16      	ldr	r2, [pc, #88]	@ (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766c:	d009      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a12      	ldr	r2, [pc, #72]	@ (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a10      	ldr	r2, [pc, #64]	@ (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10c      	bne.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4313      	orrs	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800

080076c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e042      	b.n	8007780 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fa f940 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2224      	movs	r2, #36	@ 0x24
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800772a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc7f 	bl	8008030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b0ba      	sub	sp, #232	@ 0xe8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10f      	bne.n	80077ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <HAL_UART_IRQHandler+0x66>
 80077da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb63 	bl	8007eb2 <UART_Receive_IT>
      return;
 80077ec:	e25b      	b.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80de 	beq.w	80079b4 <HAL_UART_IRQHandler+0x22c>
 80077f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007808:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80d1 	beq.w	80079b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <HAL_UART_IRQHandler+0xae>
 800781e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	f043 0201 	orr.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <HAL_UART_IRQHandler+0xd2>
 8007842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	f043 0202 	orr.w	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_UART_IRQHandler+0xf6>
 8007866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f043 0204 	orr.w	r2, r3, #4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <HAL_UART_IRQHandler+0x126>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	f043 0208 	orr.w	r2, r3, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 81f2 	beq.w	8007c9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_UART_IRQHandler+0x14e>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 faee 	bl	8007eb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <HAL_UART_IRQHandler+0x17a>
 80078fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04f      	beq.n	80079a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f9f8 	bl	8007cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d041      	beq.n	800799a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3314      	adds	r3, #20
 800791c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3314      	adds	r3, #20
 800793e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800794e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800795a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1d9      	bne.n	8007916 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b68 <HAL_UART_IRQHandler+0x3e0>)
 8007970:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	4618      	mov	r0, r3
 8007978:	f7fb f85e 	bl	8002a38 <HAL_DMA_Abort_IT>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d016      	beq.n	80079b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	e00e      	b.n	80079b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f99c 	bl	8007cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	e00a      	b.n	80079b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f998 	bl	8007cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	e006      	b.n	80079b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f994 	bl	8007cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80079ae:	e175      	b.n	8007c9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	bf00      	nop
    return;
 80079b2:	e173      	b.n	8007c9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	f040 814f 	bne.w	8007c5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8148 	beq.w	8007c5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8141 	beq.w	8007c5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80b6 	beq.w	8007b6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8145 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	f080 813e 	bcs.w	8007ca0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f000 8088 	beq.w	8007b48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1d9      	bne.n	8007a38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3314      	adds	r3, #20
 8007a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e1      	bne.n	8007a84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3314      	adds	r3, #20
 8007ae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007aea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e3      	bne.n	8007b06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fa ff3c 	bl	80029c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8bf 	bl	8007ce2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b64:	e09c      	b.n	8007ca0 <HAL_UART_IRQHandler+0x518>
 8007b66:	bf00      	nop
 8007b68:	08007dbd 	.word	0x08007dbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 808e 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8089 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007bb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e3      	bne.n	8007b92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e3      	bne.n	8007bca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	330c      	adds	r3, #12
 8007c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c34:	61fa      	str	r2, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	69b9      	ldr	r1, [r7, #24]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	617b      	str	r3, [r7, #20]
   return(result);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e3      	bne.n	8007c10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f844 	bl	8007ce2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c5a:	e023      	b.n	8007ca4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_IRQHandler+0x4f4>
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8b5 	bl	8007de4 <UART_Transmit_IT>
    return;
 8007c7a:	e014      	b.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8f4 	bl	8007e82 <UART_EndTransmit_IT>
    return;
 8007c9a:	e004      	b.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007c9c:	bf00      	nop
 8007c9e:	e002      	b.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ca4:	bf00      	nop
  }
}
 8007ca6:	37e8      	adds	r7, #232	@ 0xe8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr

08007cbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b095      	sub	sp, #84	@ 0x54
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d20:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d119      	bne.n	8007da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0310 	bic.w	r3, r3, #16
 8007d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d90:	61ba      	str	r2, [r7, #24]
 8007d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007db2:	bf00      	nop
 8007db4:	3754      	adds	r7, #84	@ 0x54
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr

08007dbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff ff7a 	bl	8007cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b21      	cmp	r3, #33	@ 0x21
 8007df6:	d13e      	bne.n	8007e76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e00:	d114      	bne.n	8007e2c <UART_Transmit_IT+0x48>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d110      	bne.n	8007e2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]
 8007e2a:	e008      	b.n	8007e3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	1c59      	adds	r1, r3, #1
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6211      	str	r1, [r2, #32]
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10f      	bne.n	8007e72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff ff02 	bl	8007cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08c      	sub	sp, #48	@ 0x30
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b22      	cmp	r3, #34	@ 0x22
 8007ec4:	f040 80ae 	bne.w	8008024 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed0:	d117      	bne.n	8007f02 <UART_Receive_IT+0x50>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d113      	bne.n	8007f02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f00:	e026      	b.n	8007f50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f14:	d007      	beq.n	8007f26 <UART_Receive_IT+0x74>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <UART_Receive_IT+0x82>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e008      	b.n	8007f46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d15d      	bne.n	8008020 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0220 	bic.w	r2, r2, #32
 8007f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695a      	ldr	r2, [r3, #20]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d135      	bne.n	8008016 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd0:	623a      	str	r2, [r7, #32]
 8007fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b10      	cmp	r3, #16
 8007ff0:	d10a      	bne.n	8008008 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fe67 	bl	8007ce2 <HAL_UARTEx_RxEventCallback>
 8008014:	e002      	b.n	800801c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fe51 	bl	8007cbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	e002      	b.n	8008026 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	e000      	b.n	8008026 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008024:	2302      	movs	r3, #2
  }
}
 8008026:	4618      	mov	r0, r3
 8008028:	3730      	adds	r7, #48	@ 0x30
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800806a:	f023 030c 	bic.w	r3, r3, #12
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	430b      	orrs	r3, r1
 8008076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a2c      	ldr	r2, [pc, #176]	@ (8008144 <UART_SetConfig+0x114>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d103      	bne.n	80080a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008098:	f7fd fe32 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	e002      	b.n	80080a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080a0:	f7fd fe1a 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80080a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009a      	lsls	r2, r3, #2
 80080b0:	441a      	add	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	4a22      	ldr	r2, [pc, #136]	@ (8008148 <UART_SetConfig+0x118>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	0119      	lsls	r1, r3, #4
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009a      	lsls	r2, r3, #2
 80080d0:	441a      	add	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80080dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008148 <UART_SetConfig+0x118>)
 80080de:	fba3 0302 	umull	r0, r3, r3, r2
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	2064      	movs	r0, #100	@ 0x64
 80080e6:	fb00 f303 	mul.w	r3, r0, r3
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	3332      	adds	r3, #50	@ 0x32
 80080f0:	4a15      	ldr	r2, [pc, #84]	@ (8008148 <UART_SetConfig+0x118>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080fc:	4419      	add	r1, r3
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009a      	lsls	r2, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	fbb2 f2f3 	udiv	r2, r2, r3
 8008114:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <UART_SetConfig+0x118>)
 8008116:	fba3 0302 	umull	r0, r3, r3, r2
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	2064      	movs	r0, #100	@ 0x64
 800811e:	fb00 f303 	mul.w	r3, r0, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	3332      	adds	r3, #50	@ 0x32
 8008128:	4a07      	ldr	r2, [pc, #28]	@ (8008148 <UART_SetConfig+0x118>)
 800812a:	fba2 2303 	umull	r2, r3, r2, r3
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	f003 020f 	and.w	r2, r3, #15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	440a      	add	r2, r1
 800813a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40013800 	.word	0x40013800
 8008148:	51eb851f 	.word	0x51eb851f

0800814c <OLED_Init>:
  * @function: void OLED_Init(void)
  * @description: OLED初始化
  * @return {*}
  */
 void OLED_Init(void)
 {
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0

     uint8_t i = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	71fb      	strb	r3, [r7, #7]
     for(i=0; i<23; i++)
 8008156:	2300      	movs	r3, #0
 8008158:	71fb      	strb	r3, [r7, #7]
 800815a:	e008      	b.n	800816e <OLED_Init+0x22>
     {
         Oled_WriteCommand(init_cmds[i]);
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	4a08      	ldr	r2, [pc, #32]	@ (8008180 <OLED_Init+0x34>)
 8008160:	5cd3      	ldrb	r3, [r2, r3]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f80e 	bl	8008184 <Oled_WriteCommand>
     for(i=0; i<23; i++)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	3301      	adds	r3, #1
 800816c:	71fb      	strb	r3, [r7, #7]
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b16      	cmp	r3, #22
 8008172:	d9f3      	bls.n	800815c <OLED_Init+0x10>
     }
     OLED_Clear();
 8008174:	f000 f82c 	bl	80081d0 <OLED_Clear>
 }
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	2000000c 	.word	0x2000000c

08008184 <Oled_WriteCommand>:
  * @description: 向设备写控制命令
  * @param {uint8_t} cmd 芯片手册规定的命令
  * @return {*}
  */
 void Oled_WriteCommand(uint8_t cmd)
 {
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteCommand(&hi2c1, OLED_I2C_ADDRESS, OLED_CMD, cmd);
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2200      	movs	r2, #0
 8008192:	213c      	movs	r1, #60	@ 0x3c
 8008194:	4803      	ldr	r0, [pc, #12]	@ (80081a4 <Oled_WriteCommand+0x20>)
 8008196:	f7f8 faab 	bl	80006f0 <HAL_I2C_WriteCommand>
 }
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000108 	.word	0x20000108

080081a8 <Oled_WriteData>:
  * @description: 向设备写控制数据
  * @param {uint8_t} data 数据
  * @return {*}
  */
 void Oled_WriteData(uint8_t data)
 {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteData(&hi2c1 ,OLED_I2C_ADDRESS,OLED_DATA,&data,1);
 80081b2:	1dfb      	adds	r3, r7, #7
 80081b4:	2201      	movs	r2, #1
 80081b6:	9200      	str	r2, [sp, #0]
 80081b8:	2240      	movs	r2, #64	@ 0x40
 80081ba:	213c      	movs	r1, #60	@ 0x3c
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <Oled_WriteData+0x24>)
 80081be:	f7f8 fabf 	bl	8000740 <HAL_I2C_WriteData>
 }
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000108 	.word	0x20000108

080081d0 <OLED_Clear>:
  * @function: OLED_Clear(void)
  * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
  * @return {*}
  */
 void OLED_Clear(void)
 {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
     uint8_t i,n;
     for(i=0;i<8;i++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	71fb      	strb	r3, [r7, #7]
 80081da:	e01e      	b.n	800821a <OLED_Clear+0x4a>
     {
         Oled_WriteCommand (0xb0+i);    //设置页地址（0~7）
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	3b50      	subs	r3, #80	@ 0x50
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff ffce 	bl	8008184 <Oled_WriteCommand>
         Oled_WriteCommand(0x00);      //设置显示位置—列低地址
 80081e8:	2000      	movs	r0, #0
 80081ea:	f7ff ffcb 	bl	8008184 <Oled_WriteCommand>
         Oled_WriteCommand(0x10);      //设置显示位置—列高地址
 80081ee:	2010      	movs	r0, #16
 80081f0:	f7ff ffc8 	bl	8008184 <Oled_WriteCommand>
         Oled_WriteCommand(0x2e);
 80081f4:	202e      	movs	r0, #46	@ 0x2e
 80081f6:	f7ff ffc5 	bl	8008184 <Oled_WriteCommand>
         for(n=0;n<128;n++)
 80081fa:	2300      	movs	r3, #0
 80081fc:	71bb      	strb	r3, [r7, #6]
 80081fe:	e005      	b.n	800820c <OLED_Clear+0x3c>
             Oled_WriteData(0);
 8008200:	2000      	movs	r0, #0
 8008202:	f7ff ffd1 	bl	80081a8 <Oled_WriteData>
         for(n=0;n<128;n++)
 8008206:	79bb      	ldrb	r3, [r7, #6]
 8008208:	3301      	adds	r3, #1
 800820a:	71bb      	strb	r3, [r7, #6]
 800820c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008210:	2b00      	cmp	r3, #0
 8008212:	daf5      	bge.n	8008200 <OLED_Clear+0x30>
     for(i=0;i<8;i++)
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	3301      	adds	r3, #1
 8008218:	71fb      	strb	r3, [r7, #7]
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b07      	cmp	r3, #7
 800821e:	d9dd      	bls.n	80081dc <OLED_Clear+0xc>
     }
 }
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <OLED_Set_Pos>:
  * @description: 坐标设置
  * @param {uint8_t} x,y
  * @return {*}
  */
 void OLED_Set_Pos(uint8_t x, uint8_t y)
 {
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	4603      	mov	r3, r0
 8008232:	460a      	mov	r2, r1
 8008234:	71fb      	strb	r3, [r7, #7]
 8008236:	4613      	mov	r3, r2
 8008238:	71bb      	strb	r3, [r7, #6]
     Oled_WriteCommand(0xb0+y);    //设置页地址（0~7）
 800823a:	79bb      	ldrb	r3, [r7, #6]
 800823c:	3b50      	subs	r3, #80	@ 0x50
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff ff9f 	bl	8008184 <Oled_WriteCommand>
     Oled_WriteCommand(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	091b      	lsrs	r3, r3, #4
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f043 0310 	orr.w	r3, r3, #16
 8008250:	b2db      	uxtb	r3, r3
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff ff96 	bl	8008184 <Oled_WriteCommand>
     Oled_WriteCommand(x&0x0f);    //设置显示位置—列低地址
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	b2db      	uxtb	r3, r3
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff ff8f 	bl	8008184 <Oled_WriteCommand>
 }
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <OLED_ShowChar>:
  * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
 {
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	461a      	mov	r2, r3
 800827e:	4623      	mov	r3, r4
 8008280:	71fb      	strb	r3, [r7, #7]
 8008282:	4603      	mov	r3, r0
 8008284:	71bb      	strb	r3, [r7, #6]
 8008286:	460b      	mov	r3, r1
 8008288:	717b      	strb	r3, [r7, #5]
 800828a:	4613      	mov	r3, r2
 800828c:	713b      	strb	r3, [r7, #4]
     unsigned char c=0,i=0;
 800828e:	2300      	movs	r3, #0
 8008290:	73bb      	strb	r3, [r7, #14]
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
         c=chr-' ';//得到偏移后的值
 8008296:	797b      	ldrb	r3, [r7, #5]
 8008298:	3b20      	subs	r3, #32
 800829a:	73bb      	strb	r3, [r7, #14]
         if(x>128-1){x=0;y=y+2;}
 800829c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da04      	bge.n	80082ae <OLED_ShowChar+0x3e>
 80082a4:	2300      	movs	r3, #0
 80082a6:	71fb      	strb	r3, [r7, #7]
 80082a8:	79bb      	ldrb	r3, [r7, #6]
 80082aa:	3302      	adds	r3, #2
 80082ac:	71bb      	strb	r3, [r7, #6]
         if(Char_Size ==16)
 80082ae:	793b      	ldrb	r3, [r7, #4]
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d154      	bne.n	800835e <OLED_ShowChar+0xee>
         {
             OLED_Set_Pos(x,y);
 80082b4:	79ba      	ldrb	r2, [r7, #6]
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff ffb5 	bl	800822a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e01b      	b.n	80082fe <OLED_ShowChar+0x8e>
                 {
                   if(Color_Turn)
 80082c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <OLED_ShowChar+0x76>
                       Oled_WriteData(~F8X16[c*16+i]);
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	011a      	lsls	r2, r3, #4
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4413      	add	r3, r2
 80082d6:	4a3c      	ldr	r2, [pc, #240]	@ (80083c8 <OLED_ShowChar+0x158>)
 80082d8:	5cd3      	ldrb	r3, [r2, r3]
 80082da:	43db      	mvns	r3, r3
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff ff62 	bl	80081a8 <Oled_WriteData>
 80082e4:	e008      	b.n	80082f8 <OLED_ShowChar+0x88>
                   else
                       Oled_WriteData(F8X16[c*16+i]);
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	4413      	add	r3, r2
 80082ee:	4a36      	ldr	r2, [pc, #216]	@ (80083c8 <OLED_ShowChar+0x158>)
 80082f0:	5cd3      	ldrb	r3, [r2, r3]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff ff58 	bl	80081a8 <Oled_WriteData>
             for(i=0;i<8;i++)
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	3301      	adds	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b07      	cmp	r3, #7
 8008302:	d9e0      	bls.n	80082c6 <OLED_ShowChar+0x56>
                 }
             OLED_Set_Pos(x,y+1);
 8008304:	79bb      	ldrb	r3, [r7, #6]
 8008306:	3301      	adds	r3, #1
 8008308:	b2da      	uxtb	r2, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff ff8b 	bl	800822a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e01d      	b.n	8008356 <OLED_ShowChar+0xe6>
                 {
                   if(Color_Turn)
 800831a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <OLED_ShowChar+0xcc>
                       Oled_WriteData(~F8X16[c*16+i+8]);
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	011a      	lsls	r2, r3, #4
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	4413      	add	r3, r2
 800832a:	3308      	adds	r3, #8
 800832c:	4a26      	ldr	r2, [pc, #152]	@ (80083c8 <OLED_ShowChar+0x158>)
 800832e:	5cd3      	ldrb	r3, [r2, r3]
 8008330:	43db      	mvns	r3, r3
 8008332:	b2db      	uxtb	r3, r3
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff ff37 	bl	80081a8 <Oled_WriteData>
 800833a:	e009      	b.n	8008350 <OLED_ShowChar+0xe0>
                   else
                       Oled_WriteData(F8X16[c*16+i+8]);
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	011a      	lsls	r2, r3, #4
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4413      	add	r3, r2
 8008344:	3308      	adds	r3, #8
 8008346:	4a20      	ldr	r2, [pc, #128]	@ (80083c8 <OLED_ShowChar+0x158>)
 8008348:	5cd3      	ldrb	r3, [r2, r3]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff ff2c 	bl	80081a8 <Oled_WriteData>
             for(i=0;i<8;i++)
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	3301      	adds	r3, #1
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	2b07      	cmp	r3, #7
 800835a:	d9de      	bls.n	800831a <OLED_ShowChar+0xaa>
                       Oled_WriteData(~F6x8[c][i]);
                   else
                       Oled_WriteData(F6x8[c][i]);
                 }
           }
 }
 800835c:	e02f      	b.n	80083be <OLED_ShowChar+0x14e>
                 OLED_Set_Pos(x,y);
 800835e:	79ba      	ldrb	r2, [r7, #6]
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4611      	mov	r1, r2
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff ff60 	bl	800822a <OLED_Set_Pos>
                 for(i=0;i<6;i++)
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e023      	b.n	80083b8 <OLED_ShowChar+0x148>
                   if(Color_Turn)
 8008370:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <OLED_ShowChar+0x128>
                       Oled_WriteData(~F6x8[c][i]);
 8008378:	7bba      	ldrb	r2, [r7, #14]
 800837a:	7bf9      	ldrb	r1, [r7, #15]
 800837c:	4813      	ldr	r0, [pc, #76]	@ (80083cc <OLED_ShowChar+0x15c>)
 800837e:	4613      	mov	r3, r2
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	4413      	add	r3, r2
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4403      	add	r3, r0
 8008388:	440b      	add	r3, r1
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	43db      	mvns	r3, r3
 800838e:	b2db      	uxtb	r3, r3
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ff09 	bl	80081a8 <Oled_WriteData>
 8008396:	e00c      	b.n	80083b2 <OLED_ShowChar+0x142>
                       Oled_WriteData(F6x8[c][i]);
 8008398:	7bba      	ldrb	r2, [r7, #14]
 800839a:	7bf9      	ldrb	r1, [r7, #15]
 800839c:	480b      	ldr	r0, [pc, #44]	@ (80083cc <OLED_ShowChar+0x15c>)
 800839e:	4613      	mov	r3, r2
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4413      	add	r3, r2
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4403      	add	r3, r0
 80083a8:	440b      	add	r3, r1
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff fefb 	bl	80081a8 <Oled_WriteData>
                 for(i=0;i<6;i++)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	3301      	adds	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d9d8      	bls.n	8008370 <OLED_ShowChar+0x100>
 }
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	0800911c 	.word	0x0800911c
 80083cc:	08008ef4 	.word	0x08008ef4

080083d0 <OLED_ShowString>:
  * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
 {
 80083d0:	b590      	push	{r4, r7, lr}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	603a      	str	r2, [r7, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	460b      	mov	r3, r1
 80083e0:	71bb      	strb	r3, [r7, #6]
 80083e2:	4613      	mov	r3, r2
 80083e4:	717b      	strb	r3, [r7, #5]
     uint8_t  j=0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 80083ea:	e02f      	b.n	800844c <OLED_ShowString+0x7c>
     {       OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	4413      	add	r3, r2
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	797c      	ldrb	r4, [r7, #5]
 80083f6:	79b9      	ldrb	r1, [r7, #6]
 80083f8:	79f8      	ldrb	r0, [r7, #7]
 80083fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4623      	mov	r3, r4
 8008402:	f7ff ff35 	bl	8008270 <OLED_ShowChar>
             if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8008406:	797b      	ldrb	r3, [r7, #5]
 8008408:	2b0c      	cmp	r3, #12
 800840a:	d103      	bne.n	8008414 <OLED_ShowString+0x44>
                 x += 6;
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	3306      	adds	r3, #6
 8008410:	71fb      	strb	r3, [r7, #7]
 8008412:	e002      	b.n	800841a <OLED_ShowString+0x4a>
             else  //8X16的字体列加8，显示下一个字符
                 x += 8;
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	3308      	adds	r3, #8
 8008418:	71fb      	strb	r3, [r7, #7]

             if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b7a      	cmp	r3, #122	@ 0x7a
 800841e:	d907      	bls.n	8008430 <OLED_ShowString+0x60>
 8008420:	797b      	ldrb	r3, [r7, #5]
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d104      	bne.n	8008430 <OLED_ShowString+0x60>
             {
                 x = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	71fb      	strb	r3, [r7, #7]
                 y++;
 800842a:	79bb      	ldrb	r3, [r7, #6]
 800842c:	3301      	adds	r3, #1
 800842e:	71bb      	strb	r3, [r7, #6]
             }
             if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b78      	cmp	r3, #120	@ 0x78
 8008434:	d907      	bls.n	8008446 <OLED_ShowString+0x76>
 8008436:	797b      	ldrb	r3, [r7, #5]
 8008438:	2b10      	cmp	r3, #16
 800843a:	d104      	bne.n	8008446 <OLED_ShowString+0x76>
             {
                 x = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	71fb      	strb	r3, [r7, #7]
                 y++;
 8008440:	79bb      	ldrb	r3, [r7, #6]
 8008442:	3301      	adds	r3, #1
 8008444:	71bb      	strb	r3, [r7, #6]
             }
             j++;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	3301      	adds	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4413      	add	r3, r2
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1c9      	bne.n	80083ec <OLED_ShowString+0x1c>
     }
     clean++;
 8008458:	4b04      	ldr	r3, [pc, #16]	@ (800846c <OLED_ShowString+0x9c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a03      	ldr	r2, [pc, #12]	@ (800846c <OLED_ShowString+0x9c>)
 8008460:	6013      	str	r3, [r2, #0]
 }
 8008462:	bf00      	nop
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}
 800846a:	bf00      	nop
 800846c:	20000480 	.word	0x20000480

08008470 <sniprintf>:
 8008470:	b40c      	push	{r2, r3}
 8008472:	b530      	push	{r4, r5, lr}
 8008474:	4b18      	ldr	r3, [pc, #96]	@ (80084d8 <sniprintf+0x68>)
 8008476:	1e0c      	subs	r4, r1, #0
 8008478:	681d      	ldr	r5, [r3, #0]
 800847a:	b09d      	sub	sp, #116	@ 0x74
 800847c:	da08      	bge.n	8008490 <sniprintf+0x20>
 800847e:	238b      	movs	r3, #139	@ 0x8b
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	b01d      	add	sp, #116	@ 0x74
 8008488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800848c:	b002      	add	sp, #8
 800848e:	4770      	bx	lr
 8008490:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008494:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800849e:	bf0c      	ite	eq
 80084a0:	4623      	moveq	r3, r4
 80084a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084ae:	9002      	str	r0, [sp, #8]
 80084b0:	9006      	str	r0, [sp, #24]
 80084b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084b6:	4628      	mov	r0, r5
 80084b8:	ab21      	add	r3, sp, #132	@ 0x84
 80084ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084bc:	a902      	add	r1, sp, #8
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	f000 f9c2 	bl	8008848 <_svfiprintf_r>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	bfbc      	itt	lt
 80084c8:	238b      	movlt	r3, #139	@ 0x8b
 80084ca:	602b      	strlt	r3, [r5, #0]
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	d0da      	beq.n	8008486 <sniprintf+0x16>
 80084d0:	2200      	movs	r2, #0
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e7d6      	b.n	8008486 <sniprintf+0x16>
 80084d8:	20000024 	.word	0x20000024

080084dc <siprintf>:
 80084dc:	b40e      	push	{r1, r2, r3}
 80084de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084e2:	b510      	push	{r4, lr}
 80084e4:	2400      	movs	r4, #0
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80084ea:	9002      	str	r0, [sp, #8]
 80084ec:	9006      	str	r0, [sp, #24]
 80084ee:	9107      	str	r1, [sp, #28]
 80084f0:	9104      	str	r1, [sp, #16]
 80084f2:	4809      	ldr	r0, [pc, #36]	@ (8008518 <siprintf+0x3c>)
 80084f4:	4909      	ldr	r1, [pc, #36]	@ (800851c <siprintf+0x40>)
 80084f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fa:	9105      	str	r1, [sp, #20]
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	a902      	add	r1, sp, #8
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008504:	f000 f9a0 	bl	8008848 <_svfiprintf_r>
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	701c      	strb	r4, [r3, #0]
 800850c:	b01d      	add	sp, #116	@ 0x74
 800850e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008512:	b003      	add	sp, #12
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000024 	.word	0x20000024
 800851c:	ffff0208 	.word	0xffff0208

08008520 <memset>:
 8008520:	4603      	mov	r3, r0
 8008522:	4402      	add	r2, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	d100      	bne.n	800852a <memset+0xa>
 8008528:	4770      	bx	lr
 800852a:	f803 1b01 	strb.w	r1, [r3], #1
 800852e:	e7f9      	b.n	8008524 <memset+0x4>

08008530 <__errno>:
 8008530:	4b01      	ldr	r3, [pc, #4]	@ (8008538 <__errno+0x8>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000024 	.word	0x20000024

0800853c <__libc_init_array>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	2600      	movs	r6, #0
 8008540:	4d0c      	ldr	r5, [pc, #48]	@ (8008574 <__libc_init_array+0x38>)
 8008542:	4c0d      	ldr	r4, [pc, #52]	@ (8008578 <__libc_init_array+0x3c>)
 8008544:	1b64      	subs	r4, r4, r5
 8008546:	10a4      	asrs	r4, r4, #2
 8008548:	42a6      	cmp	r6, r4
 800854a:	d109      	bne.n	8008560 <__libc_init_array+0x24>
 800854c:	f000 fc76 	bl	8008e3c <_init>
 8008550:	2600      	movs	r6, #0
 8008552:	4d0a      	ldr	r5, [pc, #40]	@ (800857c <__libc_init_array+0x40>)
 8008554:	4c0a      	ldr	r4, [pc, #40]	@ (8008580 <__libc_init_array+0x44>)
 8008556:	1b64      	subs	r4, r4, r5
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	42a6      	cmp	r6, r4
 800855c:	d105      	bne.n	800856a <__libc_init_array+0x2e>
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	f855 3b04 	ldr.w	r3, [r5], #4
 8008564:	4798      	blx	r3
 8008566:	3601      	adds	r6, #1
 8008568:	e7ee      	b.n	8008548 <__libc_init_array+0xc>
 800856a:	f855 3b04 	ldr.w	r3, [r5], #4
 800856e:	4798      	blx	r3
 8008570:	3601      	adds	r6, #1
 8008572:	e7f2      	b.n	800855a <__libc_init_array+0x1e>
 8008574:	08009738 	.word	0x08009738
 8008578:	08009738 	.word	0x08009738
 800857c:	08009738 	.word	0x08009738
 8008580:	0800973c 	.word	0x0800973c

08008584 <__retarget_lock_acquire_recursive>:
 8008584:	4770      	bx	lr

08008586 <__retarget_lock_release_recursive>:
 8008586:	4770      	bx	lr

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	4291      	cmp	r1, r2
 800859c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <_free_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4605      	mov	r5, r0
 80085a8:	2900      	cmp	r1, #0
 80085aa:	d040      	beq.n	800862e <_free_r+0x8a>
 80085ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b0:	1f0c      	subs	r4, r1, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfb8      	it	lt
 80085b6:	18e4      	addlt	r4, r4, r3
 80085b8:	f000 f8de 	bl	8008778 <__malloc_lock>
 80085bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008630 <_free_r+0x8c>)
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	b933      	cbnz	r3, 80085d0 <_free_r+0x2c>
 80085c2:	6063      	str	r3, [r4, #4]
 80085c4:	6014      	str	r4, [r2, #0]
 80085c6:	4628      	mov	r0, r5
 80085c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085cc:	f000 b8da 	b.w	8008784 <__malloc_unlock>
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	d908      	bls.n	80085e6 <_free_r+0x42>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf01      	itttt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	1809      	addeq	r1, r1, r0
 80085e2:	6021      	streq	r1, [r4, #0]
 80085e4:	e7ed      	b.n	80085c2 <_free_r+0x1e>
 80085e6:	461a      	mov	r2, r3
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	b10b      	cbz	r3, 80085f0 <_free_r+0x4c>
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d9fa      	bls.n	80085e6 <_free_r+0x42>
 80085f0:	6811      	ldr	r1, [r2, #0]
 80085f2:	1850      	adds	r0, r2, r1
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d10b      	bne.n	8008610 <_free_r+0x6c>
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	4401      	add	r1, r0
 80085fc:	1850      	adds	r0, r2, r1
 80085fe:	4283      	cmp	r3, r0
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	d1e0      	bne.n	80085c6 <_free_r+0x22>
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4408      	add	r0, r1
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	6053      	str	r3, [r2, #4]
 800860e:	e7da      	b.n	80085c6 <_free_r+0x22>
 8008610:	d902      	bls.n	8008618 <_free_r+0x74>
 8008612:	230c      	movs	r3, #12
 8008614:	602b      	str	r3, [r5, #0]
 8008616:	e7d6      	b.n	80085c6 <_free_r+0x22>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	1821      	adds	r1, r4, r0
 800861c:	428b      	cmp	r3, r1
 800861e:	bf01      	itttt	eq
 8008620:	6819      	ldreq	r1, [r3, #0]
 8008622:	685b      	ldreq	r3, [r3, #4]
 8008624:	1809      	addeq	r1, r1, r0
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	6054      	str	r4, [r2, #4]
 800862c:	e7cb      	b.n	80085c6 <_free_r+0x22>
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	200005c8 	.word	0x200005c8

08008634 <sbrk_aligned>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	4e0f      	ldr	r6, [pc, #60]	@ (8008674 <sbrk_aligned+0x40>)
 8008638:	460c      	mov	r4, r1
 800863a:	6831      	ldr	r1, [r6, #0]
 800863c:	4605      	mov	r5, r0
 800863e:	b911      	cbnz	r1, 8008646 <sbrk_aligned+0x12>
 8008640:	f000 fba8 	bl	8008d94 <_sbrk_r>
 8008644:	6030      	str	r0, [r6, #0]
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f000 fba3 	bl	8008d94 <_sbrk_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d103      	bne.n	800865a <sbrk_aligned+0x26>
 8008652:	f04f 34ff 	mov.w	r4, #4294967295
 8008656:	4620      	mov	r0, r4
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	1cc4      	adds	r4, r0, #3
 800865c:	f024 0403 	bic.w	r4, r4, #3
 8008660:	42a0      	cmp	r0, r4
 8008662:	d0f8      	beq.n	8008656 <sbrk_aligned+0x22>
 8008664:	1a21      	subs	r1, r4, r0
 8008666:	4628      	mov	r0, r5
 8008668:	f000 fb94 	bl	8008d94 <_sbrk_r>
 800866c:	3001      	adds	r0, #1
 800866e:	d1f2      	bne.n	8008656 <sbrk_aligned+0x22>
 8008670:	e7ef      	b.n	8008652 <sbrk_aligned+0x1e>
 8008672:	bf00      	nop
 8008674:	200005c4 	.word	0x200005c4

08008678 <_malloc_r>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	1ccd      	adds	r5, r1, #3
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	2d00      	cmp	r5, #0
 800868c:	4606      	mov	r6, r0
 800868e:	db01      	blt.n	8008694 <_malloc_r+0x1c>
 8008690:	42a9      	cmp	r1, r5
 8008692:	d904      	bls.n	800869e <_malloc_r+0x26>
 8008694:	230c      	movs	r3, #12
 8008696:	6033      	str	r3, [r6, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008774 <_malloc_r+0xfc>
 80086a2:	f000 f869 	bl	8008778 <__malloc_lock>
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	461c      	mov	r4, r3
 80086ac:	bb44      	cbnz	r4, 8008700 <_malloc_r+0x88>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffbf 	bl	8008634 <sbrk_aligned>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	4604      	mov	r4, r0
 80086ba:	d158      	bne.n	800876e <_malloc_r+0xf6>
 80086bc:	f8d8 4000 	ldr.w	r4, [r8]
 80086c0:	4627      	mov	r7, r4
 80086c2:	2f00      	cmp	r7, #0
 80086c4:	d143      	bne.n	800874e <_malloc_r+0xd6>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	d04b      	beq.n	8008762 <_malloc_r+0xea>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	4639      	mov	r1, r7
 80086ce:	4630      	mov	r0, r6
 80086d0:	eb04 0903 	add.w	r9, r4, r3
 80086d4:	f000 fb5e 	bl	8008d94 <_sbrk_r>
 80086d8:	4581      	cmp	r9, r0
 80086da:	d142      	bne.n	8008762 <_malloc_r+0xea>
 80086dc:	6821      	ldr	r1, [r4, #0]
 80086de:	4630      	mov	r0, r6
 80086e0:	1a6d      	subs	r5, r5, r1
 80086e2:	4629      	mov	r1, r5
 80086e4:	f7ff ffa6 	bl	8008634 <sbrk_aligned>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d03a      	beq.n	8008762 <_malloc_r+0xea>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	442b      	add	r3, r5
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	f8d8 3000 	ldr.w	r3, [r8]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	bb62      	cbnz	r2, 8008754 <_malloc_r+0xdc>
 80086fa:	f8c8 7000 	str.w	r7, [r8]
 80086fe:	e00f      	b.n	8008720 <_malloc_r+0xa8>
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	1b52      	subs	r2, r2, r5
 8008704:	d420      	bmi.n	8008748 <_malloc_r+0xd0>
 8008706:	2a0b      	cmp	r2, #11
 8008708:	d917      	bls.n	800873a <_malloc_r+0xc2>
 800870a:	1961      	adds	r1, r4, r5
 800870c:	42a3      	cmp	r3, r4
 800870e:	6025      	str	r5, [r4, #0]
 8008710:	bf18      	it	ne
 8008712:	6059      	strne	r1, [r3, #4]
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	bf08      	it	eq
 8008718:	f8c8 1000 	streq.w	r1, [r8]
 800871c:	5162      	str	r2, [r4, r5]
 800871e:	604b      	str	r3, [r1, #4]
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f82f 	bl	8008784 <__malloc_unlock>
 8008726:	f104 000b 	add.w	r0, r4, #11
 800872a:	1d23      	adds	r3, r4, #4
 800872c:	f020 0007 	bic.w	r0, r0, #7
 8008730:	1ac2      	subs	r2, r0, r3
 8008732:	bf1c      	itt	ne
 8008734:	1a1b      	subne	r3, r3, r0
 8008736:	50a3      	strne	r3, [r4, r2]
 8008738:	e7af      	b.n	800869a <_malloc_r+0x22>
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	42a3      	cmp	r3, r4
 800873e:	bf0c      	ite	eq
 8008740:	f8c8 2000 	streq.w	r2, [r8]
 8008744:	605a      	strne	r2, [r3, #4]
 8008746:	e7eb      	b.n	8008720 <_malloc_r+0xa8>
 8008748:	4623      	mov	r3, r4
 800874a:	6864      	ldr	r4, [r4, #4]
 800874c:	e7ae      	b.n	80086ac <_malloc_r+0x34>
 800874e:	463c      	mov	r4, r7
 8008750:	687f      	ldr	r7, [r7, #4]
 8008752:	e7b6      	b.n	80086c2 <_malloc_r+0x4a>
 8008754:	461a      	mov	r2, r3
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	42a3      	cmp	r3, r4
 800875a:	d1fb      	bne.n	8008754 <_malloc_r+0xdc>
 800875c:	2300      	movs	r3, #0
 800875e:	6053      	str	r3, [r2, #4]
 8008760:	e7de      	b.n	8008720 <_malloc_r+0xa8>
 8008762:	230c      	movs	r3, #12
 8008764:	4630      	mov	r0, r6
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f000 f80c 	bl	8008784 <__malloc_unlock>
 800876c:	e794      	b.n	8008698 <_malloc_r+0x20>
 800876e:	6005      	str	r5, [r0, #0]
 8008770:	e7d6      	b.n	8008720 <_malloc_r+0xa8>
 8008772:	bf00      	nop
 8008774:	200005c8 	.word	0x200005c8

08008778 <__malloc_lock>:
 8008778:	4801      	ldr	r0, [pc, #4]	@ (8008780 <__malloc_lock+0x8>)
 800877a:	f7ff bf03 	b.w	8008584 <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	200005c0 	.word	0x200005c0

08008784 <__malloc_unlock>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__malloc_unlock+0x8>)
 8008786:	f7ff befe 	b.w	8008586 <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	200005c0 	.word	0x200005c0

08008790 <__ssputs_r>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	461f      	mov	r7, r3
 8008796:	688e      	ldr	r6, [r1, #8]
 8008798:	4682      	mov	sl, r0
 800879a:	42be      	cmp	r6, r7
 800879c:	460c      	mov	r4, r1
 800879e:	4690      	mov	r8, r2
 80087a0:	680b      	ldr	r3, [r1, #0]
 80087a2:	d82d      	bhi.n	8008800 <__ssputs_r+0x70>
 80087a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087ac:	d026      	beq.n	80087fc <__ssputs_r+0x6c>
 80087ae:	6965      	ldr	r5, [r4, #20]
 80087b0:	6909      	ldr	r1, [r1, #16]
 80087b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b6:	eba3 0901 	sub.w	r9, r3, r1
 80087ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087be:	1c7b      	adds	r3, r7, #1
 80087c0:	444b      	add	r3, r9
 80087c2:	106d      	asrs	r5, r5, #1
 80087c4:	429d      	cmp	r5, r3
 80087c6:	bf38      	it	cc
 80087c8:	461d      	movcc	r5, r3
 80087ca:	0553      	lsls	r3, r2, #21
 80087cc:	d527      	bpl.n	800881e <__ssputs_r+0x8e>
 80087ce:	4629      	mov	r1, r5
 80087d0:	f7ff ff52 	bl	8008678 <_malloc_r>
 80087d4:	4606      	mov	r6, r0
 80087d6:	b360      	cbz	r0, 8008832 <__ssputs_r+0xa2>
 80087d8:	464a      	mov	r2, r9
 80087da:	6921      	ldr	r1, [r4, #16]
 80087dc:	f7ff fed4 	bl	8008588 <memcpy>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	6126      	str	r6, [r4, #16]
 80087ee:	444e      	add	r6, r9
 80087f0:	6026      	str	r6, [r4, #0]
 80087f2:	463e      	mov	r6, r7
 80087f4:	6165      	str	r5, [r4, #20]
 80087f6:	eba5 0509 	sub.w	r5, r5, r9
 80087fa:	60a5      	str	r5, [r4, #8]
 80087fc:	42be      	cmp	r6, r7
 80087fe:	d900      	bls.n	8008802 <__ssputs_r+0x72>
 8008800:	463e      	mov	r6, r7
 8008802:	4632      	mov	r2, r6
 8008804:	4641      	mov	r1, r8
 8008806:	6820      	ldr	r0, [r4, #0]
 8008808:	f000 faaa 	bl	8008d60 <memmove>
 800880c:	2000      	movs	r0, #0
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	1b9b      	subs	r3, r3, r6
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	4433      	add	r3, r6
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881e:	462a      	mov	r2, r5
 8008820:	f000 fad6 	bl	8008dd0 <_realloc_r>
 8008824:	4606      	mov	r6, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d1e0      	bne.n	80087ec <__ssputs_r+0x5c>
 800882a:	4650      	mov	r0, sl
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	f7ff feb9 	bl	80085a4 <_free_r>
 8008832:	230c      	movs	r3, #12
 8008834:	f8ca 3000 	str.w	r3, [sl]
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	e7e9      	b.n	800881a <__ssputs_r+0x8a>
	...

08008848 <_svfiprintf_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	4698      	mov	r8, r3
 800884e:	898b      	ldrh	r3, [r1, #12]
 8008850:	4607      	mov	r7, r0
 8008852:	061b      	lsls	r3, r3, #24
 8008854:	460d      	mov	r5, r1
 8008856:	4614      	mov	r4, r2
 8008858:	b09d      	sub	sp, #116	@ 0x74
 800885a:	d510      	bpl.n	800887e <_svfiprintf_r+0x36>
 800885c:	690b      	ldr	r3, [r1, #16]
 800885e:	b973      	cbnz	r3, 800887e <_svfiprintf_r+0x36>
 8008860:	2140      	movs	r1, #64	@ 0x40
 8008862:	f7ff ff09 	bl	8008678 <_malloc_r>
 8008866:	6028      	str	r0, [r5, #0]
 8008868:	6128      	str	r0, [r5, #16]
 800886a:	b930      	cbnz	r0, 800887a <_svfiprintf_r+0x32>
 800886c:	230c      	movs	r3, #12
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	b01d      	add	sp, #116	@ 0x74
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	2340      	movs	r3, #64	@ 0x40
 800887c:	616b      	str	r3, [r5, #20]
 800887e:	2300      	movs	r3, #0
 8008880:	9309      	str	r3, [sp, #36]	@ 0x24
 8008882:	2320      	movs	r3, #32
 8008884:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008888:	2330      	movs	r3, #48	@ 0x30
 800888a:	f04f 0901 	mov.w	r9, #1
 800888e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008892:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a2c <_svfiprintf_r+0x1e4>
 8008896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800889a:	4623      	mov	r3, r4
 800889c:	469a      	mov	sl, r3
 800889e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a2:	b10a      	cbz	r2, 80088a8 <_svfiprintf_r+0x60>
 80088a4:	2a25      	cmp	r2, #37	@ 0x25
 80088a6:	d1f9      	bne.n	800889c <_svfiprintf_r+0x54>
 80088a8:	ebba 0b04 	subs.w	fp, sl, r4
 80088ac:	d00b      	beq.n	80088c6 <_svfiprintf_r+0x7e>
 80088ae:	465b      	mov	r3, fp
 80088b0:	4622      	mov	r2, r4
 80088b2:	4629      	mov	r1, r5
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ff6b 	bl	8008790 <__ssputs_r>
 80088ba:	3001      	adds	r0, #1
 80088bc:	f000 80a7 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c2:	445a      	add	r2, fp
 80088c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 809f 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088da:	f10a 0a01 	add.w	sl, sl, #1
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80088e8:	4654      	mov	r4, sl
 80088ea:	2205      	movs	r2, #5
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	484e      	ldr	r0, [pc, #312]	@ (8008a2c <_svfiprintf_r+0x1e4>)
 80088f2:	f000 fa5f 	bl	8008db4 <memchr>
 80088f6:	9a04      	ldr	r2, [sp, #16]
 80088f8:	b9d8      	cbnz	r0, 8008932 <_svfiprintf_r+0xea>
 80088fa:	06d0      	lsls	r0, r2, #27
 80088fc:	bf44      	itt	mi
 80088fe:	2320      	movmi	r3, #32
 8008900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008904:	0711      	lsls	r1, r2, #28
 8008906:	bf44      	itt	mi
 8008908:	232b      	movmi	r3, #43	@ 0x2b
 800890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890e:	f89a 3000 	ldrb.w	r3, [sl]
 8008912:	2b2a      	cmp	r3, #42	@ 0x2a
 8008914:	d015      	beq.n	8008942 <_svfiprintf_r+0xfa>
 8008916:	4654      	mov	r4, sl
 8008918:	2000      	movs	r0, #0
 800891a:	f04f 0c0a 	mov.w	ip, #10
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	4621      	mov	r1, r4
 8008922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008926:	3b30      	subs	r3, #48	@ 0x30
 8008928:	2b09      	cmp	r3, #9
 800892a:	d94b      	bls.n	80089c4 <_svfiprintf_r+0x17c>
 800892c:	b1b0      	cbz	r0, 800895c <_svfiprintf_r+0x114>
 800892e:	9207      	str	r2, [sp, #28]
 8008930:	e014      	b.n	800895c <_svfiprintf_r+0x114>
 8008932:	eba0 0308 	sub.w	r3, r0, r8
 8008936:	fa09 f303 	lsl.w	r3, r9, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	46a2      	mov	sl, r4
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	e7d2      	b.n	80088e8 <_svfiprintf_r+0xa0>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	1d19      	adds	r1, r3, #4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	9103      	str	r1, [sp, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfbb      	ittet	lt
 800894e:	425b      	neglt	r3, r3
 8008950:	f042 0202 	orrlt.w	r2, r2, #2
 8008954:	9307      	strge	r3, [sp, #28]
 8008956:	9307      	strlt	r3, [sp, #28]
 8008958:	bfb8      	it	lt
 800895a:	9204      	strlt	r2, [sp, #16]
 800895c:	7823      	ldrb	r3, [r4, #0]
 800895e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008960:	d10a      	bne.n	8008978 <_svfiprintf_r+0x130>
 8008962:	7863      	ldrb	r3, [r4, #1]
 8008964:	2b2a      	cmp	r3, #42	@ 0x2a
 8008966:	d132      	bne.n	80089ce <_svfiprintf_r+0x186>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	3402      	adds	r4, #2
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9203      	str	r2, [sp, #12]
 8008972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008976:	9305      	str	r3, [sp, #20]
 8008978:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a30 <_svfiprintf_r+0x1e8>
 800897c:	2203      	movs	r2, #3
 800897e:	4650      	mov	r0, sl
 8008980:	7821      	ldrb	r1, [r4, #0]
 8008982:	f000 fa17 	bl	8008db4 <memchr>
 8008986:	b138      	cbz	r0, 8008998 <_svfiprintf_r+0x150>
 8008988:	2240      	movs	r2, #64	@ 0x40
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	eba0 000a 	sub.w	r0, r0, sl
 8008990:	4082      	lsls	r2, r0
 8008992:	4313      	orrs	r3, r2
 8008994:	3401      	adds	r4, #1
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	2206      	movs	r2, #6
 800899e:	4825      	ldr	r0, [pc, #148]	@ (8008a34 <_svfiprintf_r+0x1ec>)
 80089a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a4:	f000 fa06 	bl	8008db4 <memchr>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d036      	beq.n	8008a1a <_svfiprintf_r+0x1d2>
 80089ac:	4b22      	ldr	r3, [pc, #136]	@ (8008a38 <_svfiprintf_r+0x1f0>)
 80089ae:	bb1b      	cbnz	r3, 80089f8 <_svfiprintf_r+0x1b0>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	3307      	adds	r3, #7
 80089b4:	f023 0307 	bic.w	r3, r3, #7
 80089b8:	3308      	adds	r3, #8
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089be:	4433      	add	r3, r6
 80089c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c2:	e76a      	b.n	800889a <_svfiprintf_r+0x52>
 80089c4:	460c      	mov	r4, r1
 80089c6:	2001      	movs	r0, #1
 80089c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089cc:	e7a8      	b.n	8008920 <_svfiprintf_r+0xd8>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f04f 0c0a 	mov.w	ip, #10
 80089d4:	4619      	mov	r1, r3
 80089d6:	3401      	adds	r4, #1
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	4620      	mov	r0, r4
 80089dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e0:	3a30      	subs	r2, #48	@ 0x30
 80089e2:	2a09      	cmp	r2, #9
 80089e4:	d903      	bls.n	80089ee <_svfiprintf_r+0x1a6>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0c6      	beq.n	8008978 <_svfiprintf_r+0x130>
 80089ea:	9105      	str	r1, [sp, #20]
 80089ec:	e7c4      	b.n	8008978 <_svfiprintf_r+0x130>
 80089ee:	4604      	mov	r4, r0
 80089f0:	2301      	movs	r3, #1
 80089f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f6:	e7f0      	b.n	80089da <_svfiprintf_r+0x192>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4638      	mov	r0, r7
 8008a00:	4b0e      	ldr	r3, [pc, #56]	@ (8008a3c <_svfiprintf_r+0x1f4>)
 8008a02:	a904      	add	r1, sp, #16
 8008a04:	f3af 8000 	nop.w
 8008a08:	1c42      	adds	r2, r0, #1
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	d1d6      	bne.n	80089bc <_svfiprintf_r+0x174>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	065b      	lsls	r3, r3, #25
 8008a12:	f53f af2d 	bmi.w	8008870 <_svfiprintf_r+0x28>
 8008a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a18:	e72c      	b.n	8008874 <_svfiprintf_r+0x2c>
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4638      	mov	r0, r7
 8008a22:	4b06      	ldr	r3, [pc, #24]	@ (8008a3c <_svfiprintf_r+0x1f4>)
 8008a24:	a904      	add	r1, sp, #16
 8008a26:	f000 f87d 	bl	8008b24 <_printf_i>
 8008a2a:	e7ed      	b.n	8008a08 <_svfiprintf_r+0x1c0>
 8008a2c:	080096fc 	.word	0x080096fc
 8008a30:	08009702 	.word	0x08009702
 8008a34:	08009706 	.word	0x08009706
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	08008791 	.word	0x08008791

08008a40 <_printf_common>:
 8008a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a44:	4616      	mov	r6, r2
 8008a46:	4698      	mov	r8, r3
 8008a48:	688a      	ldr	r2, [r1, #8]
 8008a4a:	690b      	ldr	r3, [r1, #16]
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	bfb8      	it	lt
 8008a52:	4613      	movlt	r3, r2
 8008a54:	6033      	str	r3, [r6, #0]
 8008a56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a60:	b10a      	cbz	r2, 8008a66 <_printf_common+0x26>
 8008a62:	3301      	adds	r3, #1
 8008a64:	6033      	str	r3, [r6, #0]
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	0699      	lsls	r1, r3, #26
 8008a6a:	bf42      	ittt	mi
 8008a6c:	6833      	ldrmi	r3, [r6, #0]
 8008a6e:	3302      	addmi	r3, #2
 8008a70:	6033      	strmi	r3, [r6, #0]
 8008a72:	6825      	ldr	r5, [r4, #0]
 8008a74:	f015 0506 	ands.w	r5, r5, #6
 8008a78:	d106      	bne.n	8008a88 <_printf_common+0x48>
 8008a7a:	f104 0a19 	add.w	sl, r4, #25
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	6832      	ldr	r2, [r6, #0]
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dc2b      	bgt.n	8008ae0 <_printf_common+0xa0>
 8008a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	3b00      	subs	r3, #0
 8008a90:	bf18      	it	ne
 8008a92:	2301      	movne	r3, #1
 8008a94:	0692      	lsls	r2, r2, #26
 8008a96:	d430      	bmi.n	8008afa <_printf_common+0xba>
 8008a98:	4641      	mov	r1, r8
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008aa0:	47c8      	blx	r9
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d023      	beq.n	8008aee <_printf_common+0xae>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	f003 0306 	and.w	r3, r3, #6
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	bf14      	ite	ne
 8008ab2:	2500      	movne	r5, #0
 8008ab4:	6833      	ldreq	r3, [r6, #0]
 8008ab6:	f04f 0600 	mov.w	r6, #0
 8008aba:	bf08      	it	eq
 8008abc:	68e5      	ldreq	r5, [r4, #12]
 8008abe:	f104 041a 	add.w	r4, r4, #26
 8008ac2:	bf08      	it	eq
 8008ac4:	1aed      	subeq	r5, r5, r3
 8008ac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008aca:	bf08      	it	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	bfc4      	itt	gt
 8008ad4:	1a9b      	subgt	r3, r3, r2
 8008ad6:	18ed      	addgt	r5, r5, r3
 8008ad8:	42b5      	cmp	r5, r6
 8008ada:	d11a      	bne.n	8008b12 <_printf_common+0xd2>
 8008adc:	2000      	movs	r0, #0
 8008ade:	e008      	b.n	8008af2 <_printf_common+0xb2>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4641      	mov	r1, r8
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	47c8      	blx	r9
 8008aea:	3001      	adds	r0, #1
 8008aec:	d103      	bne.n	8008af6 <_printf_common+0xb6>
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	3501      	adds	r5, #1
 8008af8:	e7c1      	b.n	8008a7e <_printf_common+0x3e>
 8008afa:	2030      	movs	r0, #48	@ 0x30
 8008afc:	18e1      	adds	r1, r4, r3
 8008afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b08:	4422      	add	r2, r4
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b10:	e7c2      	b.n	8008a98 <_printf_common+0x58>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4622      	mov	r2, r4
 8008b16:	4641      	mov	r1, r8
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c8      	blx	r9
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d0e6      	beq.n	8008aee <_printf_common+0xae>
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7d9      	b.n	8008ad8 <_printf_common+0x98>

08008b24 <_printf_i>:
 8008b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	7e0f      	ldrb	r7, [r1, #24]
 8008b2a:	4691      	mov	r9, r2
 8008b2c:	2f78      	cmp	r7, #120	@ 0x78
 8008b2e:	4680      	mov	r8, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	469a      	mov	sl, r3
 8008b34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b3a:	d807      	bhi.n	8008b4c <_printf_i+0x28>
 8008b3c:	2f62      	cmp	r7, #98	@ 0x62
 8008b3e:	d80a      	bhi.n	8008b56 <_printf_i+0x32>
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	f000 80d1 	beq.w	8008ce8 <_printf_i+0x1c4>
 8008b46:	2f58      	cmp	r7, #88	@ 0x58
 8008b48:	f000 80b8 	beq.w	8008cbc <_printf_i+0x198>
 8008b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b54:	e03a      	b.n	8008bcc <_printf_i+0xa8>
 8008b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b5a:	2b15      	cmp	r3, #21
 8008b5c:	d8f6      	bhi.n	8008b4c <_printf_i+0x28>
 8008b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b64 <_printf_i+0x40>)
 8008b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b64:	08008bbd 	.word	0x08008bbd
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008b4d 	.word	0x08008b4d
 8008b70:	08008b4d 	.word	0x08008b4d
 8008b74:	08008b4d 	.word	0x08008b4d
 8008b78:	08008b4d 	.word	0x08008b4d
 8008b7c:	08008bd1 	.word	0x08008bd1
 8008b80:	08008b4d 	.word	0x08008b4d
 8008b84:	08008b4d 	.word	0x08008b4d
 8008b88:	08008b4d 	.word	0x08008b4d
 8008b8c:	08008b4d 	.word	0x08008b4d
 8008b90:	08008ccf 	.word	0x08008ccf
 8008b94:	08008bfb 	.word	0x08008bfb
 8008b98:	08008c89 	.word	0x08008c89
 8008b9c:	08008b4d 	.word	0x08008b4d
 8008ba0:	08008b4d 	.word	0x08008b4d
 8008ba4:	08008cf1 	.word	0x08008cf1
 8008ba8:	08008b4d 	.word	0x08008b4d
 8008bac:	08008bfb 	.word	0x08008bfb
 8008bb0:	08008b4d 	.word	0x08008b4d
 8008bb4:	08008b4d 	.word	0x08008b4d
 8008bb8:	08008c91 	.word	0x08008c91
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6032      	str	r2, [r6, #0]
 8008bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e09c      	b.n	8008d0a <_printf_i+0x1e6>
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	1d19      	adds	r1, r3, #4
 8008bd6:	6031      	str	r1, [r6, #0]
 8008bd8:	0606      	lsls	r6, r0, #24
 8008bda:	d501      	bpl.n	8008be0 <_printf_i+0xbc>
 8008bdc:	681d      	ldr	r5, [r3, #0]
 8008bde:	e003      	b.n	8008be8 <_printf_i+0xc4>
 8008be0:	0645      	lsls	r5, r0, #25
 8008be2:	d5fb      	bpl.n	8008bdc <_printf_i+0xb8>
 8008be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	da03      	bge.n	8008bf4 <_printf_i+0xd0>
 8008bec:	232d      	movs	r3, #45	@ 0x2d
 8008bee:	426d      	negs	r5, r5
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf4:	230a      	movs	r3, #10
 8008bf6:	4858      	ldr	r0, [pc, #352]	@ (8008d58 <_printf_i+0x234>)
 8008bf8:	e011      	b.n	8008c1e <_printf_i+0xfa>
 8008bfa:	6821      	ldr	r1, [r4, #0]
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	0608      	lsls	r0, r1, #24
 8008c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c04:	d402      	bmi.n	8008c0c <_printf_i+0xe8>
 8008c06:	0649      	lsls	r1, r1, #25
 8008c08:	bf48      	it	mi
 8008c0a:	b2ad      	uxthmi	r5, r5
 8008c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	bf14      	ite	ne
 8008c12:	230a      	movne	r3, #10
 8008c14:	2308      	moveq	r3, #8
 8008c16:	4850      	ldr	r0, [pc, #320]	@ (8008d58 <_printf_i+0x234>)
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c1e:	6866      	ldr	r6, [r4, #4]
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	60a6      	str	r6, [r4, #8]
 8008c24:	db05      	blt.n	8008c32 <_printf_i+0x10e>
 8008c26:	6821      	ldr	r1, [r4, #0]
 8008c28:	432e      	orrs	r6, r5
 8008c2a:	f021 0104 	bic.w	r1, r1, #4
 8008c2e:	6021      	str	r1, [r4, #0]
 8008c30:	d04b      	beq.n	8008cca <_printf_i+0x1a6>
 8008c32:	4616      	mov	r6, r2
 8008c34:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c38:	fb03 5711 	mls	r7, r3, r1, r5
 8008c3c:	5dc7      	ldrb	r7, [r0, r7]
 8008c3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c42:	462f      	mov	r7, r5
 8008c44:	42bb      	cmp	r3, r7
 8008c46:	460d      	mov	r5, r1
 8008c48:	d9f4      	bls.n	8008c34 <_printf_i+0x110>
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d10b      	bne.n	8008c66 <_printf_i+0x142>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	07df      	lsls	r7, r3, #31
 8008c52:	d508      	bpl.n	8008c66 <_printf_i+0x142>
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	6861      	ldr	r1, [r4, #4]
 8008c58:	4299      	cmp	r1, r3
 8008c5a:	bfde      	ittt	le
 8008c5c:	2330      	movle	r3, #48	@ 0x30
 8008c5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c66:	1b92      	subs	r2, r2, r6
 8008c68:	6122      	str	r2, [r4, #16]
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f8cd a000 	str.w	sl, [sp]
 8008c74:	aa03      	add	r2, sp, #12
 8008c76:	f7ff fee3 	bl	8008a40 <_printf_common>
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d14a      	bne.n	8008d14 <_printf_i+0x1f0>
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	b004      	add	sp, #16
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	f043 0320 	orr.w	r3, r3, #32
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	2778      	movs	r7, #120	@ 0x78
 8008c92:	4832      	ldr	r0, [pc, #200]	@ (8008d5c <_printf_i+0x238>)
 8008c94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	6831      	ldr	r1, [r6, #0]
 8008c9c:	061f      	lsls	r7, r3, #24
 8008c9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ca2:	d402      	bmi.n	8008caa <_printf_i+0x186>
 8008ca4:	065f      	lsls	r7, r3, #25
 8008ca6:	bf48      	it	mi
 8008ca8:	b2ad      	uxthmi	r5, r5
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	07d9      	lsls	r1, r3, #31
 8008cae:	bf44      	itt	mi
 8008cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb4:	6023      	strmi	r3, [r4, #0]
 8008cb6:	b11d      	cbz	r5, 8008cc0 <_printf_i+0x19c>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	e7ad      	b.n	8008c18 <_printf_i+0xf4>
 8008cbc:	4826      	ldr	r0, [pc, #152]	@ (8008d58 <_printf_i+0x234>)
 8008cbe:	e7e9      	b.n	8008c94 <_printf_i+0x170>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f023 0320 	bic.w	r3, r3, #32
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	e7f6      	b.n	8008cb8 <_printf_i+0x194>
 8008cca:	4616      	mov	r6, r2
 8008ccc:	e7bd      	b.n	8008c4a <_printf_i+0x126>
 8008cce:	6833      	ldr	r3, [r6, #0]
 8008cd0:	6825      	ldr	r5, [r4, #0]
 8008cd2:	1d18      	adds	r0, r3, #4
 8008cd4:	6961      	ldr	r1, [r4, #20]
 8008cd6:	6030      	str	r0, [r6, #0]
 8008cd8:	062e      	lsls	r6, r5, #24
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	d501      	bpl.n	8008ce2 <_printf_i+0x1be>
 8008cde:	6019      	str	r1, [r3, #0]
 8008ce0:	e002      	b.n	8008ce8 <_printf_i+0x1c4>
 8008ce2:	0668      	lsls	r0, r5, #25
 8008ce4:	d5fb      	bpl.n	8008cde <_printf_i+0x1ba>
 8008ce6:	8019      	strh	r1, [r3, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4616      	mov	r6, r2
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	e7bc      	b.n	8008c6a <_printf_i+0x146>
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	6032      	str	r2, [r6, #0]
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f859 	bl	8008db4 <memchr>
 8008d02:	b108      	cbz	r0, 8008d08 <_printf_i+0x1e4>
 8008d04:	1b80      	subs	r0, r0, r6
 8008d06:	6060      	str	r0, [r4, #4]
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d12:	e7aa      	b.n	8008c6a <_printf_i+0x146>
 8008d14:	4632      	mov	r2, r6
 8008d16:	4649      	mov	r1, r9
 8008d18:	4640      	mov	r0, r8
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	47d0      	blx	sl
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d0ad      	beq.n	8008c7e <_printf_i+0x15a>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	079b      	lsls	r3, r3, #30
 8008d26:	d413      	bmi.n	8008d50 <_printf_i+0x22c>
 8008d28:	68e0      	ldr	r0, [r4, #12]
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	4298      	cmp	r0, r3
 8008d2e:	bfb8      	it	lt
 8008d30:	4618      	movlt	r0, r3
 8008d32:	e7a6      	b.n	8008c82 <_printf_i+0x15e>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4632      	mov	r2, r6
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	47d0      	blx	sl
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d09d      	beq.n	8008c7e <_printf_i+0x15a>
 8008d42:	3501      	adds	r5, #1
 8008d44:	68e3      	ldr	r3, [r4, #12]
 8008d46:	9903      	ldr	r1, [sp, #12]
 8008d48:	1a5b      	subs	r3, r3, r1
 8008d4a:	42ab      	cmp	r3, r5
 8008d4c:	dcf2      	bgt.n	8008d34 <_printf_i+0x210>
 8008d4e:	e7eb      	b.n	8008d28 <_printf_i+0x204>
 8008d50:	2500      	movs	r5, #0
 8008d52:	f104 0619 	add.w	r6, r4, #25
 8008d56:	e7f5      	b.n	8008d44 <_printf_i+0x220>
 8008d58:	0800970d 	.word	0x0800970d
 8008d5c:	0800971e 	.word	0x0800971e

08008d60 <memmove>:
 8008d60:	4288      	cmp	r0, r1
 8008d62:	b510      	push	{r4, lr}
 8008d64:	eb01 0402 	add.w	r4, r1, r2
 8008d68:	d902      	bls.n	8008d70 <memmove+0x10>
 8008d6a:	4284      	cmp	r4, r0
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	d807      	bhi.n	8008d80 <memmove+0x20>
 8008d70:	1e43      	subs	r3, r0, #1
 8008d72:	42a1      	cmp	r1, r4
 8008d74:	d008      	beq.n	8008d88 <memmove+0x28>
 8008d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d7e:	e7f8      	b.n	8008d72 <memmove+0x12>
 8008d80:	4601      	mov	r1, r0
 8008d82:	4402      	add	r2, r0
 8008d84:	428a      	cmp	r2, r1
 8008d86:	d100      	bne.n	8008d8a <memmove+0x2a>
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d92:	e7f7      	b.n	8008d84 <memmove+0x24>

08008d94 <_sbrk_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	2300      	movs	r3, #0
 8008d98:	4d05      	ldr	r5, [pc, #20]	@ (8008db0 <_sbrk_r+0x1c>)
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7f8 fd1a 	bl	80017d8 <_sbrk>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_sbrk_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_sbrk_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200005bc 	.word	0x200005bc

08008db4 <memchr>:
 8008db4:	4603      	mov	r3, r0
 8008db6:	b510      	push	{r4, lr}
 8008db8:	b2c9      	uxtb	r1, r1
 8008dba:	4402      	add	r2, r0
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	d101      	bne.n	8008dc6 <memchr+0x12>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e003      	b.n	8008dce <memchr+0x1a>
 8008dc6:	7804      	ldrb	r4, [r0, #0]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	428c      	cmp	r4, r1
 8008dcc:	d1f6      	bne.n	8008dbc <memchr+0x8>
 8008dce:	bd10      	pop	{r4, pc}

08008dd0 <_realloc_r>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	460d      	mov	r5, r1
 8008dda:	b921      	cbnz	r1, 8008de6 <_realloc_r+0x16>
 8008ddc:	4611      	mov	r1, r2
 8008dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de2:	f7ff bc49 	b.w	8008678 <_malloc_r>
 8008de6:	b92a      	cbnz	r2, 8008df4 <_realloc_r+0x24>
 8008de8:	f7ff fbdc 	bl	80085a4 <_free_r>
 8008dec:	4625      	mov	r5, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df4:	f000 f81a 	bl	8008e2c <_malloc_usable_size_r>
 8008df8:	4284      	cmp	r4, r0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	d802      	bhi.n	8008e04 <_realloc_r+0x34>
 8008dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e02:	d8f4      	bhi.n	8008dee <_realloc_r+0x1e>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7ff fc36 	bl	8008678 <_malloc_r>
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	b908      	cbnz	r0, 8008e14 <_realloc_r+0x44>
 8008e10:	4645      	mov	r5, r8
 8008e12:	e7ec      	b.n	8008dee <_realloc_r+0x1e>
 8008e14:	42b4      	cmp	r4, r6
 8008e16:	4622      	mov	r2, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	bf28      	it	cs
 8008e1c:	4632      	movcs	r2, r6
 8008e1e:	f7ff fbb3 	bl	8008588 <memcpy>
 8008e22:	4629      	mov	r1, r5
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fbbd 	bl	80085a4 <_free_r>
 8008e2a:	e7f1      	b.n	8008e10 <_realloc_r+0x40>

08008e2c <_malloc_usable_size_r>:
 8008e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e30:	1f18      	subs	r0, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bfbc      	itt	lt
 8008e36:	580b      	ldrlt	r3, [r1, r0]
 8008e38:	18c0      	addlt	r0, r0, r3
 8008e3a:	4770      	bx	lr

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
