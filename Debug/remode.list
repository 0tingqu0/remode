
remode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  08009074  08009074  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009968  08009968  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009968  08009968  0000a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009970  08009970  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009970  08009970  0000a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009974  08009974  0000a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009978  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000078  080099ec  0000b078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  080099ec  0000b5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017366  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003efa  00000000  00000000  00022403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00026300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c7  00000000  00000000  000279d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad99  00000000  00000000  00028b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0e9  00000000  00000000  00043930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095499  00000000  00000000  00060a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006388  00000000  00000000  000f5ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fc280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800905c 	.word	0x0800905c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800905c 	.word	0x0800905c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b3d      	ldr	r3, [pc, #244]	@ (8000264 <MX_ADC1_Init+0x108>)
 800016e:	4a3e      	ldr	r2, [pc, #248]	@ (8000268 <MX_ADC1_Init+0x10c>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b3c      	ldr	r3, [pc, #240]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b3a      	ldr	r3, [pc, #232]	@ (8000264 <MX_ADC1_Init+0x108>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b38      	ldr	r3, [pc, #224]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b37      	ldr	r3, [pc, #220]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b35      	ldr	r3, [pc, #212]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000194:	4b33      	ldr	r3, [pc, #204]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000196:	2206      	movs	r2, #6
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4832      	ldr	r0, [pc, #200]	@ (8000264 <MX_ADC1_Init+0x108>)
 800019c:	f001 fdf4 	bl	8001d88 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fe54 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001b2:	2301      	movs	r3, #1
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	482a      	ldr	r0, [pc, #168]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001bc:	f002 f874 	bl	80022a8 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fe44 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	4823      	ldr	r0, [pc, #140]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001d8:	f002 f866 	bl	80022a8 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fe36 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001e6:	2302      	movs	r3, #2
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	481c      	ldr	r0, [pc, #112]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001f4:	f002 f858 	bl	80022a8 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fe28 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000206:	2304      	movs	r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000210:	f002 f84a 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800021a:	f000 fe1a 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800021e:	2310      	movs	r3, #16
 8000220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000222:	2305      	movs	r3, #5
 8000224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000226:	2304      	movs	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	480d      	ldr	r0, [pc, #52]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000230:	f002 f83a 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800023a:	f000 fe0a 	bl	8000e52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800023e:	2311      	movs	r3, #17
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000242:	2306      	movs	r3, #6
 8000244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <MX_ADC1_Init+0x108>)
 800024c:	f002 f82c 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000256:	f000 fdfc 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2c      	ldr	r2, [pc, #176]	@ (8000338 <HAL_ADC_MspInit+0xcc>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d151      	bne.n	8000330 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2a      	ldr	r2, [pc, #168]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b28      	ldr	r3, [pc, #160]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b25      	ldr	r3, [pc, #148]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a24      	ldr	r2, [pc, #144]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002bc:	230f      	movs	r3, #15
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	481d      	ldr	r0, [pc, #116]	@ (8000340 <HAL_ADC_MspInit+0xd4>)
 80002cc:	f002 ffe4 	bl	8003298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <HAL_ADC_MspInit+0xdc>)
 80002d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000304:	480f      	ldr	r0, [pc, #60]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000306:	f002 fb9b 	bl	8002a40 <HAL_DMA_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000310:	f000 fd9f 	bl	8000e52 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000318:	621a      	str	r2, [r3, #32]
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2012      	movs	r0, #18
 8000326:	f002 fb48 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800032a:	2012      	movs	r0, #18
 800032c:	f002 fb61 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40012400 	.word	0x40012400
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800
 8000344:	200000c4 	.word	0x200000c4
 8000348:	40020008 	.word	0x40020008

0800034c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	200b      	movs	r0, #11
 8000370:	f002 fb23 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000374:	200b      	movs	r0, #11
 8000376:	f002 fb3c 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	200c      	movs	r0, #12
 8000380:	f002 fb1b 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000384:	200c      	movs	r0, #12
 8000386:	f002 fb34 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200d      	movs	r0, #13
 8000390:	f002 fb13 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000394:	200d      	movs	r0, #13
 8000396:	f002 fb2c 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2010      	movs	r0, #16
 80003a0:	f002 fb0b 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003a4:	2010      	movs	r0, #16
 80003a6:	f002 fb24 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2011      	movs	r0, #17
 80003b0:	f002 fb03 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003b4:	2011      	movs	r0, #17
 80003b6:	f002 fb1c 	bl	80029f2 <HAL_NVIC_EnableIRQ>

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b50      	ldr	r3, [pc, #320]	@ (8000520 <MX_GPIO_Init+0x158>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a4f      	ldr	r2, [pc, #316]	@ (8000520 <MX_GPIO_Init+0x158>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000520 <MX_GPIO_Init+0x158>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000520 <MX_GPIO_Init+0x158>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a49      	ldr	r2, [pc, #292]	@ (8000520 <MX_GPIO_Init+0x158>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b47      	ldr	r3, [pc, #284]	@ (8000520 <MX_GPIO_Init+0x158>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b44      	ldr	r3, [pc, #272]	@ (8000520 <MX_GPIO_Init+0x158>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a43      	ldr	r2, [pc, #268]	@ (8000520 <MX_GPIO_Init+0x158>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b41      	ldr	r3, [pc, #260]	@ (8000520 <MX_GPIO_Init+0x158>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b3e      	ldr	r3, [pc, #248]	@ (8000520 <MX_GPIO_Init+0x158>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a3d      	ldr	r2, [pc, #244]	@ (8000520 <MX_GPIO_Init+0x158>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b3b      	ldr	r3, [pc, #236]	@ (8000520 <MX_GPIO_Init+0x158>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000442:	4838      	ldr	r0, [pc, #224]	@ (8000524 <MX_GPIO_Init+0x15c>)
 8000444:	f003 f8c3 	bl	80035ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2103      	movs	r1, #3
 800044c:	4836      	ldr	r0, [pc, #216]	@ (8000528 <MX_GPIO_Init+0x160>)
 800044e:	f003 f8be 	bl	80035ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000458:	4833      	ldr	r0, [pc, #204]	@ (8000528 <MX_GPIO_Init+0x160>)
 800045a:	f003 f8b8 	bl	80035ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	482b      	ldr	r0, [pc, #172]	@ (8000524 <MX_GPIO_Init+0x15c>)
 8000478:	f002 ff0e 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800047c:	2310      	movs	r3, #16
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4827      	ldr	r0, [pc, #156]	@ (800052c <MX_GPIO_Init+0x164>)
 8000490:	f002 ff02 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000494:	2303      	movs	r3, #3
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	481f      	ldr	r0, [pc, #124]	@ (8000528 <MX_GPIO_Init+0x160>)
 80004ac:	f002 fef4 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4819      	ldr	r0, [pc, #100]	@ (8000528 <MX_GPIO_Init+0x160>)
 80004c2:	f002 fee9 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           remode1_Pin remode2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80004c6:	f24f 0318 	movw	r3, #61464	@ 0xf018
 80004ca:	613b      	str	r3, [r7, #16]
                          |remode1_Pin|remode2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4813      	ldr	r0, [pc, #76]	@ (8000528 <MX_GPIO_Init+0x160>)
 80004dc:	f002 fedc 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <MX_GPIO_Init+0x164>)
 80004f6:	f002 fecf 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000500:	2311      	movs	r3, #17
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_GPIO_Init+0x160>)
 8000514:	f002 fec0 	bl	8003298 <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40010800 	.word	0x40010800

08000530 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000536:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <MX_I2C1_Init+0x54>)
 8000538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_I2C1_Init+0x50>)
 800053c:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <MX_I2C1_Init+0x58>)
 800053e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <MX_I2C1_Init+0x50>)
 800054e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000554:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <MX_I2C1_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <MX_I2C1_Init+0x50>)
 800056e:	f003 f85f 	bl	8003630 <HAL_I2C_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000578:	f000 fc6b 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000108 	.word	0x20000108
 8000584:	40005400 	.word	0x40005400
 8000588:	00061a80 	.word	0x00061a80

0800058c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a45      	ldr	r2, [pc, #276]	@ (80006bc <HAL_I2C_MspInit+0x130>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	f040 8082 	bne.w	80006b2 <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b44      	ldr	r3, [pc, #272]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a43      	ldr	r2, [pc, #268]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b41      	ldr	r3, [pc, #260]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005c6:	23c0      	movs	r3, #192	@ 0xc0
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ca:	2312      	movs	r3, #18
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	483a      	ldr	r0, [pc, #232]	@ (80006c4 <HAL_I2C_MspInit+0x138>)
 80005da:	f002 fe5d 	bl	8003298 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a37      	ldr	r2, [pc, #220]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <HAL_I2C_MspInit+0x134>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80005f6:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 80005f8:	4a34      	ldr	r2, [pc, #208]	@ (80006cc <HAL_I2C_MspInit+0x140>)
 80005fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fc:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000602:	4b31      	ldr	r3, [pc, #196]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000608:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 8000622:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000626:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000628:	4827      	ldr	r0, [pc, #156]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 800062a:	f002 fa09 	bl	8002a40 <HAL_DMA_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8000634:	f000 fc0d 	bl	8000e52 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 800063c:	639a      	str	r2, [r3, #56]	@ 0x38
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_I2C_MspInit+0x13c>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000646:	4a23      	ldr	r2, [pc, #140]	@ (80006d4 <HAL_I2C_MspInit+0x148>)
 8000648:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 800064c:	2210      	movs	r2, #16
 800064e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000674:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000676:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 8000678:	f002 f9e2 	bl	8002a40 <HAL_DMA_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000682:	f000 fbe6 	bl	8000e52 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a11      	ldr	r2, [pc, #68]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 800068a:	635a      	str	r2, [r3, #52]	@ 0x34
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <HAL_I2C_MspInit+0x144>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	201f      	movs	r0, #31
 8000698:	f002 f98f 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800069c:	201f      	movs	r0, #31
 800069e:	f002 f9a8 	bl	80029f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2020      	movs	r0, #32
 80006a8:	f002 f987 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006ac:	2020      	movs	r0, #32
 80006ae:	f002 f9a0 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	2000015c 	.word	0x2000015c
 80006cc:	40020080 	.word	0x40020080
 80006d0:	200001a0 	.word	0x200001a0
 80006d4:	4002006c 	.word	0x4002006c

080006d8 <HAL_I2C_WriteCommand>:
 * 参    数：Control_bytes，控制字节
 * 参    数：Command 要写入的命令值，范围：0x00~0xFF
 * 返 回 值：无
 */
void HAL_I2C_WriteCommand(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t Command)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	807b      	strh	r3, [r7, #2]
 80006ea:	460b      	mov	r3, r1
 80006ec:	707b      	strb	r3, [r7, #1]
 80006ee:	4613      	mov	r3, r2
 80006f0:	703b      	strb	r3, [r7, #0]
    uint8_t TxData[2] = { Control_bytes , Command }; // 将控制字节和命令值打包
 80006f2:	787b      	ldrb	r3, [r7, #1]
 80006f4:	733b      	strb	r3, [r7, #12]
 80006f6:	783b      	ldrb	r3, [r7, #0]
 80006f8:	737b      	strb	r3, [r7, #13]

//    HAL_I2C_Master_Transmit(&hi2c1 , DevAddress << 1 , TxData , 2 , HAL_MAX_DELAY);
//      HAL_I2C_Master_Transmit_IT(&hi2c1 , DevAddress << 1 , TxData , 2 );
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 2);
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	b299      	uxth	r1, r3
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	2302      	movs	r3, #2
 8000706:	4807      	ldr	r0, [pc, #28]	@ (8000724 <HAL_I2C_WriteCommand+0x4c>)
 8000708:	f003 f8ea 	bl	80038e0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800070c:	bf00      	nop
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <HAL_I2C_WriteCommand+0x4c>)
 8000710:	f003 fc88 	bl	8004024 <HAL_I2C_GetState>
 8000714:	4603      	mov	r3, r0
 8000716:	2b20      	cmp	r3, #32
 8000718:	d1f9      	bne.n	800070e <HAL_I2C_WriteCommand+0x36>

}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000108 	.word	0x20000108

08000728 <HAL_I2C_WriteData>:
 * 参    数：DataLength，要写入数据的数量
 * 返 回 值：无
 */
void HAL_I2C_WriteData(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t *Data,
        uint8_t DataLength)
{
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	b089      	sub	sp, #36	@ 0x24
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	817b      	strh	r3, [r7, #10]
 8000738:	4613      	mov	r3, r2
 800073a:	727b      	strb	r3, [r7, #9]
 800073c:	466b      	mov	r3, sp
 800073e:	461e      	mov	r6, r3
    uint8_t TxData[1 + DataLength]; // 创建缓冲区，包含控制字节和数据
 8000740:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000744:	1c59      	adds	r1, r3, #1
 8000746:	1e4b      	subs	r3, r1, #1
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	460a      	mov	r2, r1
 800074c:	2300      	movs	r3, #0
 800074e:	4690      	mov	r8, r2
 8000750:	4699      	mov	r9, r3
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	f04f 0300 	mov.w	r3, #0
 800075a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800075e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000766:	460a      	mov	r2, r1
 8000768:	2300      	movs	r3, #0
 800076a:	4614      	mov	r4, r2
 800076c:	461d      	mov	r5, r3
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	00eb      	lsls	r3, r5, #3
 8000778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800077c:	00e2      	lsls	r2, r4, #3
 800077e:	460b      	mov	r3, r1
 8000780:	3307      	adds	r3, #7
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	ebad 0d03 	sub.w	sp, sp, r3
 800078a:	466b      	mov	r3, sp
 800078c:	3300      	adds	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
    TxData[0] = Control_bytes;        // 第一个字节是控制字节
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	7a7a      	ldrb	r2, [r7, #9]
 8000794:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < DataLength; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	77fb      	strb	r3, [r7, #31]
 800079a:	e00a      	b.n	80007b2 <HAL_I2C_WriteData+0x8a>
    {
        TxData[1 + i] = Data[i];    // 将数据复制到缓冲区
 800079c:	7ffb      	ldrb	r3, [r7, #31]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	441a      	add	r2, r3
 80007a2:	7ffb      	ldrb	r3, [r7, #31]
 80007a4:	3301      	adds	r3, #1
 80007a6:	7811      	ldrb	r1, [r2, #0]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DataLength; i++)
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	3301      	adds	r3, #1
 80007b0:	77fb      	strb	r3, [r7, #31]
 80007b2:	7ffa      	ldrb	r2, [r7, #31]
 80007b4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d3ef      	bcc.n	800079c <HAL_I2C_WriteData+0x74>
    }
//    HAL_I2C_Master_Transmit(&hi2c1, DevAddress << 1, TxData,  1 + DataLength, HAL_MAX_DELAY);
//    HAL_I2C_Master_Transmit_IT(&hi2c1, DevAddress << 1, TxData,  1 + DataLength);
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 1 + DataLength); // 发送数据
 80007bc:	897b      	ldrh	r3, [r7, #10]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b299      	uxth	r1, r3
 80007c2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3301      	adds	r3, #1
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <HAL_I2C_WriteData+0xc8>)
 80007d0:	f003 f886 	bl	80038e0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007d4:	bf00      	nop
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <HAL_I2C_WriteData+0xc8>)
 80007d8:	f003 fc24 	bl	8004024 <HAL_I2C_GetState>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b20      	cmp	r3, #32
 80007e0:	d1f9      	bne.n	80007d6 <HAL_I2C_WriteData+0xae>
 80007e2:	46b5      	mov	sp, r6
}
 80007e4:	bf00      	nop
 80007e6:	3724      	adds	r7, #36	@ 0x24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007ee:	bf00      	nop
 80007f0:	20000108 	.word	0x20000108

080007f4 <key_scan>:

uint8_t key1_state = 0, key2_state = 0, key3_state = 0, key4_state = 0;
uint8_t key[1];

void key_scan(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

    if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_12) == 0)
 80007f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007fc:	4853      	ldr	r0, [pc, #332]	@ (800094c <key_scan+0x158>)
 80007fe:	f002 fecf 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d121      	bne.n	800084c <key_scan+0x58>
    {
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_12) == 0)
 8000808:	e018      	b.n	800083c <key_scan+0x48>
            if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_12) == 0)
 800080a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800080e:	484f      	ldr	r0, [pc, #316]	@ (800094c <key_scan+0x158>)
 8000810:	f002 fec6 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d110      	bne.n	800083c <key_scan+0x48>
            {
                if (key1_state == 0)
 800081a:	4b4d      	ldr	r3, [pc, #308]	@ (8000950 <key_scan+0x15c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d106      	bne.n	8000830 <key_scan+0x3c>
                {
                    key[0] = 1;
 8000822:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <key_scan+0x160>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
                    key1_state = 1;
 8000828:	4b49      	ldr	r3, [pc, #292]	@ (8000950 <key_scan+0x15c>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e005      	b.n	800083c <key_scan+0x48>
                }
                else
                {
                    key[0] =2;
 8000830:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <key_scan+0x160>)
 8000832:	2202      	movs	r2, #2
 8000834:	701a      	strb	r2, [r3, #0]
                    key1_state = 0;
 8000836:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <key_scan+0x15c>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_12) == 0)
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4842      	ldr	r0, [pc, #264]	@ (800094c <key_scan+0x158>)
 8000842:	f002 fead 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0de      	beq.n	800080a <key_scan+0x16>
                }
            }
    }

    if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_13) == 0)
 800084c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000850:	483e      	ldr	r0, [pc, #248]	@ (800094c <key_scan+0x158>)
 8000852:	f002 fea5 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d121      	bne.n	80008a0 <key_scan+0xac>
    {
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_13) == 0)
 800085c:	e018      	b.n	8000890 <key_scan+0x9c>
            if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_13) == 0)
 800085e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000862:	483a      	ldr	r0, [pc, #232]	@ (800094c <key_scan+0x158>)
 8000864:	f002 fe9c 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d110      	bne.n	8000890 <key_scan+0x9c>
            {
                if (key2_state == 0)
 800086e:	4b3a      	ldr	r3, [pc, #232]	@ (8000958 <key_scan+0x164>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d106      	bne.n	8000884 <key_scan+0x90>
                {
                    key[0] =3;
 8000876:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <key_scan+0x160>)
 8000878:	2203      	movs	r2, #3
 800087a:	701a      	strb	r2, [r3, #0]
                    key2_state = 1;
 800087c:	4b36      	ldr	r3, [pc, #216]	@ (8000958 <key_scan+0x164>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e005      	b.n	8000890 <key_scan+0x9c>
                }
                else
                {
                    key[0] =4;
 8000884:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <key_scan+0x160>)
 8000886:	2204      	movs	r2, #4
 8000888:	701a      	strb	r2, [r3, #0]
                    key2_state = 0;
 800088a:	4b33      	ldr	r3, [pc, #204]	@ (8000958 <key_scan+0x164>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_13) == 0)
 8000890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000894:	482d      	ldr	r0, [pc, #180]	@ (800094c <key_scan+0x158>)
 8000896:	f002 fe83 	bl	80035a0 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0de      	beq.n	800085e <key_scan+0x6a>
                }
            }
    }

    if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_14) == 0)
 80008a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a4:	4829      	ldr	r0, [pc, #164]	@ (800094c <key_scan+0x158>)
 80008a6:	f002 fe7b 	bl	80035a0 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d121      	bne.n	80008f4 <key_scan+0x100>
    {
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_14) == 0)
 80008b0:	e018      	b.n	80008e4 <key_scan+0xf0>
            if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_14) == 0)
 80008b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b6:	4825      	ldr	r0, [pc, #148]	@ (800094c <key_scan+0x158>)
 80008b8:	f002 fe72 	bl	80035a0 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d110      	bne.n	80008e4 <key_scan+0xf0>
            {
                if (key3_state == 0)
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <key_scan+0x168>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d106      	bne.n	80008d8 <key_scan+0xe4>
                {
                    key[0] =5;
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <key_scan+0x160>)
 80008cc:	2205      	movs	r2, #5
 80008ce:	701a      	strb	r2, [r3, #0]
                    key3_state = 1;
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <key_scan+0x168>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e005      	b.n	80008e4 <key_scan+0xf0>
                }
                else
                {
                    key[0] =6;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <key_scan+0x160>)
 80008da:	2206      	movs	r2, #6
 80008dc:	701a      	strb	r2, [r3, #0]
                    key3_state = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <key_scan+0x168>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_14) == 0)
 80008e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e8:	4818      	ldr	r0, [pc, #96]	@ (800094c <key_scan+0x158>)
 80008ea:	f002 fe59 	bl	80035a0 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0de      	beq.n	80008b2 <key_scan+0xbe>
                }
            }
    }

    if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_15) == 0)
 80008f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f8:	4814      	ldr	r0, [pc, #80]	@ (800094c <key_scan+0x158>)
 80008fa:	f002 fe51 	bl	80035a0 <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d121      	bne.n	8000948 <key_scan+0x154>
    {
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_15) == 0)
 8000904:	e018      	b.n	8000938 <key_scan+0x144>
            if (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_15) == 0)
 8000906:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800090a:	4810      	ldr	r0, [pc, #64]	@ (800094c <key_scan+0x158>)
 800090c:	f002 fe48 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d110      	bne.n	8000938 <key_scan+0x144>
            {
                if (key4_state == 0)
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <key_scan+0x16c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d106      	bne.n	800092c <key_scan+0x138>
                {
                    key[0] =7;
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <key_scan+0x160>)
 8000920:	2207      	movs	r2, #7
 8000922:	701a      	strb	r2, [r3, #0]
                    key4_state = 1;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <key_scan+0x16c>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e005      	b.n	8000938 <key_scan+0x144>
                }
                else
                {
                    key[0] =8;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <key_scan+0x160>)
 800092e:	2208      	movs	r2, #8
 8000930:	701a      	strb	r2, [r3, #0]
                    key4_state = 0;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <key_scan+0x16c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_15) == 0)
 8000938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <key_scan+0x158>)
 800093e:	f002 fe2f 	bl	80035a0 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0de      	beq.n	8000906 <key_scan+0x112>
                }
            }
    }
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010c00 	.word	0x40010c00
 8000950:	200001e4 	.word	0x200001e4
 8000954:	200001e8 	.word	0x200001e8
 8000958:	200001e5 	.word	0x200001e5
 800095c:	200001e6 	.word	0x200001e6
 8000960:	200001e7 	.word	0x200001e7

08000964 <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08b      	sub	sp, #44	@ 0x2c
 8000968:	af04      	add	r7, sp, #16
 800096a:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a60      	ldr	r2, [pc, #384]	@ (8000af0 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	f040 80b9 	bne.w	8000ae8 <HAL_ADC_ConvHalfCpltCallback+0x184>
    {
        static uint8_t i = 0;
//    i++;
        // 遍历所有通道进行滤波
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 8000976:	2300      	movs	r3, #0
 8000978:	75fb      	strb	r3, [r7, #23]
 800097a:	e067      	b.n	8000a4c <HAL_ADC_ConvHalfCpltCallback+0xe8>
        {
            // 更新滤波器
            joystick_filters[ch].buffer[joystick_filters[ch].index] = adc_raw[ch];
 800097c:	7df8      	ldrb	r0, [r7, #23]
 800097e:	7dfa      	ldrb	r2, [r7, #23]
 8000980:	7df9      	ldrb	r1, [r7, #23]
 8000982:	4c5c      	ldr	r4, [pc, #368]	@ (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8000984:	460b      	mov	r3, r1
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	440b      	add	r3, r1
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4423      	add	r3, r4
 800098e:	3310      	adds	r3, #16
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461c      	mov	r4, r3
 8000994:	4b58      	ldr	r3, [pc, #352]	@ (8000af8 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8000996:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800099a:	b298      	uxth	r0, r3
 800099c:	4955      	ldr	r1, [pc, #340]	@ (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	4423      	add	r3, r4
 80009a6:	4602      	mov	r2, r0
 80009a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            joystick_filters[ch].index = (joystick_filters[ch].index + 1) % FILTER_WINDOW;
 80009ac:	7dfa      	ldrb	r2, [r7, #23]
 80009ae:	4951      	ldr	r1, [pc, #324]	@ (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	440b      	add	r3, r1
 80009ba:	3310      	adds	r3, #16
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	425a      	negs	r2, r3
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	f002 0207 	and.w	r2, r2, #7
 80009ca:	bf58      	it	pl
 80009cc:	4253      	negpl	r3, r2
 80009ce:	7dfa      	ldrb	r2, [r7, #23]
 80009d0:	b2d8      	uxtb	r0, r3
 80009d2:	4948      	ldr	r1, [pc, #288]	@ (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 80009d4:	4613      	mov	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	440b      	add	r3, r1
 80009de:	3310      	adds	r3, #16
 80009e0:	4602      	mov	r2, r0
 80009e2:	701a      	strb	r2, [r3, #0]

            // 计算滑动平均
            uint32_t sum = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e00f      	b.n	8000a0e <HAL_ADC_ConvHalfCpltCallback+0xaa>
            {
                sum += joystick_filters[ch].buffer[i];
 80009ee:	7dfa      	ldrb	r2, [r7, #23]
 80009f0:	7bf9      	ldrb	r1, [r7, #15]
 80009f2:	4840      	ldr	r0, [pc, #256]	@ (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000a00:	461a      	mov	r2, r3
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4413      	add	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b07      	cmp	r3, #7
 8000a12:	d9ec      	bls.n	80009ee <HAL_ADC_ConvHalfCpltCallback+0x8a>
            }
            filtered_values[ch] = sum / FILTER_WINDOW;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	b291      	uxth	r1, r2
 8000a1c:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (abs(filtered_values[ch] - 2048) <= DEADZONE_THRESHOLD)
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	4a35      	ldr	r2, [pc, #212]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bfb8      	it	lt
 8000a34:	425b      	neglt	r3, r3
 8000a36:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a38:	dc05      	bgt.n	8000a46 <HAL_ADC_ConvHalfCpltCallback+0xe2>
            {
                filtered_values[ch] = 2048;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d994      	bls.n	800097c <HAL_ADC_ConvHalfCpltCallback+0x18>
            }
        }
        if (filtered_values[0] == 2048)
 8000a52:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a5c:	d102      	bne.n	8000a64 <HAL_ADC_ConvHalfCpltCallback+0x100>
            i = 1;
 8000a5e:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
        if (i == 1)
 8000a64:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d13d      	bne.n	8000ae8 <HAL_ADC_ConvHalfCpltCallback+0x184>
        {
            filtered_values[4]=key[0];
 8000a6c:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <HAL_ADC_ConvHalfCpltCallback+0x1a0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a74:	811a      	strh	r2, [r3, #8]
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461c      	mov	r4, r3
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a80:	885b      	ldrh	r3, [r3, #2]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	461a      	mov	r2, r3
                    filtered_values[3] , filtered_values[4], filtered_values[2]);
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a88:	88db      	ldrh	r3, [r3, #6]
 8000a8a:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000a8c:	4619      	mov	r1, r3
                    filtered_values[3] , filtered_values[4], filtered_values[2]);
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a90:	891b      	ldrh	r3, [r3, #8]
 8000a92:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000a94:	4618      	mov	r0, r3
                    filtered_values[3] , filtered_values[4], filtered_values[2]);
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d,%d," , filtered_values[0] , filtered_values[1] ,
 8000a9c:	9303      	str	r3, [sp, #12]
 8000a9e:	9002      	str	r0, [sp, #8]
 8000aa0:	9101      	str	r1, [sp, #4]
 8000aa2:	9200      	str	r2, [sp, #0]
 8000aa4:	4623      	mov	r3, r4
 8000aa6:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8000aa8:	2114      	movs	r1, #20
 8000aaa:	4818      	ldr	r0, [pc, #96]	@ (8000b0c <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
 8000aac:	f007 fdf0 	bl	8008690 <sniprintf>

            sprintf(remode1 , "%d,%d " , filtered_values[0] , filtered_values[1]);
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000aba:	885b      	ldrh	r3, [r3, #2]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4914      	ldr	r1, [pc, #80]	@ (8000b10 <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8000ac0:	4814      	ldr	r0, [pc, #80]	@ (8000b14 <HAL_ADC_ConvHalfCpltCallback+0x1b0>)
 8000ac2:	f007 fe1b 	bl	80086fc <siprintf>
            sprintf(remode2 , "%d,%d %d" , filtered_values[2] , filtered_values[3],filtered_values[4] );
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000ac8:	889b      	ldrh	r3, [r3, #4]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000ad0:	88db      	ldrh	r3, [r3, #6]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8000ad8:	891b      	ldrh	r3, [r3, #8]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <HAL_ADC_ConvHalfCpltCallback+0x1b4>)
 8000ae2:	480e      	ldr	r0, [pc, #56]	@ (8000b1c <HAL_ADC_ConvHalfCpltCallback+0x1b8>)
 8000ae4:	f007 fe0a 	bl	80086fc <siprintf>

        }
    }
}
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	20000094 	.word	0x20000094
 8000af4:	200002a0 	.word	0x200002a0
 8000af8:	2000028c 	.word	0x2000028c
 8000afc:	20000294 	.word	0x20000294
 8000b00:	200002e8 	.word	0x200002e8
 8000b04:	200001e8 	.word	0x200001e8
 8000b08:	08009074 	.word	0x08009074
 8000b0c:	200001ec 	.word	0x200001ec
 8000b10:	08009084 	.word	0x08009084
 8000b14:	20000200 	.word	0x20000200
 8000b18:	0800908c 	.word	0x0800908c
 8000b1c:	20000234 	.word	0x20000234

08000b20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d106      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
        timerflag++; // 设置2000ms标志
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b3e:	701a      	strb	r2, [r3, #0]
    }
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	2000029c 	.word	0x2000029c

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
    uint8_t i = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f001 f88d 	bl	8001c7c <HAL_Init>

  /* USER CODE BEGIN Init */
    HAL_SYSTICK_IRQHandler();
 8000b62:	f001 ff60 	bl	8002a26 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f919 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f7ff fc2d 	bl	80003c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f7ff fbed 	bl	800034c <MX_DMA_Init>
  MX_I2C1_Init();
 8000b72:	f7ff fcdd 	bl	8000530 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b76:	f7ff faf1 	bl	800015c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000b7a:	f000 fd5f 	bl	800163c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b7e:	f000 ffd9 	bl	8001b34 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b82:	f000 ff5f 	bl	8001a44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    // 启动定时器中断
    HAL_TIM_Base_Start_IT(&htim1);
 8000b86:	4876      	ldr	r0, [pc, #472]	@ (8000d60 <main+0x20c>)
 8000b88:	f006 fb1c 	bl	80071c4 <HAL_TIM_Base_Start_IT>

    // 初始化滤波器结构体
    memset(joystick_filters , 0 , sizeof(joystick_filters));
 8000b8c:	2248      	movs	r2, #72	@ 0x48
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4874      	ldr	r0, [pc, #464]	@ (8000d64 <main+0x210>)
 8000b92:	f007 fdd5 	bl	8008740 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000b96:	4874      	ldr	r0, [pc, #464]	@ (8000d68 <main+0x214>)
 8000b98:	f001 fd80 	bl	800269c <HAL_ADCEx_Calibration_Start>
    hadc1.Instance->CR2 |= ADC_CR2_CAL;  // 启动内部校准
 8000b9c:	4b72      	ldr	r3, [pc, #456]	@ (8000d68 <main+0x214>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	4b71      	ldr	r3, [pc, #452]	@ (8000d68 <main+0x214>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0204 	orr.w	r2, r2, #4
 8000baa:	609a      	str	r2, [r3, #8]
    while (hadc1.Instance->CR2 & ADC_CR2_CAL); // 等待校准完成
 8000bac:	bf00      	nop
 8000bae:	4b6e      	ldr	r3, [pc, #440]	@ (8000d68 <main+0x214>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f8      	bne.n	8000bae <main+0x5a>

    OLED_Init();                           //OLED初始
 8000bbc:	f007 fbd6 	bl	800836c <OLED_Init>
    OLED_ShowString(42 , 3 , "hellow" , 12 , 0);    //反相显示8X16字符串
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	4a69      	ldr	r2, [pc, #420]	@ (8000d6c <main+0x218>)
 8000bc8:	2103      	movs	r1, #3
 8000bca:	202a      	movs	r0, #42	@ 0x2a
 8000bcc:	f007 fd10 	bl	80085f0 <OLED_ShowString>

    //RF24L01引脚初始化
    NRF24L01_Gpio_Init();
 8000bd0:	f000 fcb2 	bl	8001538 <NRF24L01_Gpio_Init>

    //检测nRF24L01
    while (NRF24L01_check_DMA() == 0);
 8000bd4:	bf00      	nop
 8000bd6:	f000 faef 	bl	80011b8 <NRF24L01_check_DMA>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0fa      	beq.n	8000bd6 <main+0x82>
    RF24L01_Init_DMA();
 8000be0:	f000 fcc6 	bl	8001570 <RF24L01_Init_DMA>
    RF24L01_Set_Mode_DMA(MODE_TX);        //发送模式
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fb77 	bl	80012d8 <RF24L01_Set_Mode_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000bea:	2204      	movs	r2, #4
 8000bec:	4960      	ldr	r1, [pc, #384]	@ (8000d70 <main+0x21c>)
 8000bee:	485e      	ldr	r0, [pc, #376]	@ (8000d68 <main+0x214>)
 8000bf0:	f001 f9a2 	bl	8001f38 <HAL_ADC_Start_DMA>
        key_scan();
 8000bf4:	f7ff fdfe 	bl	80007f4 <key_scan>
        if (timerflag >= 2)
 8000bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d74 <main+0x220>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d92b      	bls.n	8000c5a <main+0x106>
        {
            if ((NRF24L01_TxPacket_DMA((uint8_t*) tx_buffer , strlen(tx_buffer)) == TX_OK))
 8000c02:	485d      	ldr	r0, [pc, #372]	@ (8000d78 <main+0x224>)
 8000c04:	f7ff faa2 	bl	800014c <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	485a      	ldr	r0, [pc, #360]	@ (8000d78 <main+0x224>)
 8000c10:	f000 fbba 	bl	8001388 <NRF24L01_TxPacket_DMA>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	d01c      	beq.n	8000c54 <main+0x100>
            {
            }
            else
            {
                if (clean >= 18)// oled页面刷新18次后显示
 8000c1a:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <main+0x228>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b11      	cmp	r3, #17
 8000c20:	d906      	bls.n	8000c30 <main+0xdc>
                {
                    TX_Errow++;
 8000c22:	4b57      	ldr	r3, [pc, #348]	@ (8000d80 <main+0x22c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b55      	ldr	r3, [pc, #340]	@ (8000d80 <main+0x22c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e002      	b.n	8000c36 <main+0xe2>
                    
                }
                else
                    TX_Errow = 0;
 8000c30:	4b53      	ldr	r3, [pc, #332]	@ (8000d80 <main+0x22c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
                if (TX_Errow >= 1)
 8000c36:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <main+0x22c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00a      	beq.n	8000c54 <main+0x100>
                {
//                    HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
                    memset(g_RF24L01RxBuffer , 0 , sizeof(g_RF24L01RxBuffer)); // 清空接收缓冲区
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4850      	ldr	r0, [pc, #320]	@ (8000d84 <main+0x230>)
 8000c44:	f007 fd7c 	bl	8008740 <memset>
                    TX_Errow = 0;
 8000c48:	4b4d      	ldr	r3, [pc, #308]	@ (8000d80 <main+0x22c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
                    conversion = 1;
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d88 <main+0x234>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
                }
            }
            timerflag = 0; // 清除标志
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <main+0x220>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
        }
        if (clean >= 18 && conversion == 1)
 8000c5a:	4b48      	ldr	r3, [pc, #288]	@ (8000d7c <main+0x228>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b11      	cmp	r3, #17
 8000c60:	d95a      	bls.n	8000d18 <main+0x1c4>
 8000c62:	4b49      	ldr	r3, [pc, #292]	@ (8000d88 <main+0x234>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d156      	bne.n	8000d18 <main+0x1c4>
        {
            uint32_t timeout = 50000; // 设置超时计数
 8000c6a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8000c6e:	60bb      	str	r3, [r7, #8]
            uint8_t rx_status = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
            
            /* 切换LED状态，指示接收状态 */
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c78:	4844      	ldr	r0, [pc, #272]	@ (8000d8c <main+0x238>)
 8000c7a:	f002 fcc0 	bl	80035fe <HAL_GPIO_TogglePin>
            
            /* 切换到接收模式 */
            RF24L01_Set_Mode_DMA(MODE_RX);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fb2a 	bl	80012d8 <RF24L01_Set_Mode_DMA>
            
            /* 等待接收数据，添加超时机制 */
            while ((rx_status = NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)) == 0)
 8000c84:	e00e      	b.n	8000ca4 <main+0x150>
            {
                timeout--;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
                if (timeout == 0)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d108      	bne.n	8000ca4 <main+0x150>
                {
                    /* 超时处理 */
                    OLED_ShowString(0, 6, "RX Timeout", 12, 0);
 8000c92:	2300      	movs	r3, #0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	230c      	movs	r3, #12
 8000c98:	4a3d      	ldr	r2, [pc, #244]	@ (8000d90 <main+0x23c>)
 8000c9a:	2106      	movs	r1, #6
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f007 fca7 	bl	80085f0 <OLED_ShowString>
                    break;
 8000ca2:	e007      	b.n	8000cb4 <main+0x160>
            while ((rx_status = NRF24L01_RxPacket_DMA(g_RF24L01RxBuffer)) == 0)
 8000ca4:	4837      	ldr	r0, [pc, #220]	@ (8000d84 <main+0x230>)
 8000ca6:	f000 fbef 	bl	8001488 <NRF24L01_RxPacket_DMA>
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0e8      	beq.n	8000c86 <main+0x132>
                }
            }
            
            /* 如果成功接收数据 */
            if (rx_status != 0 && timeout > 0)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d028      	beq.n	8000d0c <main+0x1b8>
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d025      	beq.n	8000d0c <main+0x1b8>
            {
                /* 根据数据类型显示在不同位置 */
                if (g_RF24L01RxBuffer[0] == '1')
 8000cc0:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <main+0x230>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b31      	cmp	r3, #49	@ 0x31
 8000cc6:	d108      	bne.n	8000cda <main+0x186>
                {
                    OLED_ShowString(0, 3, g_RF24L01RxBuffer, 12, 0);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	230c      	movs	r3, #12
 8000cce:	4a2d      	ldr	r2, [pc, #180]	@ (8000d84 <main+0x230>)
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f007 fc8c 	bl	80085f0 <OLED_ShowString>
 8000cd8:	e018      	b.n	8000d0c <main+0x1b8>
                }
                else if (g_RF24L01RxBuffer[0] == '2')
 8000cda:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <main+0x230>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b32      	cmp	r3, #50	@ 0x32
 8000ce0:	d108      	bne.n	8000cf4 <main+0x1a0>
                {
                    OLED_ShowString(0, 4, g_RF24L01RxBuffer, 12, 0);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	4a26      	ldr	r2, [pc, #152]	@ (8000d84 <main+0x230>)
 8000cea:	2104      	movs	r1, #4
 8000cec:	2000      	movs	r0, #0
 8000cee:	f007 fc7f 	bl	80085f0 <OLED_ShowString>
 8000cf2:	e00b      	b.n	8000d0c <main+0x1b8>
                }
                else if (g_RF24L01RxBuffer[0] == '3')
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <main+0x230>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b33      	cmp	r3, #51	@ 0x33
 8000cfa:	d107      	bne.n	8000d0c <main+0x1b8>
                {
                    OLED_ShowString(0, 5, g_RF24L01RxBuffer, 12, 0);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	230c      	movs	r3, #12
 8000d02:	4a20      	ldr	r2, [pc, #128]	@ (8000d84 <main+0x230>)
 8000d04:	2105      	movs	r1, #5
 8000d06:	2000      	movs	r0, #0
 8000d08:	f007 fc72 	bl	80085f0 <OLED_ShowString>
//                    OLED_ShowString(0, 3, g_RF24L01RxBuffer, 12, 0);
//                }
            }
            
            /* 切回发送模式 */
            RF24L01_Set_Mode_DMA(MODE_TX);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fae3 	bl	80012d8 <RF24L01_Set_Mode_DMA>
            conversion = 0; // 清除转换标志
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <main+0x234>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
        }
        OLED_ShowString(0 , 0 , remode1 , 12 , 0);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <main+0x240>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f007 fc64 	bl	80085f0 <OLED_ShowString>
        OLED_ShowString(64 , 0 , remode2 , 12 , 0);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <main+0x244>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	2040      	movs	r0, #64	@ 0x40
 8000d34:	f007 fc5c 	bl	80085f0 <OLED_ShowString>



        if (clean >= 15 && i == 0) //oled刷新15次后显示
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <main+0x228>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b0e      	cmp	r3, #14
 8000d3e:	f67f af54 	bls.w	8000bea <main+0x96>
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f47f af50 	bne.w	8000bea <main+0x96>
        {
            OLED_Clear();
 8000d4a:	f007 fb51 	bl	80083f0 <OLED_Clear>
            i = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]

            HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13 , 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <main+0x238>)
 8000d5a:	f002 fc38 	bl	80035ce <HAL_GPIO_WritePin>
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000d5e:	e744      	b.n	8000bea <main+0x96>
 8000d60:	200003d0 	.word	0x200003d0
 8000d64:	200002a0 	.word	0x200002a0
 8000d68:	20000094 	.word	0x20000094
 8000d6c:	08009098 	.word	0x08009098
 8000d70:	2000028c 	.word	0x2000028c
 8000d74:	2000029c 	.word	0x2000029c
 8000d78:	200001ec 	.word	0x200001ec
 8000d7c:	20000488 	.word	0x20000488
 8000d80:	20000289 	.word	0x20000289
 8000d84:	20000268 	.word	0x20000268
 8000d88:	20000288 	.word	0x20000288
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	080090a0 	.word	0x080090a0
 8000d94:	20000200 	.word	0x20000200
 8000d98:	20000234 	.word	0x20000234

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	@ 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da6:	2228      	movs	r2, #40	@ 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 fcc8 	bl	8008740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000de8:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fcb6 	bl	8005764 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dfe:	f000 f828 	bl	8000e52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 ff22 	bl	8005c68 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e2a:	f000 f812 	bl	8000e52 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e32:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 f8a2 	bl	8005f84 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e46:	f000 f804 	bl	8000e52 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	@ 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e56:	b672      	cpsid	i
}
 8000e58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e5a:	bf00      	nop
 8000e5c:	e7fd      	b.n	8000e5a <Error_Handler+0x8>
	...

08000e60 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &TxByte, &rx_data, 1, HAL_MAX_DELAY);
 8000e6a:	f107 020f 	add.w	r2, r7, #15
 8000e6e:	1df9      	adds	r1, r7, #7
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <drv_spi_read_write_byte+0x28>)
 8000e7a:	f005 fa73 	bl	8006364 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
    return rx_data;      //返回
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200002ec 	.word	0x200002ec

08000e8c <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_StatusTypeDef status;

    // 使用DMA进行SPI传输
    status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 8000e96:	f107 020e 	add.w	r2, r7, #14
 8000e9a:	1df9      	adds	r1, r7, #7
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <drv_spi_read_write_byte_dma+0x40>)
 8000ea0:	f005 fcbc 	bl	800681c <HAL_SPI_TransmitReceive_DMA>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <drv_spi_read_write_byte_dma+0x26>
    {
        // 处理错误情况
        Error_Handler();
 8000eae:	f7ff ffd0 	bl	8000e52 <Error_Handler>
    }

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000eb2:	bf00      	nop
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <drv_spi_read_write_byte_dma+0x40>)
 8000eb6:	f005 fed2 	bl	8006c5e <HAL_SPI_GetState>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1f9      	bne.n	8000eb4 <drv_spi_read_write_byte_dma+0x28>

    return rx_data;
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002ec 	.word	0x200002ec

08000ed0 <drv_spi_read_write_buffer_dma>:
/*​
 * @brief SPI DMA方式读写缓冲区
 */
HAL_StatusTypeDef drv_spi_read_write_buffer_dma(uint8_t *tx_buf,
        uint8_t *rx_buf, uint16_t len)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	4613      	mov	r3, r2
 8000edc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf,
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	68f9      	ldr	r1, [r7, #12]
 8000ee4:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <drv_spi_read_write_buffer_dma+0x38>)
 8000ee6:	f005 fc99 	bl	800681c <HAL_SPI_TransmitReceive_DMA>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
            rx_buf, len);
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000eee:	bf00      	nop
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <drv_spi_read_write_buffer_dma+0x38>)
 8000ef2:	f005 feb4 	bl	8006c5e <HAL_SPI_GetState>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1f9      	bne.n	8000ef0 <drv_spi_read_write_buffer_dma+0x20>
    return status;
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200002ec 	.word	0x200002ec

08000f0c <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2] = { NRF_READ_REG | RegAddr, 0xFF };  // 命令+空数据
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	733b      	strb	r3, [r7, #12]
 8000f1a:	23ff      	movs	r3, #255	@ 0xff
 8000f1c:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf[2] = { 0 };                            // 接收缓冲区
 8000f1e:	2300      	movs	r3, #0
 8000f20:	813b      	strh	r3, [r7, #8]

    RF24L01_SET_CS_LOW();          // 片选
 8000f22:	2200      	movs	r2, #0
 8000f24:	2102      	movs	r1, #2
 8000f26:	480e      	ldr	r0, [pc, #56]	@ (8000f60 <NRF24L01_Read_Reg_DMA+0x54>)
 8000f28:	f002 fb51 	bl	80035ce <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8000f2c:	f107 0208 	add.w	r2, r7, #8
 8000f30:	f107 010c 	add.w	r1, r7, #12
 8000f34:	2302      	movs	r3, #2
 8000f36:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <NRF24L01_Read_Reg_DMA+0x58>)
 8000f38:	f005 fc70 	bl	800681c <HAL_SPI_TransmitReceive_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f3c:	bf00      	nop
 8000f3e:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <NRF24L01_Read_Reg_DMA+0x58>)
 8000f40:	f005 fe8d 	bl	8006c5e <HAL_SPI_GetState>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d1f9      	bne.n	8000f3e <NRF24L01_Read_Reg_DMA+0x32>

    RF24L01_SET_CS_HIGH();         // 取消片选
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <NRF24L01_Read_Reg_DMA+0x54>)
 8000f50:	f002 fb3d 	bl	80035ce <HAL_GPIO_WritePin>

    return rx_buf[1];              // 返回接收到的数据
 8000f54:	7a7b      	ldrb	r3, [r7, #9]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	200002ec 	.word	0x200002ec

08000f68 <NRF24L01_Read_Buf_DMA>:
 *         @len: 数据长度
 * @note  :数据长度不超过255，地址在设备中有效
 * @retval:无
 */
void NRF24L01_Read_Buf_DMA(uint8_t RegAddr, uint8_t *pBuf, uint8_t len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b092      	sub	sp, #72	@ 0x48
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[32];  // 最大32字节
    uint8_t rx_buf[32];

    // 准备发送数据
    tx_buf[0] = NRF_READ_REG | RegAddr;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    memset(&tx_buf[1], 0xFF, len);  // 填充0xFF用于读取
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f84:	3301      	adds	r3, #1
 8000f86:	21ff      	movs	r1, #255	@ 0xff
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 fbd9 	bl	8008740 <memset>

    RF24L01_SET_CS_LOW();          // 片选
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	480f      	ldr	r0, [pc, #60]	@ (8000fd0 <NRF24L01_Read_Buf_DMA+0x68>)
 8000f94:	f002 fb1b 	bl	80035ce <HAL_GPIO_WritePin>

    // 使用DMA批量传输
    drv_spi_read_write_buffer_dma(tx_buf, rx_buf, len + 1);
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f107 0108 	add.w	r1, r7, #8
 8000fa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff91 	bl	8000ed0 <drv_spi_read_write_buffer_dma>

    // 复制接收到的数据到输出缓冲区
    memcpy(pBuf, &rx_buf[1], len);
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f007 fbf5 	bl	80087a8 <memcpy>

    RF24L01_SET_CS_HIGH();         // 取消片选
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <NRF24L01_Read_Buf_DMA+0x68>)
 8000fc4:	f002 fb03 	bl	80035ce <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3748      	adds	r7, #72	@ 0x48
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[2] = { NRF_WRITE_REG | RegAddr, Value };  // 命令+数据
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();      // 片选
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	480d      	ldr	r0, [pc, #52]	@ (800102c <NRF24L01_Write_Reg_DMA+0x58>)
 8000ff8:	f002 fae9 	bl	80035ce <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2202      	movs	r2, #2
 8001002:	4619      	mov	r1, r3
 8001004:	480a      	ldr	r0, [pc, #40]	@ (8001030 <NRF24L01_Write_Reg_DMA+0x5c>)
 8001006:	f005 fb57 	bl	80066b8 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800100a:	bf00      	nop
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <NRF24L01_Write_Reg_DMA+0x5c>)
 800100e:	f005 fe26 	bl	8006c5e <HAL_SPI_GetState>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d1f9      	bne.n	800100c <NRF24L01_Write_Reg_DMA+0x38>

    RF24L01_SET_CS_HIGH();     // 取消片选
 8001018:	2201      	movs	r2, #1
 800101a:	2102      	movs	r1, #2
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <NRF24L01_Write_Reg_DMA+0x58>)
 800101e:	f002 fad6 	bl	80035ce <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010c00 	.word	0x40010c00
 8001030:	200002ec 	.word	0x200002ec

08001034 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    uint8_t Status;

    RF24L01_SET_CS_LOW();      //片选
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4809      	ldr	r0, [pc, #36]	@ (8001064 <NRF24L01_Read_Status_Register+0x30>)
 8001040:	f002 fac5 	bl	80035ce <HAL_GPIO_WritePin>

    Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8001044:	2007      	movs	r0, #7
 8001046:	f7ff ff0b 	bl	8000e60 <drv_spi_read_write_byte>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]

    RF24L01_SET_CS_HIGH();     //取消片选
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	4804      	ldr	r0, [pc, #16]	@ (8001064 <NRF24L01_Read_Status_Register+0x30>)
 8001054:	f002 fabb 	bl	80035ce <HAL_GPIO_WritePin>

    return Status;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010c00 	.word	0x40010c00

08001068 <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001078:	71fb      	strb	r3, [r7, #7]
    status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 800107a:	f7ff ffdb 	bl	8001034 <NRF24L01_Read_Status_Register>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低CSN
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8001088:	f002 faa1 	bl	80035ce <HAL_GPIO_WritePin>
    drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 800108c:	2027      	movs	r0, #39	@ 0x27
 800108e:	f7ff fee7 	bl	8000e60 <drv_spi_read_write_byte>
    drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fee0 	bl	8000e60 <drv_spi_read_write_byte>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // 拉高CSN
 80010a0:	2201      	movs	r2, #1
 80010a2:	2102      	movs	r1, #2
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <NRF24L01_Clear_IRQ_Flag+0x50>)
 80010a6:	f002 fa92 	bl	80035ce <HAL_GPIO_WritePin>

    return NRF24L01_Read_Status_Register();                   // 返回新状态
 80010aa:	f7ff ffc3 	bl	8001034 <NRF24L01_Read_Status_Register>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010c00 	.word	0x40010c00

080010bc <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[6];  // 命令+5字节地址

    len = (len > 5) ? 5 : len;
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	bf28      	it	cs
 80010ce:	2305      	movcs	r3, #5
 80010d0:	70fb      	strb	r3, [r7, #3]
    tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80010d2:	2330      	movs	r3, #48	@ 0x30
 80010d4:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, len);
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	3301      	adds	r3, #1
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fb61 	bl	80087a8 <memcpy>

    RF24L01_SET_CS_LOW();
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	480e      	ldr	r0, [pc, #56]	@ (8001124 <NRF24L01_Set_TxAddr_DMA+0x68>)
 80010ec:	f002 fa6f 	bl	80035ce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4619      	mov	r1, r3
 80010fe:	480a      	ldr	r0, [pc, #40]	@ (8001128 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8001100:	f005 fada 	bl	80066b8 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001104:	bf00      	nop
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8001108:	f005 fda9 	bl	8006c5e <HAL_SPI_GetState>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d1f9      	bne.n	8001106 <NRF24L01_Set_TxAddr_DMA+0x4a>
    RF24L01_SET_CS_HIGH();
 8001112:	2201      	movs	r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8001118:	f002 fa59 	bl	80035ce <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010c00 	.word	0x40010c00
 8001128:	200002ec 	.word	0x200002ec

0800112c <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[6];  // 命令+5字节地址

    Len = (Len > 5) ? 5 : Len;
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	2b05      	cmp	r3, #5
 8001140:	bf28      	it	cs
 8001142:	2305      	movcs	r3, #5
 8001144:	71bb      	strb	r3, [r7, #6]
    PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b05      	cmp	r3, #5
 800114a:	bf28      	it	cs
 800114c:	2305      	movcs	r3, #5
 800114e:	71fb      	strb	r3, [r7, #7]

    tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	330a      	adds	r3, #10
 8001154:	b2db      	uxtb	r3, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	b25b      	sxtb	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, Len);
 8001162:	79ba      	ldrb	r2, [r7, #6]
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	3301      	adds	r3, #1
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f007 fb1b 	bl	80087a8 <memcpy>

    RF24L01_SET_CS_LOW();
 8001172:	2200      	movs	r2, #0
 8001174:	2102      	movs	r1, #2
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <NRF24L01_Set_RxAddr_DMA+0x84>)
 8001178:	f002 fa29 	bl	80035ce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	b29b      	uxth	r3, r3
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <NRF24L01_Set_RxAddr_DMA+0x88>)
 800118c:	f005 fa94 	bl	80066b8 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001190:	bf00      	nop
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8001194:	f005 fd63 	bl	8006c5e <HAL_SPI_GetState>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d1f9      	bne.n	8001192 <NRF24L01_Set_RxAddr_DMA+0x66>
    RF24L01_SET_CS_HIGH();
 800119e:	2201      	movs	r2, #1
 80011a0:	2102      	movs	r1, #2
 80011a2:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <NRF24L01_Set_RxAddr_DMA+0x84>)
 80011a4:	f002 fa13 	bl	80035ce <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	200002ec 	.word	0x200002ec

080011b8 <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t buf[5] = { 0xA5, 0xA5, 0xA5, 0xA5, 0xA5 };
 80011be:	4a42      	ldr	r2, [pc, #264]	@ (80012c8 <NRF24L01_check_DMA+0x110>)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	7019      	strb	r1, [r3, #0]
    uint8_t tx_buf[6], rx_buf[6];
    uint32_t start_time = HAL_GetTick();
 80011ce:	f000 fdad 	bl	8001d2c <HAL_GetTick>
 80011d2:	61b8      	str	r0, [r7, #24]

    while (1)
    {
        // 使用DMA写入地址
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80011d4:	2330      	movs	r3, #48	@ 0x30
 80011d6:	723b      	strb	r3, [r7, #8]
        memcpy(&tx_buf[1], buf, 5);
 80011d8:	f107 0309 	add.w	r3, r7, #9
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	6810      	ldr	r0, [r2, #0]
 80011e2:	6018      	str	r0, [r3, #0]
 80011e4:	7912      	ldrb	r2, [r2, #4]
 80011e6:	711a      	strb	r2, [r3, #4]

        RF24L01_SET_CS_LOW();
 80011e8:	2200      	movs	r2, #0
 80011ea:	2102      	movs	r1, #2
 80011ec:	4837      	ldr	r0, [pc, #220]	@ (80012cc <NRF24L01_check_DMA+0x114>)
 80011ee:	f002 f9ee 	bl	80035ce <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2206      	movs	r2, #6
 80011f8:	4619      	mov	r1, r3
 80011fa:	4835      	ldr	r0, [pc, #212]	@ (80012d0 <NRF24L01_check_DMA+0x118>)
 80011fc:	f005 fa5c 	bl	80066b8 <HAL_SPI_Transmit_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001200:	bf00      	nop
 8001202:	4833      	ldr	r0, [pc, #204]	@ (80012d0 <NRF24L01_check_DMA+0x118>)
 8001204:	f005 fd2b 	bl	8006c5e <HAL_SPI_GetState>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d1f9      	bne.n	8001202 <NRF24L01_check_DMA+0x4a>
        RF24L01_SET_CS_HIGH();
 800120e:	2201      	movs	r2, #1
 8001210:	2102      	movs	r1, #2
 8001212:	482e      	ldr	r0, [pc, #184]	@ (80012cc <NRF24L01_check_DMA+0x114>)
 8001214:	f002 f9db 	bl	80035ce <HAL_GPIO_WritePin>

        // 使用DMA读取地址
        tx_buf[0] = NRF_READ_REG | TX_ADDR;
 8001218:	2310      	movs	r3, #16
 800121a:	723b      	strb	r3, [r7, #8]
        memset(&tx_buf[1], 0xFF, 5);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	3301      	adds	r3, #1
 8001222:	2205      	movs	r2, #5
 8001224:	21ff      	movs	r1, #255	@ 0xff
 8001226:	4618      	mov	r0, r3
 8001228:	f007 fa8a 	bl	8008740 <memset>

        RF24L01_SET_CS_LOW();
 800122c:	2200      	movs	r2, #0
 800122e:	2102      	movs	r1, #2
 8001230:	4826      	ldr	r0, [pc, #152]	@ (80012cc <NRF24L01_check_DMA+0x114>)
 8001232:	f002 f9cc 	bl	80035ce <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 8001236:	463a      	mov	r2, r7
 8001238:	f107 0108 	add.w	r1, r7, #8
 800123c:	2306      	movs	r3, #6
 800123e:	4824      	ldr	r0, [pc, #144]	@ (80012d0 <NRF24L01_check_DMA+0x118>)
 8001240:	f005 faec 	bl	800681c <HAL_SPI_TransmitReceive_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001244:	bf00      	nop
 8001246:	4822      	ldr	r0, [pc, #136]	@ (80012d0 <NRF24L01_check_DMA+0x118>)
 8001248:	f005 fd09 	bl	8006c5e <HAL_SPI_GetState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d1f9      	bne.n	8001246 <NRF24L01_check_DMA+0x8e>
        RF24L01_SET_CS_HIGH();
 8001252:	2201      	movs	r2, #1
 8001254:	2102      	movs	r1, #2
 8001256:	481d      	ldr	r0, [pc, #116]	@ (80012cc <NRF24L01_check_DMA+0x114>)
 8001258:	f002 f9b9 	bl	80035ce <HAL_GPIO_WritePin>

        // 比较结果
        for (i = 0; i < 5; i++)
 800125c:	2300      	movs	r3, #0
 800125e:	77fb      	strb	r3, [r7, #31]
 8001260:	e00f      	b.n	8001282 <NRF24L01_check_DMA+0xca>
        {
            if (buf[i] != rx_buf[i + 1])
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	3320      	adds	r3, #32
 8001266:	443b      	add	r3, r7
 8001268:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800126c:	7ffb      	ldrb	r3, [r7, #31]
 800126e:	3301      	adds	r3, #1
 8001270:	3320      	adds	r3, #32
 8001272:	443b      	add	r3, r7
 8001274:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001278:	429a      	cmp	r2, r3
 800127a:	d106      	bne.n	800128a <NRF24L01_check_DMA+0xd2>
        for (i = 0; i < 5; i++)
 800127c:	7ffb      	ldrb	r3, [r7, #31]
 800127e:	3301      	adds	r3, #1
 8001280:	77fb      	strb	r3, [r7, #31]
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d9ec      	bls.n	8001262 <NRF24L01_check_DMA+0xaa>
 8001288:	e000      	b.n	800128c <NRF24L01_check_DMA+0xd4>
            {
                break;
 800128a:	bf00      	nop
            }
        }

        if (i == 5)
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d101      	bne.n	8001296 <NRF24L01_check_DMA+0xde>
        {
            return 1; // 检测成功
 8001292:	2301      	movs	r3, #1
 8001294:	e013      	b.n	80012be <NRF24L01_check_DMA+0x106>
        }

        // 超时处理(5秒超时)
        if (HAL_GetTick() - start_time > 5000)
 8001296:	f000 fd49 	bl	8001d2c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <NRF24L01_check_DMA+0xf4>
        {
            return 0; // 检测失败
 80012a8:	2300      	movs	r3, #0
 80012aa:	e008      	b.n	80012be <NRF24L01_check_DMA+0x106>
        }

        // 错误指示
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b0:	4808      	ldr	r0, [pc, #32]	@ (80012d4 <NRF24L01_check_DMA+0x11c>)
 80012b2:	f002 f9a4 	bl	80035fe <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80012b6:	2064      	movs	r0, #100	@ 0x64
 80012b8:	f000 fd42 	bl	8001d40 <HAL_Delay>
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 80012bc:	e78a      	b.n	80011d4 <NRF24L01_check_DMA+0x1c>
    }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	080090c8 	.word	0x080090c8
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	200002ec 	.word	0x200002ec
 80012d4:	40011000 	.word	0x40011000

080012d8 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2], rx_buf[2];

    // 使用DMA读取CONFIG寄存器
    tx_buf[0] = NRF_READ_REG | CONFIG;
 80012e2:	2300      	movs	r3, #0
 80012e4:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0xFF;
 80012e6:	23ff      	movs	r3, #255	@ 0xff
 80012e8:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 80012ea:	2200      	movs	r2, #0
 80012ec:	2102      	movs	r1, #2
 80012ee:	4824      	ldr	r0, [pc, #144]	@ (8001380 <RF24L01_Set_Mode_DMA+0xa8>)
 80012f0:	f002 f96d 	bl	80035ce <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 80012f4:	f107 0208 	add.w	r2, r7, #8
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	2302      	movs	r3, #2
 80012fe:	4821      	ldr	r0, [pc, #132]	@ (8001384 <RF24L01_Set_Mode_DMA+0xac>)
 8001300:	f005 fa8c 	bl	800681c <HAL_SPI_TransmitReceive_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001304:	bf00      	nop
 8001306:	481f      	ldr	r0, [pc, #124]	@ (8001384 <RF24L01_Set_Mode_DMA+0xac>)
 8001308:	f005 fca9 	bl	8006c5e <HAL_SPI_GetState>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d1f9      	bne.n	8001306 <RF24L01_Set_Mode_DMA+0x2e>
    RF24L01_SET_CS_HIGH();
 8001312:	2201      	movs	r2, #1
 8001314:	2102      	movs	r1, #2
 8001316:	481a      	ldr	r0, [pc, #104]	@ (8001380 <RF24L01_Set_Mode_DMA+0xa8>)
 8001318:	f002 f959 	bl	80035ce <HAL_GPIO_WritePin>

    uint8_t controlreg = rx_buf[1];
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	73fb      	strb	r3, [r7, #15]

    // 修改模式位
    if (Mode == MODE_TX)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <RF24L01_Set_Mode_DMA+0x58>
    {
        controlreg &= ~(1 << PRIM_RX);
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e006      	b.n	800133e <RF24L01_Set_Mode_DMA+0x66>
    }
    else if (Mode == MODE_RX)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d103      	bne.n	800133e <RF24L01_Set_Mode_DMA+0x66>
    {
        controlreg |= (1 << PRIM_RX);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
    }

    // 使用DMA写入CONFIG寄存器
    tx_buf[0] = NRF_WRITE_REG | CONFIG;
 800133e:	2320      	movs	r3, #32
 8001340:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = controlreg;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 8001346:	2200      	movs	r2, #0
 8001348:	2102      	movs	r1, #2
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <RF24L01_Set_Mode_DMA+0xa8>)
 800134c:	f002 f93f 	bl	80035ce <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2202      	movs	r2, #2
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	@ (8001384 <RF24L01_Set_Mode_DMA+0xac>)
 800135a:	f005 f9ad 	bl	80066b8 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800135e:	bf00      	nop
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <RF24L01_Set_Mode_DMA+0xac>)
 8001362:	f005 fc7c 	bl	8006c5e <HAL_SPI_GetState>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d1f9      	bne.n	8001360 <RF24L01_Set_Mode_DMA+0x88>
    RF24L01_SET_CS_HIGH();
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <RF24L01_Set_Mode_DMA+0xa8>)
 8001372:	f002 f92c 	bl	80035ce <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010c00 	.word	0x40010c00
 8001384:	200002ec 	.word	0x200002ec

08001388 <NRF24L01_TxPacket_DMA>:
 *         MAX_TX：达到最大重发次数
 *         TX_OK：发送完成
 *         0xFF:其他原因
 */
uint8_t NRF24L01_TxPacket_DMA(uint8_t *txbuf, uint8_t Length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
    uint8_t l_Status = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]
    uint32_t start_time = HAL_GetTick();
 8001398:	f000 fcc8 	bl	8001d2c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]
    uint8_t tx_cmd = WR_TX_PLOAD;
 800139e:	23a0      	movs	r3, #160	@ 0xa0
 80013a0:	73fb      	strb	r3, [r7, #15]

    // 清空TX FIFO
    RF24L01_SET_CS_LOW();
 80013a2:	2200      	movs	r2, #0
 80013a4:	2102      	movs	r1, #2
 80013a6:	4835      	ldr	r0, [pc, #212]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 80013a8:	f002 f911 	bl	80035ce <HAL_GPIO_WritePin>
    drv_spi_read_write_byte_dma(FLUSH_TX);
 80013ac:	20e1      	movs	r0, #225	@ 0xe1
 80013ae:	f7ff fd6d 	bl	8000e8c <drv_spi_read_write_byte_dma>
    RF24L01_SET_CS_HIGH();
 80013b2:	2201      	movs	r2, #1
 80013b4:	2102      	movs	r1, #2
 80013b6:	4831      	ldr	r0, [pc, #196]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 80013b8:	f002 f909 	bl	80035ce <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	482e      	ldr	r0, [pc, #184]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 80013c2:	f002 f904 	bl	80035ce <HAL_GPIO_WritePin>

    // 使用DMA发送数据
    RF24L01_SET_CS_LOW();
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	482c      	ldr	r0, [pc, #176]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 80013cc:	f002 f8ff 	bl	80035ce <HAL_GPIO_WritePin>

    // 先发送命令字节
    drv_spi_read_write_byte_dma(tx_cmd);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd5a 	bl	8000e8c <drv_spi_read_write_byte_dma>

    // 然后使用DMA发送数据负载
    HAL_SPI_Transmit_DMA(&hspi1, txbuf, Length);
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4827      	ldr	r0, [pc, #156]	@ (8001480 <NRF24L01_TxPacket_DMA+0xf8>)
 80013e2:	f005 f969 	bl	80066b8 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013e6:	bf00      	nop
 80013e8:	4825      	ldr	r0, [pc, #148]	@ (8001480 <NRF24L01_TxPacket_DMA+0xf8>)
 80013ea:	f005 fc38 	bl	8006c5e <HAL_SPI_GetState>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d1f9      	bne.n	80013e8 <NRF24L01_TxPacket_DMA+0x60>

    RF24L01_SET_CS_HIGH();
 80013f4:	2201      	movs	r2, #1
 80013f6:	2102      	movs	r1, #2
 80013f8:	4820      	ldr	r0, [pc, #128]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 80013fa:	f002 f8e8 	bl	80035ce <HAL_GPIO_WritePin>
    RF24L01_SET_CE_HIGH();  // 启动发送
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <NRF24L01_TxPacket_DMA+0xf4>)
 8001404:	f002 f8e3 	bl	80035ce <HAL_GPIO_WritePin>

    // 等待传输完成或超时
    while (RF24L01_GET_IRQ_STATUS() != 0)
 8001408:	e011      	b.n	800142e <NRF24L01_TxPacket_DMA+0xa6>
    {
        if (HAL_GetTick() - start_time >100)  // 500ms超时
 800140a:	f000 fc8f 	bl	8001d2c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	@ 0x64
 8001416:	d907      	bls.n	8001428 <NRF24L01_TxPacket_DMA+0xa0>
        {
            NRF24L01_Gpio_Init();
 8001418:	f000 f88e 	bl	8001538 <NRF24L01_Gpio_Init>
            RF24L01_Init_DMA();
 800141c:	f000 f8a8 	bl	8001570 <RF24L01_Init_DMA>
            RF24L01_Set_Mode_DMA(MODE_TX);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff59 	bl	80012d8 <RF24L01_Set_Mode_DMA>
            break;
 8001426:	e008      	b.n	800143a <NRF24L01_TxPacket_DMA+0xb2>
        }
        HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f000 fc89 	bl	8001d40 <HAL_Delay>
    while (RF24L01_GET_IRQ_STATUS() != 0)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <NRF24L01_TxPacket_DMA+0xfc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b10      	cmp	r3, #16
 8001438:	d0e7      	beq.n	800140a <NRF24L01_TxPacket_DMA+0x82>
    }

    // 读取并清除状态
    l_Status = NRF24L01_Read_Reg_DMA(STATUS);
 800143a:	2007      	movs	r0, #7
 800143c:	f7ff fd66 	bl	8000f0c <NRF24L01_Read_Reg_DMA>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
    NRF24L01_Write_Reg_DMA(STATUS, l_Status);
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	4619      	mov	r1, r3
 8001448:	2007      	movs	r0, #7
 800144a:	f7ff fdc3 	bl	8000fd4 <NRF24L01_Write_Reg_DMA>

    if (l_Status & MAX_TX) // 达到最大重发次数
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <NRF24L01_TxPacket_DMA+0xdc>
    {
        NRF24L01_Write_Reg_DMA(FLUSH_TX, 0xff);
 8001458:	21ff      	movs	r1, #255	@ 0xff
 800145a:	20e1      	movs	r0, #225	@ 0xe1
 800145c:	f7ff fdba 	bl	8000fd4 <NRF24L01_Write_Reg_DMA>
        return MAX_TX;
 8001460:	2310      	movs	r3, #16
 8001462:	e007      	b.n	8001474 <NRF24L01_TxPacket_DMA+0xec>
    }
    if (l_Status & TX_OK)  // 发送完成
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <NRF24L01_TxPacket_DMA+0xea>
    {
        return TX_OK;
 800146e:	2320      	movs	r3, #32
 8001470:	e000      	b.n	8001474 <NRF24L01_TxPacket_DMA+0xec>
    }

    return 0xFF;  // 其他原因发送失败
 8001472:	23ff      	movs	r3, #255	@ 0xff
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010c00 	.word	0x40010c00
 8001480:	200002ec 	.word	0x200002ec
 8001484:	40010800 	.word	0x40010800

08001488 <NRF24L01_RxPacket_DMA>:
 *         @rxbuf:接收数据存放地址
 * @note  :无
 * @retval:接收的数据个数
 */
uint8_t NRF24L01_RxPacket_DMA(uint8_t *rxbuf)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    uint8_t l_Status = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
    uint32_t start_time = HAL_GetTick();
 8001494:	f000 fc4a 	bl	8001d2c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]
    uint8_t l_RxLength = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]

    RF24L01_SET_CS_LOW();      //片选
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	4823      	ldr	r0, [pc, #140]	@ (8001530 <NRF24L01_RxPacket_DMA+0xa8>)
 80014a4:	f002 f893 	bl	80035ce <HAL_GPIO_WritePin>
    drv_spi_read_write_byte_dma( FLUSH_RX);
 80014a8:	20e2      	movs	r0, #226	@ 0xe2
 80014aa:	f7ff fcef 	bl	8000e8c <drv_spi_read_write_byte_dma>
    RF24L01_SET_CS_HIGH();
 80014ae:	2201      	movs	r2, #1
 80014b0:	2102      	movs	r1, #2
 80014b2:	481f      	ldr	r0, [pc, #124]	@ (8001530 <NRF24L01_RxPacket_DMA+0xa8>)
 80014b4:	f002 f88b 	bl	80035ce <HAL_GPIO_WritePin>

    // 等待传输完成或超时
        while (RF24L01_GET_IRQ_STATUS() != 0)
 80014b8:	e00f      	b.n	80014da <NRF24L01_RxPacket_DMA+0x52>
        {
            if (HAL_GetTick() - start_time > 300)  // 500ms超时
 80014ba:	f000 fc37 	bl	8001d2c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014c8:	d907      	bls.n	80014da <NRF24L01_RxPacket_DMA+0x52>
            {
                NRF24L01_Gpio_Init();
 80014ca:	f000 f835 	bl	8001538 <NRF24L01_Gpio_Init>
                RF24L01_Init_DMA();
 80014ce:	f000 f84f 	bl	8001570 <RF24L01_Init_DMA>
                RF24L01_Set_Mode_DMA(MODE_RX);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff ff00 	bl	80012d8 <RF24L01_Set_Mode_DMA>
                break;
 80014d8:	e005      	b.n	80014e6 <NRF24L01_RxPacket_DMA+0x5e>
        while (RF24L01_GET_IRQ_STATUS() != 0)
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <NRF24L01_RxPacket_DMA+0xac>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d0e9      	beq.n	80014ba <NRF24L01_RxPacket_DMA+0x32>
            }
        }

    l_Status = NRF24L01_Read_Reg_DMA( STATUS);     //读状态寄存器
 80014e6:	2007      	movs	r0, #7
 80014e8:	f7ff fd10 	bl	8000f0c <NRF24L01_Read_Reg_DMA>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
    NRF24L01_Write_Reg_DMA( STATUS, l_Status);      //清中断标志
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	4619      	mov	r1, r3
 80014f4:	2007      	movs	r0, #7
 80014f6:	f7ff fd6d 	bl	8000fd4 <NRF24L01_Write_Reg_DMA>
    if (l_Status & RX_OK)   //接收到数据
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d010      	beq.n	8001526 <NRF24L01_RxPacket_DMA+0x9e>
    {
        l_RxLength = NRF24L01_Read_Reg_DMA( R_RX_PL_WID);      //读取接收到的数据个数
 8001504:	2060      	movs	r0, #96	@ 0x60
 8001506:	f7ff fd01 	bl	8000f0c <NRF24L01_Read_Reg_DMA>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
        NRF24L01_Read_Buf_DMA( RD_RX_PLOAD, rxbuf, l_RxLength);  //接收到数据
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	461a      	mov	r2, r3
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2061      	movs	r0, #97	@ 0x61
 8001516:	f7ff fd27 	bl	8000f68 <NRF24L01_Read_Buf_DMA>
        NRF24L01_Write_Reg_DMA( FLUSH_RX, 0xff);                //清除RX FIFO
 800151a:	21ff      	movs	r1, #255	@ 0xff
 800151c:	20e2      	movs	r0, #226	@ 0xe2
 800151e:	f7ff fd59 	bl	8000fd4 <NRF24L01_Write_Reg_DMA>
        return l_RxLength;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	e000      	b.n	8001528 <NRF24L01_RxPacket_DMA+0xa0>
    }

    return 0;               //没有收到数据
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010800 	.word	0x40010800

08001538 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	4809      	ldr	r0, [pc, #36]	@ (8001568 <NRF24L01_Gpio_Init+0x30>)
 8001542:	f002 f844 	bl	80035ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2110      	movs	r1, #16
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <NRF24L01_Gpio_Init+0x34>)
 800154c:	f002 f83f 	bl	80035ce <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();      //??24L01
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <NRF24L01_Gpio_Init+0x30>)
 8001556:	f002 f83a 	bl	80035ce <HAL_GPIO_WritePin>
    RF24L01_SET_CS_HIGH();     //??SPI??
 800155a:	2201      	movs	r2, #1
 800155c:	2102      	movs	r1, #2
 800155e:	4802      	ldr	r0, [pc, #8]	@ (8001568 <NRF24L01_Gpio_Init+0x30>)
 8001560:	f002 f835 	bl	80035ce <HAL_GPIO_WritePin>

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010c00 	.word	0x40010c00
 800156c:	40010800 	.word	0x40010800

08001570 <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
    uint8_t addr[5] = { INIT_ADDR };
 8001576:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <RF24L01_Init_DMA+0xbc>)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157e:	6018      	str	r0, [r3, #0]
 8001580:	3304      	adds	r3, #4
 8001582:	7019      	strb	r1, [r3, #0]

    // 初始化状态
    RF24L01_SET_CE_HIGH();
 8001584:	2201      	movs	r2, #1
 8001586:	2101      	movs	r1, #1
 8001588:	4829      	ldr	r0, [pc, #164]	@ (8001630 <RF24L01_Init_DMA+0xc0>)
 800158a:	f002 f820 	bl	80035ce <HAL_GPIO_WritePin>
    NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 800158e:	2070      	movs	r0, #112	@ 0x70
 8001590:	f7ff fd6a 	bl	8001068 <NRF24L01_Clear_IRQ_Flag>
                    AW_5BYTES },
            { SETUP_RETR, ARD_4000US | (REPEAT_CNT & 0x0F) }, { RF_CH, 60 }, {
                    RF_SETUP, 0x26 } };

    // 使用DMA批量写入寄存器配置
    for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e036      	b.n	8001608 <RF24L01_Init_DMA+0x98>
    {
        uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 800159a:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <RF24L01_Init_DMA+0xc4>)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	703b      	strb	r3, [r7, #0]
                init_config[i].val };
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <RF24L01_Init_DMA+0xc4>)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	785b      	ldrb	r3, [r3, #1]
        uint8_t tx_buf[2] = { NRF_WRITE_REG | init_config[i].reg,
 80015b4:	707b      	strb	r3, [r7, #1]

        RF24L01_SET_CS_LOW();
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	481d      	ldr	r0, [pc, #116]	@ (8001630 <RF24L01_Init_DMA+0xc0>)
 80015bc:	f002 f807 	bl	80035ce <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80015c0:	463b      	mov	r3, r7
 80015c2:	2202      	movs	r2, #2
 80015c4:	4619      	mov	r1, r3
 80015c6:	481c      	ldr	r0, [pc, #112]	@ (8001638 <RF24L01_Init_DMA+0xc8>)
 80015c8:	f005 f876 	bl	80066b8 <HAL_SPI_Transmit_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80015cc:	bf00      	nop
 80015ce:	481a      	ldr	r0, [pc, #104]	@ (8001638 <RF24L01_Init_DMA+0xc8>)
 80015d0:	f005 fb45 	bl	8006c5e <HAL_SPI_GetState>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d1f9      	bne.n	80015ce <RF24L01_Init_DMA+0x5e>
        RF24L01_SET_CS_HIGH();
 80015da:	2201      	movs	r2, #1
 80015dc:	2102      	movs	r1, #2
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <RF24L01_Init_DMA+0xc0>)
 80015e0:	f001 fff5 	bl	80035ce <HAL_GPIO_WritePin>

        // 添加必要的延时(某些寄存器写入后需要稳定时间)
        if (init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP)
 80015e4:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <RF24L01_Init_DMA+0xc4>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <RF24L01_Init_DMA+0x8c>
 80015f0:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <RF24L01_Init_DMA+0xc4>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d102      	bne.n	8001602 <RF24L01_Init_DMA+0x92>
        {
            HAL_Delay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 fb9f 	bl	8001d40 <HAL_Delay>
    for (int i = 0; i < sizeof(init_config) / sizeof(init_config[0]); i++)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d9c5      	bls.n	800159a <RF24L01_Init_DMA+0x2a>
        }
    }

    // 设置地址(使用DMA版本)
    NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2105      	movs	r1, #5
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd52 	bl	80010bc <NRF24L01_Set_TxAddr_DMA>
    NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2205      	movs	r2, #5
 800161c:	4619      	mov	r1, r3
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fd84 	bl	800112c <NRF24L01_Set_RxAddr_DMA>

    // 可选的速度和功率设置
    // NRF24L01_Set_Speed_DMA(SPEED_1M);
    // NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	080090d0 	.word	0x080090d0
 8001630:	40010c00 	.word	0x40010c00
 8001634:	080090d8 	.word	0x080090d8
 8001638:	200002ec 	.word	0x200002ec

0800163c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001642:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <MX_SPI1_Init+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001648:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800164c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_SPI1_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001670:	2218      	movs	r2, #24
 8001672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_SPI1_Init+0x64>)
 8001688:	220a      	movs	r2, #10
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_SPI1_Init+0x64>)
 800168e:	f004 fde5 	bl	800625c <HAL_SPI_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001698:	f7ff fbdb 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002ec 	.word	0x200002ec
 80016a4:	40013000 	.word	0x40013000

080016a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a47      	ldr	r2, [pc, #284]	@ (80017e0 <HAL_SPI_MspInit+0x138>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	f040 8086 	bne.w	80017d6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ca:	4b46      	ldr	r3, [pc, #280]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b43      	ldr	r3, [pc, #268]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b40      	ldr	r3, [pc, #256]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a3f      	ldr	r2, [pc, #252]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <HAL_SPI_MspInit+0x13c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016fa:	23a0      	movs	r3, #160	@ 0xa0
 80016fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	4836      	ldr	r0, [pc, #216]	@ (80017e8 <HAL_SPI_MspInit+0x140>)
 800170e:	f001 fdc3 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001712:	2340      	movs	r3, #64	@ 0x40
 8001714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	4830      	ldr	r0, [pc, #192]	@ (80017e8 <HAL_SPI_MspInit+0x140>)
 8001726:	f001 fdb7 	bl	8003298 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 800172c:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_SPI_MspInit+0x148>)
 800172e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001736:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001748:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800174e:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001756:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800175a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800175c:	4823      	ldr	r0, [pc, #140]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 800175e:	f001 f96f 	bl	8002a40 <HAL_DMA_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001768:	f7ff fb73 	bl	8000e52 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001770:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001772:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <HAL_SPI_MspInit+0x144>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 800177a:	4a1f      	ldr	r2, [pc, #124]	@ (80017f8 <HAL_SPI_MspInit+0x150>)
 800177c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 8001780:	2210      	movs	r2, #16
 8001782:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 800178c:	2280      	movs	r2, #128	@ 0x80
 800178e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 80017a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017aa:	4812      	ldr	r0, [pc, #72]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 80017ac:	f001 f948 	bl	8002a40 <HAL_DMA_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80017b6:	f7ff fb4c 	bl	8000e52 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 80017be:	649a      	str	r2, [r3, #72]	@ 0x48
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <HAL_SPI_MspInit+0x14c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2023      	movs	r0, #35	@ 0x23
 80017cc:	f001 f8f5 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d0:	2023      	movs	r0, #35	@ 0x23
 80017d2:	f001 f90e 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40013000 	.word	0x40013000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	20000344 	.word	0x20000344
 80017f0:	4002001c 	.word	0x4002001c
 80017f4:	20000388 	.word	0x20000388
 80017f8:	40020030 	.word	0x40020030

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_MspInit+0x7c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a1c      	ldr	r2, [pc, #112]	@ (8001878 <HAL_MspInit+0x7c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <HAL_MspInit+0x7c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <HAL_MspInit+0x7c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a16      	ldr	r2, [pc, #88]	@ (8001878 <HAL_MspInit+0x7c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_MspInit+0x7c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2004      	movs	r0, #4
 8001838:	f001 f8bf 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800183c:	2004      	movs	r0, #4
 800183e:	f001 f8d8 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2005      	movs	r0, #5
 8001848:	f001 f8b7 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800184c:	2005      	movs	r0, #5
 800184e:	f001 f8d0 	bl	80029f2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_MspInit+0x80>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_MspInit+0x80>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 fa1a 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80018dc:	f001 fb5e 	bl	8002f9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Channel1_IRQHandler+0x10>)
 80018f6:	f001 fa11 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000c4 	.word	0x200000c4

08001904 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA1_Channel2_IRQHandler+0x10>)
 800190a:	f001 fa07 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000344 	.word	0x20000344

08001918 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA1_Channel3_IRQHandler+0x10>)
 800191e:	f001 f9fd 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000388 	.word	0x20000388

0800192c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <DMA1_Channel6_IRQHandler+0x10>)
 8001932:	f001 f9f3 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001a0 	.word	0x200001a0

08001940 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <DMA1_Channel7_IRQHandler+0x10>)
 8001946:	f001 f9e9 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000015c 	.word	0x2000015c

08001954 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <ADC1_2_IRQHandler+0x10>)
 800195a:	f000 fbcb 	bl	80020f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000094 	.word	0x20000094

08001968 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM1_UP_IRQHandler+0x10>)
 800196e:	f005 fc7b 	bl	8007268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200003d0 	.word	0x200003d0

0800197c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <I2C1_EV_IRQHandler+0x10>)
 8001982:	f002 f8d1 	bl	8003b28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000108 	.word	0x20000108

08001990 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <I2C1_ER_IRQHandler+0x10>)
 8001996:	f002 fa38 	bl	8003e0a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000108 	.word	0x20000108

080019a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <SPI1_IRQHandler+0x10>)
 80019aa:	f005 f833 	bl	8006a14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002ec 	.word	0x200002ec

080019b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <USART1_IRQHandler+0x10>)
 80019be:	f005 fff3 	bl	80079a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000418 	.word	0x20000418

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f006 fea8 	bl	8008750 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20005000 	.word	0x20005000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	200003cc 	.word	0x200003cc
 8001a34:	200005d8 	.word	0x200005d8

08001a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a62:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <MX_TIM1_Init+0xa0>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a68:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001a6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a88:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8e:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a90:	f005 fb49 	bl	8007126 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a9a:	f7ff f9da 	bl	8000e52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001aac:	f005 fccc 	bl	8007448 <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ab6:	f7ff f9cc 	bl	8000e52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <MX_TIM1_Init+0x9c>)
 8001ac8:	f005 feae 	bl	8007828 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ad2:	f7ff f9be 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003d0 	.word	0x200003d0
 8001ae4:	40012c00 	.word	0x40012c00

08001ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <HAL_TIM_Base_MspInit+0x44>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d113      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a0c      	ldr	r2, [pc, #48]	@ (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2019      	movs	r0, #25
 8001b18:	f000 ff4f 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b1c:	2019      	movs	r0, #25
 8001b1e:	f000 ff68 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40021000 	.word	0x40021000

08001b34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_USART1_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	f005 fecc 	bl	8007908 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f7ff f96c 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000418 	.word	0x20000418
 8001b84:	40013800 	.word	0x40013800

08001b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <HAL_UART_MspInit+0x9c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d139      	bne.n	8001c1c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <HAL_UART_MspInit+0xa0>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	4619      	mov	r1, r3
 8001bec:	480f      	ldr	r0, [pc, #60]	@ (8001c2c <HAL_UART_MspInit+0xa4>)
 8001bee:	f001 fb53 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <HAL_UART_MspInit+0xa4>)
 8001c08:	f001 fb46 	bl	8003298 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2025      	movs	r0, #37	@ 0x25
 8001c12:	f000 fed2 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c16:	2025      	movs	r0, #37	@ 0x25
 8001c18:	f000 feeb 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010800 	.word	0x40010800

08001c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff ff02 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c36:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c38:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c4c:	4c09      	ldr	r4, [pc, #36]	@ (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f006 fd7f 	bl	800875c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5e:	f7fe ff79 	bl	8000b54 <main>
  bx lr
 8001c62:	4770      	bx	lr
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c6c:	08009978 	.word	0x08009978
  ldr r2, =_sbss
 8001c70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c74:	200005d4 	.word	0x200005d4

08001c78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <CAN1_RX1_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x28>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x28>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 fe89 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fdb0 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fea1 	bl	8002a0e <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 fe69 	bl	80029ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x1c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000460 	.word	0x20000460

08001d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <HAL_GetTick+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000460 	.word	0x20000460

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffe0 	bl	8001d2c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0be      	b.n	8001f28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fa50 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fbbd 	bl	800254c <ADC_ConversionStop_Disable>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8099 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8095 	bne.w	8001f16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	f043 0202 	orr.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b1b      	ldrb	r3, [r3, #12]
 8001e0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_Init+0xa2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_Init+0xa8>
 8001e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0xaa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7d1b      	ldrb	r3, [r3, #20]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d119      	bne.n	8001e74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	035a      	lsls	r2, r3, #13
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e00b      	b.n	8001e74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_ADC_Init+0x1a8>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_Init+0x126>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d104      	bne.n	8001eb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <HAL_ADC_Init+0x1ac>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef2:	e018      	b.n	8001f26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f023 0312 	bic.w	r3, r3, #18
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	ffe1f7fd 	.word	0xffe1f7fd
 8001f34:	ff1f0efe 	.word	0xff1f0efe

08001f38 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a64      	ldr	r2, [pc, #400]	@ (80020e0 <HAL_ADC_Start_DMA+0x1a8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_Start_DMA+0x24>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a63      	ldr	r2, [pc, #396]	@ (80020e4 <HAL_ADC_Start_DMA+0x1ac>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d106      	bne.n	8001f6a <HAL_ADC_Start_DMA+0x32>
 8001f5c:	4b60      	ldr	r3, [pc, #384]	@ (80020e0 <HAL_ADC_Start_DMA+0x1a8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 80b3 	bne.w	80020d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_Start_DMA+0x40>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0ae      	b.n	80020d6 <HAL_ADC_Start_DMA+0x19e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fa89 	bl	8002498 <ADC_Enable>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 809a 	bne.w	80020c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4e      	ldr	r2, [pc, #312]	@ (80020e4 <HAL_ADC_Start_DMA+0x1ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_Start_DMA+0x84>
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <HAL_ADC_Start_DMA+0x1a8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d026      	beq.n	8002024 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fe6:	e01d      	b.n	8002024 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a39      	ldr	r2, [pc, #228]	@ (80020e0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_Start_DMA+0xd0>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a38      	ldr	r2, [pc, #224]	@ (80020e4 <HAL_ADC_Start_DMA+0x1ac>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d10d      	bne.n	8002024 <HAL_ADC_Start_DMA+0xec>
 8002008:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_ADC_Start_DMA+0x1a8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800201c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f023 0206 	bic.w	r2, r3, #6
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800203c:	e002      	b.n	8002044 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a25      	ldr	r2, [pc, #148]	@ (80020e8 <HAL_ADC_Start_DMA+0x1b0>)
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <HAL_ADC_Start_DMA+0x1b4>)
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a23      	ldr	r2, [pc, #140]	@ (80020f0 <HAL_ADC_Start_DMA+0x1b8>)
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0202 	mvn.w	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800207c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a18      	ldr	r0, [r3, #32]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	334c      	adds	r3, #76	@ 0x4c
 8002088:	4619      	mov	r1, r3
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f000 fd31 	bl	8002af4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800209c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020a0:	d108      	bne.n	80020b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020b2:	e00f      	b.n	80020d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020c4:	e006      	b.n	80020d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80020ce:	e001      	b.n	80020d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40012400 	.word	0x40012400
 80020e4:	40012800 	.word	0x40012800
 80020e8:	080025cf 	.word	0x080025cf
 80020ec:	0800264b 	.word	0x0800264b
 80020f0:	08002667 	.word	0x08002667

080020f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03e      	beq.n	8002194 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d039      	beq.n	8002194 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002142:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002146:	d11d      	bne.n	8002184 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800214c:	2b00      	cmp	r3, #0
 800214e:	d119      	bne.n	8002184 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0220 	bic.w	r2, r2, #32
 800215e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f874 	bl	8002272 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0212 	mvn.w	r2, #18
 8002192:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d04d      	beq.n	800223a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d048      	beq.n	800223a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80021ca:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80021ce:	d012      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d125      	bne.n	800222a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021e8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ec:	d11d      	bne.n	800222a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002204:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fae4 	bl	80027f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 020c 	mvn.w	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f812 	bl	8002284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0201 	mvn.w	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x20>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0dc      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1da>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d81c      	bhi.n	8002312 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b05      	subs	r3, #5
 80022ea:	221f      	movs	r2, #31
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4019      	ands	r1, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b05      	subs	r3, #5
 8002304:	fa00 f203 	lsl.w	r2, r0, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002310:	e03c      	b.n	800238c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d81c      	bhi.n	8002354 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	@ 0x23
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	4019      	ands	r1, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b23      	subs	r3, #35	@ 0x23
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
 8002352:	e01b      	b.n	800238c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b41      	subs	r3, #65	@ 0x41
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	4019      	ands	r1, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b41      	subs	r3, #65	@ 0x41
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d91c      	bls.n	80023ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68d9      	ldr	r1, [r3, #12]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6898      	ldr	r0, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3b1e      	subs	r3, #30
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	e019      	b.n	8002402 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6919      	ldr	r1, [r3, #16]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6898      	ldr	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d003      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800240e:	2b11      	cmp	r3, #17
 8002410:	d132      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1d      	ldr	r2, [pc, #116]	@ (800248c <HAL_ADC_ConfigChannel+0x1e4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d125      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d126      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002438:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d11a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_ADC_ConfigChannel+0x1e8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_ADC_ConfigChannel+0x1ec>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9a      	lsrs	r2, r3, #18
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x1b2>
 8002466:	e007      	b.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012400 	.word	0x40012400
 8002490:	20000000 	.word	0x20000000
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d040      	beq.n	8002538 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <ADC_Enable+0xac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <ADC_Enable+0xb0>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024d4:	e002      	b.n	80024dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024e2:	f7ff fc23 	bl	8001d2c <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024e8:	e01f      	b.n	800252a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ea:	f7ff fc1f 	bl	8001d2c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d918      	bls.n	800252a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d011      	beq.n	800252a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d1d8      	bne.n	80024ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000
 8002548:	431bde83 	.word	0x431bde83

0800254c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12e      	bne.n	80025c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002576:	f7ff fbd9 	bl	8001d2c <HAL_GetTick>
 800257a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257c:	e01b      	b.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800257e:	f7ff fbd5 	bl	8001d2c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d914      	bls.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10d      	bne.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d0dc      	beq.n	800257e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d127      	bne.n	8002638 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002602:	d115      	bne.n	8002630 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fe1e 	bl	8002272 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002636:	e004      	b.n	8002642 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7fe f983 	bl	8000964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fe02 	bl	8002296 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADCEx_Calibration_Start+0x1e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e097      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0x14e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff42 	bl	800254c <ADC_ConversionStop_Disable>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fee3 	bl	8002498 <ADC_Enable>
 80026d2:	4603      	mov	r3, r0
 80026d4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 8081 	bne.w	80027e0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026e6:	f023 0302 	bic.w	r3, r3, #2
 80026ea:	f043 0202 	orr.w	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026f2:	4b40      	ldr	r3, [pc, #256]	@ (80027f4 <HAL_ADCEx_Calibration_Start+0x158>)
 80026f4:	681c      	ldr	r4, [r3, #0]
 80026f6:	2002      	movs	r0, #2
 80026f8:	f003 fcfa 	bl	80060f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026fc:	4603      	mov	r3, r0
 80026fe:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002702:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002704:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002706:	e002      	b.n	800270e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3b01      	subs	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002724:	f7ff fb02 	bl	8001d2c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800272a:	e01b      	b.n	8002764 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800272c:	f7ff fafe 	bl	8001d2c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b0a      	cmp	r3, #10
 8002738:	d914      	bls.n	8002764 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	f023 0312 	bic.w	r3, r3, #18
 8002750:	f043 0210 	orr.w	r2, r3, #16
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e042      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1dc      	bne.n	800272c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0204 	orr.w	r2, r2, #4
 8002780:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002782:	f7ff fad3 	bl	8001d2c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002788:	e01b      	b.n	80027c2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800278a:	f7ff facf 	bl	8001d2c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d914      	bls.n	80027c2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	f023 0312 	bic.w	r3, r3, #18
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e013      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1dc      	bne.n	800278a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	@ (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f7ff ff90 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff2d 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff42 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff90 	bl	80028fc <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5f 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff35 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a2a:	f000 f802 	bl	8002a32 <HAL_SYSTICK_Callback>
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e043      	b.n	8002ade <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_DMA_Init+0xa8>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_DMA_Init+0xac>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	009a      	lsls	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_DMA_Init+0xb0>)
 8002a72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	bffdfff8 	.word	0xbffdfff8
 8002aec:	cccccccd 	.word	0xcccccccd
 8002af0:	40020000 	.word	0x40020000

08002af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e04b      	b.n	8002bac <HAL_DMA_Start_IT+0xb8>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13a      	bne.n	8002b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f9f8 	bl	8002f42 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e005      	b.n	8002baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e020      	b.n	8002c20 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 020e 	bic.w	r2, r2, #14
 8002bec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d005      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2204      	movs	r2, #4
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e051      	b.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020e 	bic.w	r2, r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a22      	ldr	r2, [pc, #136]	@ (8002d00 <HAL_DMA_Abort_IT+0xd4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_Abort_IT+0xa2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_DMA_Abort_IT+0xd8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Abort_IT+0x9e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <HAL_DMA_Abort_IT+0xdc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x98>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	@ (8002d0c <HAL_DMA_Abort_IT+0xe0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x92>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <HAL_DMA_Abort_IT+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x8c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <HAL_DMA_Abort_IT+0xe8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <HAL_DMA_Abort_IT+0x86>
 8002cac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cb0:	e00e      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb6:	e00b      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cbc:	e008      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc8:	e002      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cca:	2310      	movs	r3, #16
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_Abort_IT+0xa4>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <HAL_DMA_Abort_IT+0xec>)
 8002cd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
    } 
  }
  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020008 	.word	0x40020008
 8002d04:	4002001c 	.word	0x4002001c
 8002d08:	40020030 	.word	0x40020030
 8002d0c:	40020044 	.word	0x40020044
 8002d10:	40020058 	.word	0x40020058
 8002d14:	4002006c 	.word	0x4002006c
 8002d18:	40020000 	.word	0x40020000

08002d1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d04f      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xc8>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a66      	ldr	r2, [pc, #408]	@ (8002f0c <HAL_DMA_IRQHandler+0x1f0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d029      	beq.n	8002dca <HAL_DMA_IRQHandler+0xae>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_DMA_IRQHandler+0x1f4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xaa>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a63      	ldr	r2, [pc, #396]	@ (8002f14 <HAL_DMA_IRQHandler+0x1f8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01a      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xa4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a62      	ldr	r2, [pc, #392]	@ (8002f18 <HAL_DMA_IRQHandler+0x1fc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d012      	beq.n	8002dba <HAL_DMA_IRQHandler+0x9e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a60      	ldr	r2, [pc, #384]	@ (8002f1c <HAL_DMA_IRQHandler+0x200>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00a      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x98>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f20 <HAL_DMA_IRQHandler+0x204>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d102      	bne.n	8002dae <HAL_DMA_IRQHandler+0x92>
 8002da8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002db2:	e00b      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002db4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002db8:	e008      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dbe:	e005      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc4:	e002      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dc6:	2340      	movs	r3, #64	@ 0x40
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	4a55      	ldr	r2, [pc, #340]	@ (8002f24 <HAL_DMA_IRQHandler+0x208>)
 8002dce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8094 	beq.w	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002de2:	e08e      	b.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2202      	movs	r2, #2
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d056      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x186>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d051      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020a 	bic.w	r2, r2, #10
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a38      	ldr	r2, [pc, #224]	@ (8002f0c <HAL_DMA_IRQHandler+0x1f0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d029      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x166>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a37      	ldr	r2, [pc, #220]	@ (8002f10 <HAL_DMA_IRQHandler+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x162>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <HAL_DMA_IRQHandler+0x1f8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x15c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a34      	ldr	r2, [pc, #208]	@ (8002f18 <HAL_DMA_IRQHandler+0x1fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d012      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x156>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a32      	ldr	r2, [pc, #200]	@ (8002f1c <HAL_DMA_IRQHandler+0x200>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x150>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a31      	ldr	r2, [pc, #196]	@ (8002f20 <HAL_DMA_IRQHandler+0x204>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x14a>
 8002e60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e64:	e00e      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e6a:	e00b      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e70:	e008      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e76:	e005      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e7c:	e002      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e000      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e82:	2302      	movs	r3, #2
 8002e84:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <HAL_DMA_IRQHandler+0x208>)
 8002e86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d034      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ea0:	e02f      	b.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 020e 	bic.w	r2, r2, #14
 8002eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    }
  }
  return;
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
}
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40020008 	.word	0x40020008
 8002f10:	4002001c 	.word	0x4002001c
 8002f14:	40020030 	.word	0x40020030
 8002f18:	40020044 	.word	0x40020044
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	4002006c 	.word	0x4002006c
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d108      	bne.n	8002f82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f80:	e007      	b.n	8002f92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_FLASH_IRQHandler+0x22>
 8002fb2:	4b68      	ldr	r3, [pc, #416]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002fbe:	4b66      	ldr	r3, [pc, #408]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002fcc:	f000 f8f4 	bl	80031b8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8cc 	bl	800316e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002fd6:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a0 	beq.w	800312a <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002fea:	4b5a      	ldr	r3, [pc, #360]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8002fec:	2220      	movs	r2, #32
 8002fee:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002ff0:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8097 	beq.w	800312a <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002ffc:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12d      	bne.n	8003062 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8003006:	4b54      	ldr	r3, [pc, #336]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800300e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8003010:	4b51      	ldr	r3, [pc, #324]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8003018:	4b4f      	ldr	r3, [pc, #316]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f89c 	bl	800315c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8003024:	4b4c      	ldr	r3, [pc, #304]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800302c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800302e:	4a4a      	ldr	r2, [pc, #296]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003034:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4a46      	ldr	r2, [pc, #280]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f909 	bl	8003258 <FLASH_PageErase>
 8003046:	e070      	b.n	800312a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	4a42      	ldr	r2, [pc, #264]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003054:	4b40      	ldr	r3, [pc, #256]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f87e 	bl	800315c <HAL_FLASH_EndOfOperationCallback>
 8003060:	e063      	b.n	800312a <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003062:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d10c      	bne.n	8003086 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800306c:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a38      	ldr	r2, [pc, #224]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8003078:	2000      	movs	r0, #0
 800307a:	f000 f86f 	bl	800315c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800307e:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e051      	b.n	800312a <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800308e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8003090:	4b31      	ldr	r3, [pc, #196]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d024      	beq.n	80030e2 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8003098:	4b2f      	ldr	r3, [pc, #188]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	3302      	adds	r3, #2
 800309e:	4a2e      	ldr	r2, [pc, #184]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030a0:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	0c02      	lsrs	r2, r0, #16
 80030b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030bc:	0c0b      	lsrs	r3, r1, #16
 80030be:	4926      	ldr	r1, [pc, #152]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80030c4:	4b23      	ldr	r3, [pc, #140]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4a22      	ldr	r2, [pc, #136]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80030d0:	4b21      	ldr	r3, [pc, #132]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030d6:	b293      	uxth	r3, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f850 	bl	8003180 <FLASH_Program_HalfWord>
 80030e0:	e023      	b.n	800312a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d105      	bne.n	80030f8 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80030ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f833 	bl	800315c <HAL_FLASH_EndOfOperationCallback>
 80030f6:	e011      	b.n	800311c <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80030f8:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d106      	bne.n	8003110 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	3b02      	subs	r3, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f827 	bl	800315c <HAL_FLASH_EndOfOperationCallback>
 800310e:	e005      	b.n	800311c <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	3b06      	subs	r3, #6
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f820 	bl	800315c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800311c:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800311e:	f04f 32ff 	mov.w	r2, #4294967295
 8003122:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_FLASH_IRQHandler+0x1bc>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4a06      	ldr	r2, [pc, #24]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 800313a:	f023 0307 	bic.w	r3, r3, #7
 800313e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003140:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	4a03      	ldr	r2, [pc, #12]	@ (8003154 <HAL_FLASH_IRQHandler+0x1b8>)
 8003146:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800314a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40022000 	.word	0x40022000
 8003158:	20000468 	.word	0x20000468

0800315c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800318c:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <FLASH_Program_HalfWord+0x30>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <FLASH_Program_HalfWord+0x34>)
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	4a07      	ldr	r2, [pc, #28]	@ (80031b4 <FLASH_Program_HalfWord+0x34>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	887a      	ldrh	r2, [r7, #2]
 80031a2:	801a      	strh	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000468 	.word	0x20000468
 80031b4:	40022000 	.word	0x40022000

080031b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80031c2:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031ce:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 80031d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031ee:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 80031f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800320e:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <FLASH_SetErrorCode+0x9c>)
 8003218:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f240 1201 	movw	r2, #257	@ 0x101
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <FLASH_SetErrorCode+0x86>
 8003230:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4a06      	ldr	r2, [pc, #24]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	61d3      	str	r3, [r2, #28]
}  
 800323c:	e002      	b.n	8003244 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800323e:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <FLASH_SetErrorCode+0x98>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60d3      	str	r3, [r2, #12]
}  
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40022000 	.word	0x40022000
 8003254:	20000468 	.word	0x20000468

08003258 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <FLASH_PageErase+0x38>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003266:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <FLASH_PageErase+0x3c>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	4a0a      	ldr	r2, [pc, #40]	@ (8003294 <FLASH_PageErase+0x3c>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003272:	4a08      	ldr	r2, [pc, #32]	@ (8003294 <FLASH_PageErase+0x3c>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <FLASH_PageErase+0x3c>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4a05      	ldr	r2, [pc, #20]	@ (8003294 <FLASH_PageErase+0x3c>)
 800327e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003282:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000468 	.word	0x20000468
 8003294:	40022000 	.word	0x40022000

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b08b      	sub	sp, #44	@ 0x2c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032aa:	e169      	b.n	8003580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032ac:	2201      	movs	r2, #1
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f040 8158 	bne.w	800357a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a9a      	ldr	r2, [pc, #616]	@ (8003538 <HAL_GPIO_Init+0x2a0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d05e      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032d4:	4a98      	ldr	r2, [pc, #608]	@ (8003538 <HAL_GPIO_Init+0x2a0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d875      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032da:	4a98      	ldr	r2, [pc, #608]	@ (800353c <HAL_GPIO_Init+0x2a4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d058      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032e0:	4a96      	ldr	r2, [pc, #600]	@ (800353c <HAL_GPIO_Init+0x2a4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d86f      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032e6:	4a96      	ldr	r2, [pc, #600]	@ (8003540 <HAL_GPIO_Init+0x2a8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d052      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032ec:	4a94      	ldr	r2, [pc, #592]	@ (8003540 <HAL_GPIO_Init+0x2a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d869      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032f2:	4a94      	ldr	r2, [pc, #592]	@ (8003544 <HAL_GPIO_Init+0x2ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04c      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032f8:	4a92      	ldr	r2, [pc, #584]	@ (8003544 <HAL_GPIO_Init+0x2ac>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d863      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032fe:	4a92      	ldr	r2, [pc, #584]	@ (8003548 <HAL_GPIO_Init+0x2b0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d046      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 8003304:	4a90      	ldr	r2, [pc, #576]	@ (8003548 <HAL_GPIO_Init+0x2b0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d85d      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 800330a:	2b12      	cmp	r3, #18
 800330c:	d82a      	bhi.n	8003364 <HAL_GPIO_Init+0xcc>
 800330e:	2b12      	cmp	r3, #18
 8003310:	d859      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <HAL_GPIO_Init+0x80>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003393 	.word	0x08003393
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800337f 	.word	0x0800337f
 8003324:	080033c1 	.word	0x080033c1
 8003328:	080033c7 	.word	0x080033c7
 800332c:	080033c7 	.word	0x080033c7
 8003330:	080033c7 	.word	0x080033c7
 8003334:	080033c7 	.word	0x080033c7
 8003338:	080033c7 	.word	0x080033c7
 800333c:	080033c7 	.word	0x080033c7
 8003340:	080033c7 	.word	0x080033c7
 8003344:	080033c7 	.word	0x080033c7
 8003348:	080033c7 	.word	0x080033c7
 800334c:	080033c7 	.word	0x080033c7
 8003350:	080033c7 	.word	0x080033c7
 8003354:	080033c7 	.word	0x080033c7
 8003358:	080033c7 	.word	0x080033c7
 800335c:	08003375 	.word	0x08003375
 8003360:	08003389 	.word	0x08003389
 8003364:	4a79      	ldr	r2, [pc, #484]	@ (800354c <HAL_GPIO_Init+0x2b4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800336a:	e02c      	b.n	80033c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	623b      	str	r3, [r7, #32]
          break;
 8003372:	e029      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	3304      	adds	r3, #4
 800337a:	623b      	str	r3, [r7, #32]
          break;
 800337c:	e024      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	3308      	adds	r3, #8
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e01f      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	330c      	adds	r3, #12
 800338e:	623b      	str	r3, [r7, #32]
          break;
 8003390:	e01a      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800339a:	2304      	movs	r3, #4
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e013      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033a8:	2308      	movs	r3, #8
 80033aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	611a      	str	r2, [r3, #16]
          break;
 80033b2:	e009      	b.n	80033c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b4:	2308      	movs	r3, #8
 80033b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	615a      	str	r2, [r3, #20]
          break;
 80033be:	e003      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
          break;
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          break;
 80033c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2bff      	cmp	r3, #255	@ 0xff
 80033cc:	d801      	bhi.n	80033d2 <HAL_GPIO_Init+0x13a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	e001      	b.n	80033d6 <HAL_GPIO_Init+0x13e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2bff      	cmp	r3, #255	@ 0xff
 80033dc:	d802      	bhi.n	80033e4 <HAL_GPIO_Init+0x14c>
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	e002      	b.n	80033ea <HAL_GPIO_Init+0x152>
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	3b08      	subs	r3, #8
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	210f      	movs	r1, #15
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80b1 	beq.w	800357a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003418:	4b4d      	ldr	r3, [pc, #308]	@ (8003550 <HAL_GPIO_Init+0x2b8>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a4c      	ldr	r2, [pc, #304]	@ (8003550 <HAL_GPIO_Init+0x2b8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b4a      	ldr	r3, [pc, #296]	@ (8003550 <HAL_GPIO_Init+0x2b8>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003430:	4a48      	ldr	r2, [pc, #288]	@ (8003554 <HAL_GPIO_Init+0x2bc>)
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	@ (8003558 <HAL_GPIO_Init+0x2c0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3f      	ldr	r2, [pc, #252]	@ (800355c <HAL_GPIO_Init+0x2c4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3e      	ldr	r2, [pc, #248]	@ (8003560 <HAL_GPIO_Init+0x2c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1e4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3d      	ldr	r2, [pc, #244]	@ (8003564 <HAL_GPIO_Init+0x2cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1e0>
 8003474:	2303      	movs	r3, #3
 8003476:	e006      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003478:	2304      	movs	r3, #4
 800347a:	e004      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003484:	2300      	movs	r3, #0
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003496:	492f      	ldr	r1, [pc, #188]	@ (8003554 <HAL_GPIO_Init+0x2bc>)
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	492c      	ldr	r1, [pc, #176]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034be:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4928      	ldr	r1, [pc, #160]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	4922      	ldr	r1, [pc, #136]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034e6:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	491e      	ldr	r1, [pc, #120]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4918      	ldr	r1, [pc, #96]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
 800350c:	e006      	b.n	800351c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800350e:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	43db      	mvns	r3, r3
 8003516:	4914      	ldr	r1, [pc, #80]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 8003518:	4013      	ands	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d021      	beq.n	800356c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	490e      	ldr	r1, [pc, #56]	@ (8003568 <HAL_GPIO_Init+0x2d0>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	e021      	b.n	800357a <HAL_GPIO_Init+0x2e2>
 8003536:	bf00      	nop
 8003538:	10320000 	.word	0x10320000
 800353c:	10310000 	.word	0x10310000
 8003540:	10220000 	.word	0x10220000
 8003544:	10210000 	.word	0x10210000
 8003548:	10120000 	.word	0x10120000
 800354c:	10110000 	.word	0x10110000
 8003550:	40021000 	.word	0x40021000
 8003554:	40010000 	.word	0x40010000
 8003558:	40010800 	.word	0x40010800
 800355c:	40010c00 	.word	0x40010c00
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_GPIO_Init+0x304>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	43db      	mvns	r3, r3
 8003574:	4909      	ldr	r1, [pc, #36]	@ (800359c <HAL_GPIO_Init+0x304>)
 8003576:	4013      	ands	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	3301      	adds	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	f47f ae8e 	bne.w	80032ac <HAL_GPIO_Init+0x14>
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	372c      	adds	r7, #44	@ 0x2c
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	807b      	strh	r3, [r7, #2]
 80035da:	4613      	mov	r3, r2
 80035dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e4:	887a      	ldrh	r2, [r7, #2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035ea:	e003      	b.n	80035f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	041a      	lsls	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	041a      	lsls	r2, r3, #16
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43d9      	mvns	r1, r3
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	400b      	ands	r3, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e12b      	b.n	800389a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fc ff98 	bl	800058c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	@ 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f002 fc30 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a81      	ldr	r2, [pc, #516]	@ (80038a4 <HAL_I2C_Init+0x274>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a80      	ldr	r2, [pc, #512]	@ (80038a8 <HAL_I2C_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a7d      	ldr	r2, [pc, #500]	@ (80038ac <HAL_I2C_Init+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0e7      	b.n	800389a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a78      	ldr	r2, [pc, #480]	@ (80038b0 <HAL_I2C_Init+0x280>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	@ (80038a4 <HAL_I2C_Init+0x274>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a69      	ldr	r2, [pc, #420]	@ (80038b4 <HAL_I2C_Init+0x284>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	495c      	ldr	r1, [pc, #368]	@ (80038a4 <HAL_I2C_Init+0x274>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d819      	bhi.n	800376c <HAL_I2C_Init+0x13c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800374c:	400b      	ands	r3, r1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_I2C_Init+0x138>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	e051      	b.n	800380c <HAL_I2C_Init+0x1dc>
 8003768:	2304      	movs	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x168>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x18e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x196>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b80      	cmp	r3, #128	@ 0x80
 80038cc:	d103      	bne.n	80038d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	461a      	mov	r2, r3
 80038ec:	460b      	mov	r3, r1
 80038ee:	817b      	strh	r3, [r7, #10]
 80038f0:	4613      	mov	r3, r2
 80038f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 8101 	bne.w	8003b08 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003906:	4b83      	ldr	r3, [pc, #524]	@ (8003b14 <HAL_I2C_Master_Transmit_DMA+0x234>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	4a82      	ldr	r2, [pc, #520]	@ (8003b18 <HAL_I2C_Master_Transmit_DMA+0x238>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0a1a      	lsrs	r2, r3, #8
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3b01      	subs	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d112      	bne.n	8003952 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	e0db      	b.n	8003b0a <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d0df      	beq.n	8003920 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800396a:	2302      	movs	r3, #2
 800396c:	e0cd      	b.n	8003b0a <HAL_I2C_Master_Transmit_DMA+0x22a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d007      	beq.n	8003994 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	@ 0x21
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2210      	movs	r2, #16
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	893a      	ldrh	r2, [r7, #8]
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80039d6:	897a      	ldrh	r2, [r7, #10]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d073      	beq.n	8003acc <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d022      	beq.n	8003a32 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b24 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	2200      	movs	r2, #0
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a08:	2200      	movs	r2, #0
 8003a0a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	4619      	mov	r1, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3310      	adds	r3, #16
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	f7ff f867 	bl	8002af4 <HAL_DMA_Start_IT>
 8003a26:	4603      	mov	r3, r0
 8003a28:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d139      	bne.n	8003aa4 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8003a30:	e013      	b.n	8003a5a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e057      	b.n	8003b0a <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a70:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a80:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a90:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e02f      	b.n	8003b04 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e01e      	b.n	8003b0a <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ada:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aea:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003b02:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000000 	.word	0x20000000
 8003b18:	14f8b589 	.word	0x14f8b589
 8003b1c:	ffff0000 	.word	0xffff0000
 8003b20:	08005351 	.word	0x08005351
 8003b24:	0800550f 	.word	0x0800550f

08003b28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d003      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x38>
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	f040 80c1 	bne.w	8003ce2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003b80:	d003      	beq.n	8003b8a <HAL_I2C_EV_IRQHandler+0x62>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b88:	d101      	bne.n	8003b8e <HAL_I2C_EV_IRQHandler+0x66>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_EV_IRQHandler+0x68>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f000 8132 	beq.w	8003dfa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00c      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x92>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	0a5b      	lsrs	r3, r3, #9
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 fdbf 	bl	8005730 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fda6 	bl	8004704 <I2C_Master_SB>
 8003bb8:	e092      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xb2>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fe1b 	bl	800480e <I2C_Master_ADD10>
 8003bd8:	e082      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_I2C_EV_IRQHandler+0xd2>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a5b      	lsrs	r3, r3, #9
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fe34 	bl	8004860 <I2C_Master_ADDR>
 8003bf8:	e072      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03b      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c14:	f000 80f3 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	09db      	lsrs	r3, r3, #7
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00f      	beq.n	8003c44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9fe 	bl	800403e <I2C_MasterTransmit_TXE>
 8003c42:	e04d      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80d6 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	0a5b      	lsrs	r3, r3, #9
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80cf 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2b21      	cmp	r3, #33	@ 0x21
 8003c64:	d103      	bne.n	8003c6e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa85 	bl	8004176 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6c:	e0c7      	b.n	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b40      	cmp	r3, #64	@ 0x40
 8003c72:	f040 80c4 	bne.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 faf3 	bl	8004262 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7c:	e0bf      	b.n	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8c:	f000 80b7 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x194>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x194>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fb6c 	bl	8004392 <I2C_MasterReceive_RXNE>
 8003cba:	e011      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 809a 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0a5b      	lsrs	r3, r3, #9
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8093 	beq.w	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fc22 	bl	8004522 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cde:	e08e      	b.n	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ce0:	e08d      	b.n	8003dfe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	e007      	b.n	8003d04 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x20e>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 ffed 	bl	8004d0e <I2C_Slave_ADDR>
 8003d34:	e066      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	0a5b      	lsrs	r3, r3, #9
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f001 f828 	bl	8004da4 <I2C_Slave_STOPF>
 8003d54:	e056      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d56:	7bbb      	ldrb	r3, [r7, #14]
 8003d58:	2b21      	cmp	r3, #33	@ 0x21
 8003d5a:	d002      	beq.n	8003d62 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d5c:	7bbb      	ldrb	r3, [r7, #14]
 8003d5e:	2b29      	cmp	r3, #41	@ 0x29
 8003d60:	d125      	bne.n	8003dae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	09db      	lsrs	r3, r3, #7
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00f      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0x266>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	0a9b      	lsrs	r3, r3, #10
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0x266>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 ff05 	bl	8004b96 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8c:	e039      	b.n	8003e02 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d033      	beq.n	8003e02 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	0a5b      	lsrs	r3, r3, #9
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d02d      	beq.n	8003e02 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 ff32 	bl	8004c10 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dac:	e029      	b.n	8003e02 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00f      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x2b2>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	0a9b      	lsrs	r3, r3, #10
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x2b2>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 ff3c 	bl	8004c50 <I2C_SlaveReceive_RXNE>
 8003dd8:	e014      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 ff6a 	bl	8004ccc <I2C_SlaveReceive_BTF>
 8003df8:	e004      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e02:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08a      	sub	sp, #40	@ 0x28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e2c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_I2C_ER_IRQHandler+0x5e>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e56:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	0a5b      	lsrs	r3, r3, #9
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <HAL_I2C_ER_IRQHandler+0x88>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003e90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	0a9b      	lsrs	r3, r3, #10
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d03f      	beq.n	8003f1e <HAL_I2C_ER_IRQHandler+0x114>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d039      	beq.n	8003f1e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003eaa:	7efb      	ldrb	r3, [r7, #27]
 8003eac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ec4:	7ebb      	ldrb	r3, [r7, #26]
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d112      	bne.n	8003ef0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b21      	cmp	r3, #33	@ 0x21
 8003ed4:	d008      	beq.n	8003ee8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b29      	cmp	r3, #41	@ 0x29
 8003eda:	d005      	beq.n	8003ee8 <HAL_I2C_ER_IRQHandler+0xde>
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b28      	cmp	r3, #40	@ 0x28
 8003ee0:	d106      	bne.n	8003ef0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b21      	cmp	r3, #33	@ 0x21
 8003ee6:	d103      	bne.n	8003ef0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 f88b 	bl	8005004 <I2C_Slave_AF>
 8003eee:	e016      	b.n	8003f1e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f02:	7efb      	ldrb	r3, [r7, #27]
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d002      	beq.n	8003f0e <HAL_I2C_ER_IRQHandler+0x104>
 8003f08:	7efb      	ldrb	r3, [r7, #27]
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	0adb      	lsrs	r3, r3, #11
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <HAL_I2C_ER_IRQHandler+0x13e>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003f46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f001 f8c6 	bl	80050ec <I2C_ITError>
  }
}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	70fb      	strb	r3, [r7, #3]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004054:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d150      	bne.n	8004106 <I2C_MasterTransmit_TXE+0xc8>
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b21      	cmp	r3, #33	@ 0x21
 8004068:	d14d      	bne.n	8004106 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d01d      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b20      	cmp	r3, #32
 8004074:	d01a      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800407c:	d016      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800408c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2211      	movs	r2, #17
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff5f 	bl	8003f68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040aa:	e060      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d107      	bne.n	80040f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff74 	bl	8003fdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040f4:	e03b      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff32 	bl	8003f68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004104:	e033      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b21      	cmp	r3, #33	@ 0x21
 800410a:	d005      	beq.n	8004118 <I2C_MasterTransmit_TXE+0xda>
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d12d      	bne.n	800416e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b22      	cmp	r3, #34	@ 0x22
 8004116:	d12a      	bne.n	800416e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004132:	e01c      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b40      	cmp	r3, #64	@ 0x40
 800413e:	d103      	bne.n	8004148 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f88e 	bl	8004262 <I2C_MemoryTransmit_TXE_BTF>
}
 8004146:	e012      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800416c:	e7ff      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b21      	cmp	r3, #33	@ 0x21
 800418e:	d164      	bne.n	800425a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041be:	e04c      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d01d      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d01a      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d2:	d016      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2211      	movs	r2, #17
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff feb4 	bl	8003f68 <HAL_I2C_MasterTxCpltCallback>
}
 8004200:	e02b      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004210:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004220:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d107      	bne.n	800424c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fec9 	bl	8003fdc <HAL_I2C_MemTxCpltCallback>
}
 800424a:	e006      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fe87 	bl	8003f68 <HAL_I2C_MasterTxCpltCallback>
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11d      	bne.n	80042b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10b      	bne.n	800429a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004298:	e077      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429e:	b29b      	uxth	r3, r3
 80042a0:	121b      	asrs	r3, r3, #8
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042b4:	e069      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10b      	bne.n	80042d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042d4:	e059      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d152      	bne.n	8004384 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b22      	cmp	r3, #34	@ 0x22
 80042e2:	d10d      	bne.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042fe:	e044      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b21      	cmp	r3, #33	@ 0x21
 800430e:	d112      	bne.n	8004336 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004334:	e029      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d124      	bne.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b21      	cmp	r3, #33	@ 0x21
 8004344:	d121      	bne.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004354:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004364:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe2d 	bl	8003fdc <HAL_I2C_MemTxCpltCallback>
}
 8004382:	e002      	b.n	800438a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fa97 	bl	80038b8 <I2C_Flush_DR>
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b22      	cmp	r3, #34	@ 0x22
 80043a4:	f040 80b9 	bne.w	800451a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d921      	bls.n	8004400 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	f040 8096 	bne.w	800451a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043fe:	e08c      	b.n	800451a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	2b02      	cmp	r3, #2
 8004406:	d07f      	beq.n	8004508 <I2C_MasterReceive_RXNE+0x176>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <I2C_MasterReceive_RXNE+0x82>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d179      	bne.n	8004508 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 f959 	bl	80056cc <I2C_WaitOnSTOPRequestThroughIT>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d14c      	bne.n	80044ba <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800443e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d10a      	bne.n	8004490 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fdb0 	bl	8003fee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800448e:	e044      	b.n	800451a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b08      	cmp	r3, #8
 800449c:	d002      	beq.n	80044a4 <I2C_MasterReceive_RXNE+0x112>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d103      	bne.n	80044ac <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80044aa:	e002      	b.n	80044b2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2212      	movs	r2, #18
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fd61 	bl	8003f7a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044b8:	e02f      	b.n	800451a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fd7d 	bl	8004000 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004506:	e008      	b.n	800451a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004516:	605a      	str	r2, [r3, #4]
}
 8004518:	e7ff      	b.n	800451a <I2C_MasterReceive_RXNE+0x188>
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b04      	cmp	r3, #4
 8004538:	d11b      	bne.n	8004572 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004548:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004570:	e0c4      	b.n	80046fc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b03      	cmp	r3, #3
 800457a:	d129      	bne.n	80045d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d00a      	beq.n	80045a8 <I2C_MasterReceive_BTF+0x86>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d007      	beq.n	80045a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80045ce:	e095      	b.n	80046fc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d17d      	bne.n	80046d6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d002      	beq.n	80045e6 <I2C_MasterReceive_BTF+0xc4>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d108      	bne.n	80045f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e016      	b.n	8004626 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d002      	beq.n	8004604 <I2C_MasterReceive_BTF+0xe2>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d108      	bne.n	8004616 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e007      	b.n	8004626 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004624:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004680:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d10a      	bne.n	80046ac <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fca2 	bl	8003fee <HAL_I2C_MemRxCpltCallback>
}
 80046aa:	e027      	b.n	80046fc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d002      	beq.n	80046c0 <I2C_MasterReceive_BTF+0x19e>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d103      	bne.n	80046c8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80046c6:	e002      	b.n	80046ce <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2212      	movs	r2, #18
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fc53 	bl	8003f7a <HAL_I2C_MasterRxCpltCallback>
}
 80046d4:	e012      	b.n	80046fc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b40      	cmp	r3, #64	@ 0x40
 8004716:	d117      	bne.n	8004748 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004730:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004732:	e067      	b.n	8004804 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	611a      	str	r2, [r3, #16]
}
 8004746:	e05d      	b.n	8004804 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004750:	d133      	bne.n	80047ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b21      	cmp	r3, #33	@ 0x21
 800475c:	d109      	bne.n	8004772 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800476e:	611a      	str	r2, [r3, #16]
 8004770:	e008      	b.n	8004784 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <I2C_Master_SB+0x92>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d032      	beq.n	8004804 <I2C_Master_SB+0x100>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02d      	beq.n	8004804 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b6:	605a      	str	r2, [r3, #4]
}
 80047b8:	e024      	b.n	8004804 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	11db      	asrs	r3, r3, #7
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0306 	and.w	r3, r3, #6
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f063 030f 	orn	r3, r3, #15
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]
}
 80047de:	e011      	b.n	8004804 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10d      	bne.n	8004804 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	11db      	asrs	r3, r3, #7
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f063 030e 	orn	r3, r3, #14
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	b2da      	uxtb	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <I2C_Master_ADD10+0x26>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00c      	beq.n	8004856 <I2C_Master_ADD10+0x48>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004854:	605a      	str	r2, [r3, #4]
  }
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b091      	sub	sp, #68	@ 0x44
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b22      	cmp	r3, #34	@ 0x22
 8004888:	f040 8174 	bne.w	8004b74 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <I2C_Master_ADDR+0x54>
 8004894:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d10b      	bne.n	80048b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489c:	2300      	movs	r3, #0
 800489e:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	e16b      	b.n	8004b8c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11d      	bne.n	80048f8 <I2C_Master_ADDR+0x98>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80048c4:	d118      	bne.n	80048f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80048f6:	e149      	b.n	8004b8c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004902:	2300      	movs	r3, #0
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e120      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 808a 	bne.w	8004a4a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800493c:	d137      	bne.n	80049ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800495c:	d113      	bne.n	8004986 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	e0f2      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004986:	2300      	movs	r3, #0
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	623b      	str	r3, [r7, #32]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e0de      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d02e      	beq.n	8004a12 <I2C_Master_ADDR+0x1b2>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d02b      	beq.n	8004a12 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049bc:	2b12      	cmp	r3, #18
 80049be:	d102      	bne.n	80049c6 <I2C_Master_ADDR+0x166>
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d125      	bne.n	8004a12 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d00e      	beq.n	80049ea <I2C_Master_ADDR+0x18a>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d00b      	beq.n	80049ea <I2C_Master_ADDR+0x18a>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d008      	beq.n	80049ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e007      	b.n	80049fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	e0ac      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a20:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e090      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d158      	bne.n	8004b06 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d021      	beq.n	8004a9e <I2C_Master_ADDR+0x23e>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d01e      	beq.n	8004a9e <I2C_Master_ADDR+0x23e>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d01b      	beq.n	8004a9e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e012      	b.n	8004ac4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad2:	d14b      	bne.n	8004b6c <I2C_Master_ADDR+0x30c>
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ada:	d00b      	beq.n	8004af4 <I2C_Master_ADDR+0x294>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d008      	beq.n	8004af4 <I2C_Master_ADDR+0x294>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d005      	beq.n	8004af4 <I2C_Master_ADDR+0x294>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d002      	beq.n	8004af4 <I2C_Master_ADDR+0x294>
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d13b      	bne.n	8004b6c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e032      	b.n	8004b6c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b24:	d117      	bne.n	8004b56 <I2C_Master_ADDR+0x2f6>
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b2c:	d00b      	beq.n	8004b46 <I2C_Master_ADDR+0x2e6>
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d008      	beq.n	8004b46 <I2C_Master_ADDR+0x2e6>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d005      	beq.n	8004b46 <I2C_Master_ADDR+0x2e6>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d002      	beq.n	8004b46 <I2C_Master_ADDR+0x2e6>
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d107      	bne.n	8004b56 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b72:	e00b      	b.n	8004b8c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
}
 8004b8a:	e7ff      	b.n	8004b8c <I2C_Master_ADDR+0x32c>
 8004b8c:	bf00      	nop
 8004b8e:	3744      	adds	r7, #68	@ 0x44
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02b      	beq.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d114      	bne.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b29      	cmp	r3, #41	@ 0x29
 8004be2:	d111      	bne.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2221      	movs	r2, #33	@ 0x21
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2228      	movs	r2, #40	@ 0x28
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff f9c2 	bl	8003f8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d011      	beq.n	8004c46 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02c      	beq.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d114      	bne.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9e:	d111      	bne.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2222      	movs	r2, #34	@ 0x22
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2228      	movs	r2, #40	@ 0x28
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff f96d 	bl	8003f9e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d28:	2b28      	cmp	r3, #40	@ 0x28
 8004d2a:	d127      	bne.n	8004d7c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	81bb      	strh	r3, [r7, #12]
 8004d5e:	e002      	b.n	8004d66 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d6e:	89ba      	ldrh	r2, [r7, #12]
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff f91b 	bl	8003fb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d7a:	e00e      	b.n	8004d9a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e00:	d172      	bne.n	8004ee8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b22      	cmp	r3, #34	@ 0x22
 8004e06:	d002      	beq.n	8004e0e <I2C_Slave_STOPF+0x6a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e0c:	d135      	bne.n	8004e7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe f86e 	bl	8002f28 <HAL_DMA_GetState>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d049      	beq.n	8004ee6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	4a69      	ldr	r2, [pc, #420]	@ (8004ffc <I2C_Slave_STOPF+0x258>)
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd fee4 	bl	8002c2c <HAL_DMA_Abort_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03d      	beq.n	8004ee6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e74:	4610      	mov	r0, r2
 8004e76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e78:	e035      	b.n	8004ee6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f838 	bl	8002f28 <HAL_DMA_GetState>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d014      	beq.n	8004ee8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8004ffc <I2C_Slave_STOPF+0x258>)
 8004ec4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd feae 	bl	8002c2c <HAL_DMA_Abort_IT>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4798      	blx	r3
 8004ee4:	e000      	b.n	8004ee8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ee6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03e      	beq.n	8004f70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d112      	bne.n	8004f26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	d112      	bne.n	8004f5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8b7 	bl	80050ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f7e:	e039      	b.n	8004ff4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f84:	d109      	bne.n	8004f9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2228      	movs	r2, #40	@ 0x28
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff f802 	bl	8003f9e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b28      	cmp	r3, #40	@ 0x28
 8004fa4:	d111      	bne.n	8004fca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <I2C_Slave_STOPF+0x25c>)
 8004faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff f801 	bl	8003fca <HAL_I2C_ListenCpltCallback>
}
 8004fc8:	e014      	b.n	8004ff4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	2b22      	cmp	r3, #34	@ 0x22
 8004fd0:	d002      	beq.n	8004fd8 <I2C_Slave_STOPF+0x234>
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b22      	cmp	r3, #34	@ 0x22
 8004fd6:	d10d      	bne.n	8004ff4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fe ffd5 	bl	8003f9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	0800557d 	.word	0x0800557d
 8005000:	ffff0000 	.word	0xffff0000

08005004 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d002      	beq.n	8005026 <I2C_Slave_AF+0x22>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d129      	bne.n	800507a <I2C_Slave_AF+0x76>
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b28      	cmp	r3, #40	@ 0x28
 800502a:	d126      	bne.n	800507a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <I2C_Slave_AF+0xe4>)
 8005030:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005040:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800504a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe ffa9 	bl	8003fca <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005078:	e031      	b.n	80050de <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b21      	cmp	r3, #33	@ 0x21
 800507e:	d129      	bne.n	80050d4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <I2C_Slave_AF+0xe4>)
 8005084:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe fbf6 	bl	80038b8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fe ff5d 	bl	8003f8c <HAL_I2C_SlaveTxCpltCallback>
}
 80050d2:	e004      	b.n	80050de <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050dc:	615a      	str	r2, [r3, #20]
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	ffff0000 	.word	0xffff0000

080050ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005102:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	2b10      	cmp	r3, #16
 8005108:	d002      	beq.n	8005110 <I2C_ITError+0x24>
 800510a:	7bbb      	ldrb	r3, [r7, #14]
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d10a      	bne.n	8005126 <I2C_ITError+0x3a>
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b22      	cmp	r3, #34	@ 0x22
 8005114:	d107      	bne.n	8005126 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005124:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800512c:	2b28      	cmp	r3, #40	@ 0x28
 800512e:	d107      	bne.n	8005140 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2228      	movs	r2, #40	@ 0x28
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800513e:	e015      	b.n	800516c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514e:	d00a      	beq.n	8005166 <I2C_ITError+0x7a>
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b60      	cmp	r3, #96	@ 0x60
 8005154:	d007      	beq.n	8005166 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800517a:	d162      	bne.n	8005242 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800518a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d020      	beq.n	80051dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	4a6a      	ldr	r2, [pc, #424]	@ (8005348 <I2C_ITError+0x25c>)
 80051a0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fd40 	bl	8002c2c <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8089 	beq.w	80052c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051d6:	4610      	mov	r0, r2
 80051d8:	4798      	blx	r3
 80051da:	e074      	b.n	80052c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e0:	4a59      	ldr	r2, [pc, #356]	@ (8005348 <I2C_ITError+0x25c>)
 80051e2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fd fd1f 	bl	8002c2c <HAL_DMA_Abort_IT>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d068      	beq.n	80052c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d10b      	bne.n	800521a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
 8005240:	e041      	b.n	80052c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b60      	cmp	r3, #96	@ 0x60
 800524c:	d125      	bne.n	800529a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005266:	2b40      	cmp	r3, #64	@ 0x40
 8005268:	d10b      	bne.n	8005282 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fe febd 	bl	8004012 <HAL_I2C_AbortCpltCallback>
 8005298:	e015      	b.n	80052c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d10b      	bne.n	80052c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fe fe9d 	bl	8004000 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d113      	bne.n	8005340 <I2C_ITError+0x254>
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b28      	cmp	r3, #40	@ 0x28
 800531c:	d110      	bne.n	8005340 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a0a      	ldr	r2, [pc, #40]	@ (800534c <I2C_ITError+0x260>)
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fe fe45 	bl	8003fca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800557d 	.word	0x0800557d
 800534c:	ffff0000 	.word	0xffff0000

08005350 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005364:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800536c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005382:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005390:	2200      	movs	r2, #0
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	2200      	movs	r2, #0
 80053a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80053aa:	2b21      	cmp	r3, #33	@ 0x21
 80053ac:	d007      	beq.n	80053be <I2C_DMAXferCplt+0x6e>
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80053b4:	2b22      	cmp	r3, #34	@ 0x22
 80053b6:	d131      	bne.n	800541c <I2C_DMAXferCplt+0xcc>
 80053b8:	7cbb      	ldrb	r3, [r7, #18]
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d12e      	bne.n	800541c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b29      	cmp	r3, #41	@ 0x29
 80053d8:	d10a      	bne.n	80053f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2221      	movs	r2, #33	@ 0x21
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2228      	movs	r2, #40	@ 0x28
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053e8:	6978      	ldr	r0, [r7, #20]
 80053ea:	f7fe fdcf 	bl	8003f8c <HAL_I2C_SlaveTxCpltCallback>
 80053ee:	e00c      	b.n	800540a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f4:	d109      	bne.n	800540a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2222      	movs	r2, #34	@ 0x22
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2228      	movs	r2, #40	@ 0x28
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005404:	6978      	ldr	r0, [r7, #20]
 8005406:	f7fe fdca 	bl	8003f9e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005418:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800541a:	e074      	b.n	8005506 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d06e      	beq.n	8005506 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005440:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005450:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005458:	d009      	beq.n	800546e <I2C_DMAXferCplt+0x11e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d006      	beq.n	800546e <I2C_DMAXferCplt+0x11e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005466:	d002      	beq.n	800546e <I2C_DMAXferCplt+0x11e>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b20      	cmp	r3, #32
 800546c:	d107      	bne.n	800547e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800547c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800548c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800549c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80054ac:	6978      	ldr	r0, [r7, #20]
 80054ae:	f7fe fda7 	bl	8004000 <HAL_I2C_ErrorCallback>
}
 80054b2:	e028      	b.n	8005506 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d10a      	bne.n	80054de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7fe fd89 	bl	8003fee <HAL_I2C_MemRxCpltCallback>
}
 80054dc:	e013      	b.n	8005506 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d002      	beq.n	80054f2 <I2C_DMAXferCplt+0x1a2>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d103      	bne.n	80054fa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80054f8:	e002      	b.n	8005500 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2212      	movs	r2, #18
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7fe fd3a 	bl	8003f7a <HAL_I2C_MasterRxCpltCallback>
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005528:	2200      	movs	r2, #0
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	2200      	movs	r2, #0
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	f043 0210 	orr.w	r2, r3, #16
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7fe fd46 	bl	8004000 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005594:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <I2C_DMAAbort+0x148>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	4a4a      	ldr	r2, [pc, #296]	@ (80056c8 <I2C_DMAAbort+0x14c>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0a1a      	lsrs	r2, r3, #8
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	00da      	lsls	r2, r3, #3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80055c2:	e00a      	b.n	80055da <I2C_DMAAbort+0x5e>
    }
    count--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d8:	d0ea      	beq.n	80055b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e6:	2200      	movs	r2, #0
 80055e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005608:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2200      	movs	r2, #0
 800560e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561c:	2200      	movs	r2, #0
 800561e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	2200      	movs	r2, #0
 800562e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b60      	cmp	r3, #96	@ 0x60
 800564a:	d10e      	bne.n	800566a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f7fe fcd5 	bl	8004012 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005668:	e027      	b.n	80056ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005670:	2b28      	cmp	r3, #40	@ 0x28
 8005672:	d117      	bne.n	80056a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005692:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2228      	movs	r2, #40	@ 0x28
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056a2:	e007      	b.n	80056b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056b4:	6978      	ldr	r0, [r7, #20]
 80056b6:	f7fe fca3 	bl	8004000 <HAL_I2C_ErrorCallback>
}
 80056ba:	bf00      	nop
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000
 80056c8:	14f8b589 	.word	0x14f8b589

080056cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80056d8:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	4a13      	ldr	r2, [pc, #76]	@ (800572c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	0a1a      	lsrs	r2, r3, #8
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d107      	bne.n	800570a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e008      	b.n	800571c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d0e9      	beq.n	80056ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000000 	.word	0x20000000
 800572c:	14f8b589 	.word	0x14f8b589

08005730 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005740:	d103      	bne.n	800574a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005748:	e007      	b.n	800575a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005752:	d102      	bne.n	800575a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2208      	movs	r2, #8
 8005758:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e272      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8087 	beq.w	8005892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005784:	4b92      	ldr	r3, [pc, #584]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b04      	cmp	r3, #4
 800578e:	d00c      	beq.n	80057aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005790:	4b8f      	ldr	r3, [pc, #572]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d112      	bne.n	80057c2 <HAL_RCC_OscConfig+0x5e>
 800579c:	4b8c      	ldr	r3, [pc, #560]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d10b      	bne.n	80057c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057aa:	4b89      	ldr	r3, [pc, #548]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d06c      	beq.n	8005890 <HAL_RCC_OscConfig+0x12c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d168      	bne.n	8005890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e24c      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ca:	d106      	bne.n	80057da <HAL_RCC_OscConfig+0x76>
 80057cc:	4b80      	ldr	r3, [pc, #512]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a7f      	ldr	r2, [pc, #508]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e02e      	b.n	8005838 <HAL_RCC_OscConfig+0xd4>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x98>
 80057e2:	4b7b      	ldr	r3, [pc, #492]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7a      	ldr	r2, [pc, #488]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b78      	ldr	r3, [pc, #480]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a77      	ldr	r2, [pc, #476]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e01d      	b.n	8005838 <HAL_RCC_OscConfig+0xd4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0xbc>
 8005806:	4b72      	ldr	r3, [pc, #456]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a71      	ldr	r2, [pc, #452]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800580c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b6f      	ldr	r3, [pc, #444]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6e      	ldr	r2, [pc, #440]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0xd4>
 8005820:	4b6b      	ldr	r3, [pc, #428]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6a      	ldr	r2, [pc, #424]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b68      	ldr	r3, [pc, #416]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a67      	ldr	r2, [pc, #412]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fc fa74 	bl	8001d2c <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005848:	f7fc fa70 	bl	8001d2c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	@ 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e200      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b5d      	ldr	r3, [pc, #372]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xe4>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fc fa60 	bl	8001d2c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fc fa5c 	bl	8001d2c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	@ 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e1ec      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	4b53      	ldr	r3, [pc, #332]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x10c>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d063      	beq.n	8005966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800589e:	4b4c      	ldr	r3, [pc, #304]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058aa:	4b49      	ldr	r3, [pc, #292]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d11c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x18c>
 80058b6:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c2:	4b43      	ldr	r3, [pc, #268]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x176>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d001      	beq.n	80058da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e1c0      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058da:	4b3d      	ldr	r3, [pc, #244]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4939      	ldr	r1, [pc, #228]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	e03a      	b.n	8005966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f8:	4b36      	ldr	r3, [pc, #216]	@ (80059d4 <HAL_RCC_OscConfig+0x270>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fc fa15 	bl	8001d2c <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005906:	f7fc fa11 	bl	8001d2c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e1a1      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005918:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005924:	4b2a      	ldr	r3, [pc, #168]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4927      	ldr	r1, [pc, #156]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]
 8005938:	e015      	b.n	8005966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800593a:	4b26      	ldr	r3, [pc, #152]	@ (80059d4 <HAL_RCC_OscConfig+0x270>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fc f9f4 	bl	8001d2c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005948:	f7fc f9f0 	bl	8001d2c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e180      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595a:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03a      	beq.n	80059e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d019      	beq.n	80059ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597a:	4b17      	ldr	r3, [pc, #92]	@ (80059d8 <HAL_RCC_OscConfig+0x274>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005980:	f7fc f9d4 	bl	8001d2c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005988:	f7fc f9d0 	bl	8001d2c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e160      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <HAL_RCC_OscConfig+0x26c>)
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f000 face 	bl	8005f48 <RCC_Delay>
 80059ac:	e01c      	b.n	80059e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ae:	4b0a      	ldr	r3, [pc, #40]	@ (80059d8 <HAL_RCC_OscConfig+0x274>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b4:	f7fc f9ba 	bl	8001d2c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ba:	e00f      	b.n	80059dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fc f9b6 	bl	8001d2c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d908      	bls.n	80059dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e146      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	42420000 	.word	0x42420000
 80059d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	4b92      	ldr	r3, [pc, #584]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e9      	bne.n	80059bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a6 	beq.w	8005b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10d      	bne.n	8005a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a06:	4b88      	ldr	r3, [pc, #544]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4a87      	ldr	r2, [pc, #540]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a10:	61d3      	str	r3, [r2, #28]
 8005a12:	4b85      	ldr	r3, [pc, #532]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a22:	4b82      	ldr	r3, [pc, #520]	@ (8005c2c <HAL_RCC_OscConfig+0x4c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d118      	bne.n	8005a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c2c <HAL_RCC_OscConfig+0x4c8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7e      	ldr	r2, [pc, #504]	@ (8005c2c <HAL_RCC_OscConfig+0x4c8>)
 8005a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3a:	f7fc f977 	bl	8001d2c <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a42:	f7fc f973 	bl	8001d2c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b64      	cmp	r3, #100	@ 0x64
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e103      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	4b75      	ldr	r3, [pc, #468]	@ (8005c2c <HAL_RCC_OscConfig+0x4c8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_OscConfig+0x312>
 8005a68:	4b6f      	ldr	r3, [pc, #444]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6213      	str	r3, [r2, #32]
 8005a74:	e02d      	b.n	8005ad2 <HAL_RCC_OscConfig+0x36e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x334>
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	4a69      	ldr	r2, [pc, #420]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	6213      	str	r3, [r2, #32]
 8005a8a:	4b67      	ldr	r3, [pc, #412]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4a66      	ldr	r2, [pc, #408]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	f023 0304 	bic.w	r3, r3, #4
 8005a94:	6213      	str	r3, [r2, #32]
 8005a96:	e01c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x36e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d10c      	bne.n	8005aba <HAL_RCC_OscConfig+0x356>
 8005aa0:	4b61      	ldr	r3, [pc, #388]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4a60      	ldr	r2, [pc, #384]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005aa6:	f043 0304 	orr.w	r3, r3, #4
 8005aaa:	6213      	str	r3, [r2, #32]
 8005aac:	4b5e      	ldr	r3, [pc, #376]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	6213      	str	r3, [r2, #32]
 8005ab8:	e00b      	b.n	8005ad2 <HAL_RCC_OscConfig+0x36e>
 8005aba:	4b5b      	ldr	r3, [pc, #364]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	4a5a      	ldr	r2, [pc, #360]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
 8005ac4:	6213      	str	r3, [r2, #32]
 8005ac6:	4b58      	ldr	r3, [pc, #352]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	4a57      	ldr	r2, [pc, #348]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d015      	beq.n	8005b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ada:	f7fc f927 	bl	8001d2c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae2:	f7fc f923 	bl	8001d2c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e0b1      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af8:	4b4b      	ldr	r3, [pc, #300]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0ee      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x37e>
 8005b04:	e014      	b.n	8005b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b06:	f7fc f911 	bl	8001d2c <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b0c:	e00a      	b.n	8005b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0e:	f7fc f90d 	bl	8001d2c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e09b      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b24:	4b40      	ldr	r3, [pc, #256]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1ee      	bne.n	8005b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b36:	4b3c      	ldr	r3, [pc, #240]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8087 	beq.w	8005c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b4c:	4b36      	ldr	r3, [pc, #216]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 030c 	and.w	r3, r3, #12
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d061      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d146      	bne.n	8005bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b60:	4b33      	ldr	r3, [pc, #204]	@ (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fc f8e1 	bl	8001d2c <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fc f8dd 	bl	8001d2c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e06d      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b80:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b94:	d108      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b96:	4b24      	ldr	r3, [pc, #144]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	4921      	ldr	r1, [pc, #132]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a19      	ldr	r1, [r3, #32]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	491b      	ldr	r1, [pc, #108]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc6:	f7fc f8b1 	bl	8001d2c <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fc f8ad 	bl	8001d2c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e03d      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005be0:	4b11      	ldr	r3, [pc, #68]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x46a>
 8005bec:	e035      	b.n	8005c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bee:	4b10      	ldr	r3, [pc, #64]	@ (8005c30 <HAL_RCC_OscConfig+0x4cc>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fc f89a 	bl	8001d2c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fc f896 	bl	8001d2c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e026      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_OscConfig+0x4c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x498>
 8005c1a:	e01e      	b.n	8005c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e019      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40007000 	.word	0x40007000
 8005c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_OscConfig+0x500>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d106      	bne.n	8005c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000

08005c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0d0      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d910      	bls.n	8005cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b67      	ldr	r3, [pc, #412]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 0207 	bic.w	r2, r3, #7
 8005c92:	4965      	ldr	r1, [pc, #404]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d040      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b41      	ldr	r3, [pc, #260]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e073      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b3d      	ldr	r3, [pc, #244]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e06b      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4936      	ldr	r1, [pc, #216]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fb ffe8 	bl	8001d2c <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fb ffe4 	bl	8001d2c <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e053      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b2d      	ldr	r3, [pc, #180]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b27      	ldr	r3, [pc, #156]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d210      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	4922      	ldr	r1, [pc, #136]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005de2:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <HAL_RCC_ClockConfig+0x1cc>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <HAL_RCC_ClockConfig+0x1d0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fb ff46 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40022000 	.word	0x40022000
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	080090ec 	.word	0x080090ec
 8005e34:	20000000 	.word	0x20000000
 8005e38:	20000004 	.word	0x20000004

08005e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e56:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x30>
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x36>
 8005e6a:	e027      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e6c:	4b19      	ldr	r3, [pc, #100]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e6e:	613b      	str	r3, [r7, #16]
      break;
 8005e70:	e027      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	0c9b      	lsrs	r3, r3, #18
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e7c:	5cd3      	ldrb	r3, [r2, r3]
 8005e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d010      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	0c5b      	lsrs	r3, r3, #17
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e9e:	fb03 f202 	mul.w	r2, r3, r2
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	613b      	str	r3, [r7, #16]
      break;
 8005eba:	e002      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ebe:	613b      	str	r3, [r7, #16]
      break;
 8005ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ec2:	693b      	ldr	r3, [r7, #16]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	007a1200 	.word	0x007a1200
 8005ed8:	08009104 	.word	0x08009104
 8005edc:	08009114 	.word	0x08009114
 8005ee0:	003d0900 	.word	0x003d0900

08005ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee8:	4b02      	ldr	r3, [pc, #8]	@ (8005ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eea:	681b      	ldr	r3, [r3, #0]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	20000000 	.word	0x20000000

08005ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005efc:	f7ff fff2 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	080090fc 	.word	0x080090fc

08005f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f24:	f7ff ffde 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	@ (8005f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	0adb      	lsrs	r3, r3, #11
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	@ (8005f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000
 8005f44:	080090fc 	.word	0x080090fc

08005f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f50:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <RCC_Delay+0x34>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a0a      	ldr	r2, [pc, #40]	@ (8005f80 <RCC_Delay+0x38>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0a5b      	lsrs	r3, r3, #9
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	fb02 f303 	mul.w	r3, r2, r3
 8005f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f64:	bf00      	nop
  }
  while (Delay --);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1e5a      	subs	r2, r3, #1
 8005f6a:	60fa      	str	r2, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f9      	bne.n	8005f64 <RCC_Delay+0x1c>
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	20000000 	.word	0x20000000
 8005f80:	10624dd3 	.word	0x10624dd3

08005f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d07d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10d      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	61d3      	str	r3, [r2, #28]
 8005fbc:	4b49      	ldr	r3, [pc, #292]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fcc:	4b46      	ldr	r3, [pc, #280]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d118      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fd8:	4b43      	ldr	r3, [pc, #268]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe4:	f7fb fea2 	bl	8001d2c <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fea:	e008      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fec:	f7fb fe9e 	bl	8001d2c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	@ 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e06d      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f0      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800600a:	4b36      	ldr	r3, [pc, #216]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006012:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02e      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	429a      	cmp	r2, r3
 8006026:	d027      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006028:	4b2e      	ldr	r3, [pc, #184]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006032:	4b2e      	ldr	r3, [pc, #184]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006038:	4b2c      	ldr	r3, [pc, #176]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800603e:	4a29      	ldr	r2, [pc, #164]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604e:	f7fb fe6d 	bl	8001d2c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006054:	e00a      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fb fe69 	bl	8001d2c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e036      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	4b1d      	ldr	r3, [pc, #116]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ee      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006078:	4b1a      	ldr	r3, [pc, #104]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4917      	ldr	r1, [pc, #92]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006086:	4313      	orrs	r3, r2
 8006088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b14      	ldr	r3, [pc, #80]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800609a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a8:	4b0e      	ldr	r3, [pc, #56]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	490b      	ldr	r1, [pc, #44]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060c6:	4b07      	ldr	r3, [pc, #28]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4904      	ldr	r1, [pc, #16]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40007000 	.word	0x40007000
 80060ec:	42420440 	.word	0x42420440

080060f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b10      	cmp	r3, #16
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b10      	cmp	r3, #16
 8006116:	f200 808a 	bhi.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d045      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d075      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006126:	e082      	b.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006128:	4b46      	ldr	r3, [pc, #280]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800612e:	4b45      	ldr	r3, [pc, #276]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d07b      	beq.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0c9b      	lsrs	r3, r3, #18
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a41      	ldr	r2, [pc, #260]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006144:	5cd3      	ldrb	r3, [r2, r3]
 8006146:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d015      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006152:	4b3c      	ldr	r3, [pc, #240]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	0c5b      	lsrs	r3, r3, #17
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	4a3b      	ldr	r2, [pc, #236]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800615e:	5cd3      	ldrb	r3, [r2, r3]
 8006160:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800616c:	4a38      	ldr	r2, [pc, #224]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	fbb2 f2f3 	udiv	r2, r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e004      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4a34      	ldr	r2, [pc, #208]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006182:	fb02 f303 	mul.w	r3, r2, r3
 8006186:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006188:	4b2e      	ldr	r3, [pc, #184]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006194:	d102      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	61bb      	str	r3, [r7, #24]
      break;
 800619a:	e04a      	b.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	61bb      	str	r3, [r7, #24]
      break;
 80061aa:	e042      	b.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80061ac:	4b25      	ldr	r3, [pc, #148]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061bc:	d108      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80061c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e01f      	b.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061da:	d109      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80061e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e00f      	b.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fa:	d11c      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061fc:	4b11      	ldr	r3, [pc, #68]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d016      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006208:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800620c:	61bb      	str	r3, [r7, #24]
      break;
 800620e:	e012      	b.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006210:	e011      	b.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006212:	f7ff fe85 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 8006216:	4602      	mov	r2, r0
 8006218:	4b0a      	ldr	r3, [pc, #40]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	0b9b      	lsrs	r3, r3, #14
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	3301      	adds	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	61bb      	str	r3, [r7, #24]
      break;
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006236:	bf00      	nop
    }
  }
  return (frequency);
 8006238:	69bb      	ldr	r3, [r7, #24]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	08009118 	.word	0x08009118
 800624c:	08009128 	.word	0x08009128
 8006250:	007a1200 	.word	0x007a1200
 8006254:	003d0900 	.word	0x003d0900
 8006258:	aaaaaaab 	.word	0xaaaaaaab

0800625c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e076      	b.n	800635c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800627e:	d009      	beq.n	8006294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
 8006286:	e005      	b.n	8006294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb f9fa 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006318:	ea42 0103 	orr.w	r1, r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	0c1a      	lsrs	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f002 0204 	and.w	r2, r2, #4
 800633a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69da      	ldr	r2, [r3, #28]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800634a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006372:	2301      	movs	r3, #1
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006376:	f7fb fcd9 	bl	8001d2c <HAL_GetTick>
 800637a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006382:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800638a:	887b      	ldrh	r3, [r7, #2]
 800638c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800638e:	7ffb      	ldrb	r3, [r7, #31]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d00c      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x4a>
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800639a:	d106      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x46>
 80063a4:	7ffb      	ldrb	r3, [r7, #31]
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d001      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
 80063ac:	e17f      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x5c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x5c>
 80063ba:	887b      	ldrh	r3, [r7, #2]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e174      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x6e>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e16d      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d003      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2205      	movs	r2, #5
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	887a      	ldrh	r2, [r7, #2]
 80063fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	887a      	ldrh	r2, [r7, #2]
 8006410:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d007      	beq.n	8006442 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644a:	d17e      	bne.n	800654a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_SPI_TransmitReceive+0xf6>
 8006454:	8afb      	ldrh	r3, [r7, #22]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d16c      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647e:	e059      	b.n	8006534 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d11b      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x162>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d016      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x162>
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	2b01      	cmp	r3, #1
 800649c:	d113      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	881a      	ldrh	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	1c9a      	adds	r2, r3, #2
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d119      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x1a4>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d014      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	b292      	uxth	r2, r2
 80064ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006504:	2301      	movs	r3, #1
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006508:	f7fb fc10 	bl	8001d2c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006514:	429a      	cmp	r2, r3
 8006516:	d80d      	bhi.n	8006534 <HAL_SPI_TransmitReceive+0x1d0>
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d009      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e0bc      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1a0      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x11c>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d19b      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x11c>
 8006548:	e082      	b.n	8006650 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x1f4>
 8006552:	8afb      	ldrh	r3, [r7, #22]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d171      	bne.n	800663c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657e:	e05d      	b.n	800663c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d11c      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x264>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d017      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x264>
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	2b01      	cmp	r3, #1
 800659c:	d114      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d119      	bne.n	800660a <HAL_SPI_TransmitReceive+0x2a6>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d014      	beq.n	800660a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006606:	2301      	movs	r3, #1
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800660a:	f7fb fb8f 	bl	8001d2c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006616:	429a      	cmp	r2, r3
 8006618:	d803      	bhi.n	8006622 <HAL_SPI_TransmitReceive+0x2be>
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d102      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x2c4>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e038      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d19c      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x21c>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d197      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fd35 	bl	80070c4 <SPI_EndRxTxTransaction>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e01d      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80066ac:	2300      	movs	r3, #0
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	@ 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
 80066d4:	e097      	b.n	8006806 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_SPI_Transmit_DMA+0x2a>
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e08f      	b.n	8006806 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_SPI_Transmit_DMA+0x3c>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e088      	b.n	8006806 <HAL_SPI_Transmit_DMA+0x14e>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2203      	movs	r2, #3
 8006700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006742:	d10f      	bne.n	8006764 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006768:	4a29      	ldr	r2, [pc, #164]	@ (8006810 <HAL_SPI_Transmit_DMA+0x158>)
 800676a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006770:	4a28      	ldr	r2, [pc, #160]	@ (8006814 <HAL_SPI_Transmit_DMA+0x15c>)
 8006772:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006778:	4a27      	ldr	r2, [pc, #156]	@ (8006818 <HAL_SPI_Transmit_DMA+0x160>)
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006780:	2200      	movs	r2, #0
 8006782:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678c:	4619      	mov	r1, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800679a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800679c:	f7fc f9aa 	bl	8002af4 <HAL_DMA_Start_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	f043 0210 	orr.w	r2, r3, #16
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e023      	b.n	8006806 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0220 	orr.w	r2, r2, #32
 80067f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0202 	orr.w	r2, r2, #2
 8006802:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	08006e53 	.word	0x08006e53
 8006814:	08006c79 	.word	0x08006c79
 8006818:	08006ea7 	.word	0x08006ea7

0800681c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006830:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d00c      	beq.n	8006858 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006844:	d106      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0x38>
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d001      	beq.n	8006858 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
 8006856:	e0cf      	b.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0c4      	b.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006878:	2302      	movs	r3, #2
 800687a:	e0bd      	b.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b04      	cmp	r3, #4
 800688e:	d003      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2205      	movs	r2, #5
 8006894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	887a      	ldrh	r2, [r7, #2]
 80068ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	887a      	ldrh	r2, [r7, #2]
 80068c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d108      	bne.n	80068ec <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068de:	4a48      	ldr	r2, [pc, #288]	@ (8006a00 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80068e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e6:	4a47      	ldr	r2, [pc, #284]	@ (8006a04 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80068ea:	e007      	b.n	80068fc <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f0:	4a45      	ldr	r2, [pc, #276]	@ (8006a08 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80068f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f8:	4a44      	ldr	r2, [pc, #272]	@ (8006a0c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80068fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006900:	4a43      	ldr	r2, [pc, #268]	@ (8006a10 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006908:	2200      	movs	r2, #0
 800690a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	4619      	mov	r1, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006922:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006924:	f7fc f8e6 	bl	8002af4 <HAL_DMA_Start_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006932:	f043 0210 	orr.w	r2, r3, #16
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e058      	b.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695a:	2200      	movs	r2, #0
 800695c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006962:	2200      	movs	r2, #0
 8006964:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	2200      	movs	r2, #0
 8006974:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697e:	4619      	mov	r1, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800698c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800698e:	f7fc f8b1 	bl	8002af4 <HAL_DMA_Start_IT>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	f043 0210 	orr.w	r2, r3, #16
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e023      	b.n	80069f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b40      	cmp	r3, #64	@ 0x40
 80069bc:	d007      	beq.n	80069ce <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0220 	orr.w	r2, r2, #32
 80069e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0202 	orr.w	r2, r2, #2
 80069f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	08006e6f 	.word	0x08006e6f
 8006a04:	08006d1f 	.word	0x08006d1f
 8006a08:	08006e8b 	.word	0x08006e8b
 8006a0c:	08006dc5 	.word	0x08006dc5
 8006a10:	08006ea7 	.word	0x08006ea7

08006a14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	099b      	lsrs	r3, r3, #6
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10f      	bne.n	8006a58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	099b      	lsrs	r3, r3, #6
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
    return;
 8006a56:	e0be      	b.n	8006bd6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_SPI_IRQHandler+0x66>
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
    return;
 8006a78:	e0ad      	b.n	8006bd6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_SPI_IRQHandler+0x80>
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	099b      	lsrs	r3, r3, #6
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80a1 	beq.w	8006bd6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 809a 	beq.w	8006bd6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	099b      	lsrs	r3, r3, #6
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d023      	beq.n	8006af6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d011      	beq.n	8006ade <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	e00b      	b.n	8006af6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
        return;
 8006af4:	e06f      	b.n	8006bd6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d014      	beq.n	8006b2c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d04f      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <HAL_SPI_IRQHandler+0x14c>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d034      	beq.n	8006bca <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0203 	bic.w	r2, r2, #3
 8006b6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d011      	beq.n	8006b9c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b7c:	4a17      	ldr	r2, [pc, #92]	@ (8006bdc <HAL_SPI_IRQHandler+0x1c8>)
 8006b7e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fc f851 	bl	8002c2c <HAL_DMA_Abort_IT>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8006bdc <HAL_SPI_IRQHandler+0x1c8>)
 8006baa:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fc f83b 	bl	8002c2c <HAL_DMA_Abort_IT>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006bc8:	e003      	b.n	8006bd2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f83e 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bd0:	e000      	b.n	8006bd4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006bd2:	bf00      	nop
    return;
 8006bd4:	bf00      	nop
  }
}
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08006ee7 	.word	0x08006ee7

08006be0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr

08006c4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c6c:	b2db      	uxtb	r3, r3
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c86:	f7fb f851 	bl	8001d2c <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d03b      	beq.n	8006d12 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0220 	bic.w	r2, r2, #32
 8006ca8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0202 	bic.w	r2, r2, #2
 8006cb8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	2164      	movs	r1, #100	@ 0x64
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f000 fa00 	bl	80070c4 <SPI_EndRxTxTransaction>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d0a:	6978      	ldr	r0, [r7, #20]
 8006d0c:	f7ff ff9e 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d10:	e002      	b.n	8006d18 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d12:	6978      	ldr	r0, [r7, #20]
 8006d14:	f7ff ff64 	bl	8006be0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d2c:	f7fa fffe 	bl	8001d2c <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d03b      	beq.n	8006db8 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0220 	bic.w	r2, r2, #32
 8006d4e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10d      	bne.n	8006d74 <SPI_DMAReceiveCplt+0x56>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d60:	d108      	bne.n	8006d74 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0203 	bic.w	r2, r2, #3
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	e007      	b.n	8006d84 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	2164      	movs	r1, #100	@ 0x64
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f949 	bl	8007020 <SPI_EndRxTransaction>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff ff4b 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006db6:	e002      	b.n	8006dbe <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff ff1a 	bl	8006bf2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dd2:	f7fa ffab 	bl	8001d2c <HAL_GetTick>
 8006dd6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d02f      	beq.n	8006e46 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0220 	bic.w	r2, r2, #32
 8006df4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	2164      	movs	r1, #100	@ 0x64
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f962 	bl	80070c4 <SPI_EndRxTxTransaction>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0a:	f043 0220 	orr.w	r2, r3, #32
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0203 	bic.w	r2, r2, #3
 8006e20:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff ff04 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e44:	e002      	b.n	8006e4c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fedc 	bl	8006c04 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fed8 	bl	8006c16 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff fed3 	bl	8006c28 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff fece 	bl	8006c3a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0203 	bic.w	r2, r2, #3
 8006ec2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec8:	f043 0210 	orr.w	r2, r3, #16
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff feb7 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff fea3 	bl	8006c4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f20:	f7fa ff04 	bl	8001d2c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f30:	f7fa fefc 	bl	8001d2c <HAL_GetTick>
 8006f34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f36:	4b39      	ldr	r3, [pc, #228]	@ (800701c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	015b      	lsls	r3, r3, #5
 8006f3c:	0d1b      	lsrs	r3, r3, #20
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f46:	e054      	b.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4e:	d050      	beq.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f50:	f7fa feec 	bl	8001d2c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d902      	bls.n	8006f66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d13d      	bne.n	8006fe2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f7e:	d111      	bne.n	8006fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f88:	d004      	beq.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f92:	d107      	bne.n	8006fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fac:	d10f      	bne.n	8006fce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e017      	b.n	8007012 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d19b      	bne.n	8006f48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000000 	.word	0x20000000

08007020 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007034:	d111      	bne.n	800705a <SPI_EndRxTransaction+0x3a>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800703e:	d004      	beq.n	800704a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007048:	d107      	bne.n	800705a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007058:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007062:	d117      	bne.n	8007094 <SPI_EndRxTransaction+0x74>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706c:	d112      	bne.n	8007094 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	2101      	movs	r1, #1
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff49 	bl	8006f10 <SPI_WaitFlagStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01a      	beq.n	80070ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e013      	b.n	80070bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff36 	bl	8006f10 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e000      	b.n	80070bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2201      	movs	r2, #1
 80070d8:	2102      	movs	r1, #2
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff ff18 	bl	8006f10 <SPI_WaitFlagStateUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e013      	b.n	800711e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2200      	movs	r2, #0
 80070fe:	2180      	movs	r1, #128	@ 0x80
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ff05 	bl	8006f10 <SPI_WaitFlagStateUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e000      	b.n	800711e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e041      	b.n	80071bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fa fccb 	bl	8001ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f000 fa5b 	bl	8007620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d001      	beq.n	80071dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e03a      	b.n	8007252 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a18      	ldr	r2, [pc, #96]	@ (800725c <HAL_TIM_Base_Start_IT+0x98>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00e      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007206:	d009      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a14      	ldr	r2, [pc, #80]	@ (8007260 <HAL_TIM_Base_Start_IT+0x9c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x58>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a13      	ldr	r2, [pc, #76]	@ (8007264 <HAL_TIM_Base_Start_IT+0xa0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d111      	bne.n	8007240 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b06      	cmp	r3, #6
 800722c:	d010      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	e007      	b.n	8007250 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800

08007268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01b      	beq.n	80072cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0202 	mvn.w	r2, #2
 800729c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f998 	bl	80075e8 <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f98b 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f99a 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d020      	beq.n	8007318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01b      	beq.n	8007318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0204 	mvn.w	r2, #4
 80072e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f972 	bl	80075e8 <HAL_TIM_IC_CaptureCallback>
 8007304:	e005      	b.n	8007312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f965 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f974 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d020      	beq.n	8007364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01b      	beq.n	8007364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0208 	mvn.w	r2, #8
 8007334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2204      	movs	r2, #4
 800733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f94c 	bl	80075e8 <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f93f 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f94e 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b00      	cmp	r3, #0
 800736c:	d020      	beq.n	80073b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01b      	beq.n	80073b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0210 	mvn.w	r2, #16
 8007380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2208      	movs	r2, #8
 8007386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f926 	bl	80075e8 <HAL_TIM_IC_CaptureCallback>
 800739c:	e005      	b.n	80073aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f919 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f928 	bl	80075fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0201 	mvn.w	r2, #1
 80073cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7f9 fba6 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa7f 	bl	80078f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00c      	beq.n	800741c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f8f8 	bl	800760c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00c      	beq.n	8007440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0220 	mvn.w	r2, #32
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa52 	bl	80078e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_TIM_ConfigClockSource+0x1c>
 8007460:	2302      	movs	r3, #2
 8007462:	e0b4      	b.n	80075ce <HAL_TIM_ConfigClockSource+0x186>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800748a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800749c:	d03e      	beq.n	800751c <HAL_TIM_ConfigClockSource+0xd4>
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a2:	f200 8087 	bhi.w	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074aa:	f000 8086 	beq.w	80075ba <HAL_TIM_ConfigClockSource+0x172>
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b2:	d87f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b4:	2b70      	cmp	r3, #112	@ 0x70
 80074b6:	d01a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0xa6>
 80074b8:	2b70      	cmp	r3, #112	@ 0x70
 80074ba:	d87b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074bc:	2b60      	cmp	r3, #96	@ 0x60
 80074be:	d050      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x11a>
 80074c0:	2b60      	cmp	r3, #96	@ 0x60
 80074c2:	d877      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b50      	cmp	r3, #80	@ 0x50
 80074c6:	d03c      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0xfa>
 80074c8:	2b50      	cmp	r3, #80	@ 0x50
 80074ca:	d873      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	d058      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x13a>
 80074d0:	2b40      	cmp	r3, #64	@ 0x40
 80074d2:	d86f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b30      	cmp	r3, #48	@ 0x30
 80074d6:	d064      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074d8:	2b30      	cmp	r3, #48	@ 0x30
 80074da:	d86b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d060      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d867      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d05c      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d05a      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	e062      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074fe:	f000 f974 	bl	80077ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	609a      	str	r2, [r3, #8]
      break;
 800751a:	e04f      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800752c:	f000 f95d 	bl	80077ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800753e:	609a      	str	r2, [r3, #8]
      break;
 8007540:	e03c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	461a      	mov	r2, r3
 8007550:	f000 f8d4 	bl	80076fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2150      	movs	r1, #80	@ 0x50
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f92b 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8007560:	e02c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800756e:	461a      	mov	r2, r3
 8007570:	f000 f8f2 	bl	8007758 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2160      	movs	r1, #96	@ 0x60
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f91b 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8007580:	e01c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758e:	461a      	mov	r2, r3
 8007590:	f000 f8b4 	bl	80076fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2140      	movs	r1, #64	@ 0x40
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f90b 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 80075a0:	e00c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f000 f902 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 80075b2:	e003      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
      break;
 80075b8:	e000      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr

080075fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
	...

08007620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2f      	ldr	r2, [pc, #188]	@ (80076f0 <TIM_Base_SetConfig+0xd0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x30>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x30>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2c      	ldr	r2, [pc, #176]	@ (80076f4 <TIM_Base_SetConfig+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x30>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2b      	ldr	r2, [pc, #172]	@ (80076f8 <TIM_Base_SetConfig+0xd8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a22      	ldr	r2, [pc, #136]	@ (80076f0 <TIM_Base_SetConfig+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0x62>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0x62>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1f      	ldr	r2, [pc, #124]	@ (80076f4 <TIM_Base_SetConfig+0xd4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0x62>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1e      	ldr	r2, [pc, #120]	@ (80076f8 <TIM_Base_SetConfig+0xd8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a0d      	ldr	r2, [pc, #52]	@ (80076f0 <TIM_Base_SetConfig+0xd0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d103      	bne.n	80076c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]
  }
}
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800

080076fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f023 030a 	bic.w	r3, r3, #10
 8007738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	031b      	lsls	r3, r3, #12
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007794:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	621a      	str	r2, [r3, #32]
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f043 0307 	orr.w	r3, r3, #7
 80077d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr

080077ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007804:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	021a      	lsls	r2, r3, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	431a      	orrs	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4313      	orrs	r3, r2
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	609a      	str	r2, [r3, #8]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr

08007828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800783c:	2302      	movs	r3, #2
 800783e:	e046      	b.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a16      	ldr	r2, [pc, #88]	@ (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00e      	beq.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788c:	d009      	beq.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a12      	ldr	r2, [pc, #72]	@ (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d004      	beq.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a10      	ldr	r2, [pc, #64]	@ (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10c      	bne.n	80078bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr
 80078d8:	40012c00 	.word	0x40012c00
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800

080078e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr

080078f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e042      	b.n	80079a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fa f92a 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	@ 0x24
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800794a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc7f 	bl	8008250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695a      	ldr	r2, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0ba      	sub	sp, #232	@ 0xe8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10f      	bne.n	8007a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_UART_IRQHandler+0x66>
 80079fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb63 	bl	80080d2 <UART_Receive_IT>
      return;
 8007a0c:	e25b      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80de 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x22c>
 8007a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80d1 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <HAL_UART_IRQHandler+0xae>
 8007a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <HAL_UART_IRQHandler+0xd2>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a72:	f043 0202 	orr.w	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <HAL_UART_IRQHandler+0xf6>
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a96:	f043 0204 	orr.w	r2, r3, #4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d011      	beq.n	8007ace <HAL_UART_IRQHandler+0x126>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac6:	f043 0208 	orr.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 81f2 	beq.w	8007ebc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_UART_IRQHandler+0x14e>
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 faee 	bl	80080d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <HAL_UART_IRQHandler+0x17a>
 8007b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d04f      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9f8 	bl	8007f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d041      	beq.n	8007bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1d9      	bne.n	8007b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d013      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d88 <HAL_UART_IRQHandler+0x3e0>)
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fb f848 	bl	8002c2c <HAL_DMA_Abort_IT>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	e00e      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f99c 	bl	8007ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	e00a      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f998 	bl	8007ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc0:	e006      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f994 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bce:	e175      	b.n	8007ebc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	bf00      	nop
    return;
 8007bd2:	e173      	b.n	8007ebc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	f040 814f 	bne.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8148 	beq.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8141 	beq.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
 8007c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80b6 	beq.w	8007d8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8145 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	f080 813e 	bcs.w	8007ec0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	f000 8088 	beq.w	8007d68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1d9      	bne.n	8007c58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cc8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e1      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e3      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa ff26 	bl	8002bb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8bf 	bl	8007f02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d84:	e09c      	b.n	8007ec0 <HAL_UART_IRQHandler+0x518>
 8007d86:	bf00      	nop
 8007d88:	08007fdd 	.word	0x08007fdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 808e 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8089 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	330c      	adds	r3, #12
 8007db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007dd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007dd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e3      	bne.n	8007dea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e3      	bne.n	8007e30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f844 	bl	8007f02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e7a:	e023      	b.n	8007ec4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <HAL_UART_IRQHandler+0x4f4>
 8007e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8b5 	bl	8008004 <UART_Transmit_IT>
    return;
 8007e9a:	e014      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
 8007ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8f4 	bl	80080a2 <UART_EndTransmit_IT>
    return;
 8007eba:	e004      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ebc:	bf00      	nop
 8007ebe:	e002      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec4:	bf00      	nop
  }
}
 8007ec6:	37e8      	adds	r7, #232	@ 0xe8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr

08007f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b095      	sub	sp, #84	@ 0x54
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	330c      	adds	r3, #12
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f40:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3314      	adds	r3, #20
 8007f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3314      	adds	r3, #20
 8007f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e5      	bne.n	8007f54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d119      	bne.n	8007fc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f023 0310 	bic.w	r3, r3, #16
 8007fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	330c      	adds	r3, #12
 8007fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fb0:	61ba      	str	r2, [r7, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6979      	ldr	r1, [r7, #20]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e5      	bne.n	8007f90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007fd2:	bf00      	nop
 8007fd4:	3754      	adds	r7, #84	@ 0x54
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff ff7a 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b21      	cmp	r3, #33	@ 0x21
 8008016:	d13e      	bne.n	8008096 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008020:	d114      	bne.n	800804c <UART_Transmit_IT+0x48>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d110      	bne.n	800804c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800803e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	1c9a      	adds	r2, r3, #2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]
 800804a:	e008      	b.n	800805e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	1c59      	adds	r1, r3, #1
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6211      	str	r1, [r2, #32]
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29b      	uxth	r3, r3
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4619      	mov	r1, r3
 800806c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10f      	bne.n	8008092 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008080:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008090:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff ff02 	bl	8007ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b08c      	sub	sp, #48	@ 0x30
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b22      	cmp	r3, #34	@ 0x22
 80080e4:	f040 80ae 	bne.w	8008244 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f0:	d117      	bne.n	8008122 <UART_Receive_IT+0x50>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d113      	bne.n	8008122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008110:	b29a      	uxth	r2, r3
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	1c9a      	adds	r2, r3, #2
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008120:	e026      	b.n	8008170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008134:	d007      	beq.n	8008146 <UART_Receive_IT+0x74>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <UART_Receive_IT+0x82>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e008      	b.n	8008166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008160:	b2da      	uxtb	r2, r3
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4619      	mov	r1, r3
 800817e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008180:	2b00      	cmp	r3, #0
 8008182:	d15d      	bne.n	8008240 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0220 	bic.w	r2, r2, #32
 8008192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0201 	bic.w	r2, r2, #1
 80081b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d135      	bne.n	8008236 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	613b      	str	r3, [r7, #16]
   return(result);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f023 0310 	bic.w	r3, r3, #16
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f0:	623a      	str	r2, [r7, #32]
 80081f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	69f9      	ldr	r1, [r7, #28]
 80081f6:	6a3a      	ldr	r2, [r7, #32]
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e5      	bne.n	80081d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	2b10      	cmp	r3, #16
 8008210:	d10a      	bne.n	8008228 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fe67 	bl	8007f02 <HAL_UARTEx_RxEventCallback>
 8008234:	e002      	b.n	800823c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fe51 	bl	8007ede <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	e002      	b.n	8008246 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3730      	adds	r7, #48	@ 0x30
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800828a:	f023 030c 	bic.w	r3, r3, #12
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	430b      	orrs	r3, r1
 8008296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008364 <UART_SetConfig+0x114>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d103      	bne.n	80082c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082b8:	f7fd fe32 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	e002      	b.n	80082c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082c0:	f7fd fe1a 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 80082c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009a      	lsls	r2, r3, #2
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	4a22      	ldr	r2, [pc, #136]	@ (8008368 <UART_SetConfig+0x118>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	0119      	lsls	r1, r3, #4
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009a      	lsls	r2, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80082fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008368 <UART_SetConfig+0x118>)
 80082fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	2064      	movs	r0, #100	@ 0x64
 8008306:	fb00 f303 	mul.w	r3, r0, r3
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	3332      	adds	r3, #50	@ 0x32
 8008310:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <UART_SetConfig+0x118>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800831c:	4419      	add	r1, r3
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009a      	lsls	r2, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	fbb2 f2f3 	udiv	r2, r2, r3
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <UART_SetConfig+0x118>)
 8008336:	fba3 0302 	umull	r0, r3, r3, r2
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	2064      	movs	r0, #100	@ 0x64
 800833e:	fb00 f303 	mul.w	r3, r0, r3
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	3332      	adds	r3, #50	@ 0x32
 8008348:	4a07      	ldr	r2, [pc, #28]	@ (8008368 <UART_SetConfig+0x118>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	f003 020f 	and.w	r2, r3, #15
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	440a      	add	r2, r1
 800835a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	40013800 	.word	0x40013800
 8008368:	51eb851f 	.word	0x51eb851f

0800836c <OLED_Init>:
  * @function: void OLED_Init(void)
  * @description: OLED初始化
  * @return {*}
  */
 void OLED_Init(void)
 {
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0

     uint8_t i = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	71fb      	strb	r3, [r7, #7]
     for(i=0; i<23; i++)
 8008376:	2300      	movs	r3, #0
 8008378:	71fb      	strb	r3, [r7, #7]
 800837a:	e008      	b.n	800838e <OLED_Init+0x22>
     {
         Oled_WriteCommand(init_cmds[i]);
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	4a08      	ldr	r2, [pc, #32]	@ (80083a0 <OLED_Init+0x34>)
 8008380:	5cd3      	ldrb	r3, [r2, r3]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f80e 	bl	80083a4 <Oled_WriteCommand>
     for(i=0; i<23; i++)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	3301      	adds	r3, #1
 800838c:	71fb      	strb	r3, [r7, #7]
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b16      	cmp	r3, #22
 8008392:	d9f3      	bls.n	800837c <OLED_Init+0x10>
     }
     OLED_Clear();
 8008394:	f000 f82c 	bl	80083f0 <OLED_Clear>
 }
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	2000000c 	.word	0x2000000c

080083a4 <Oled_WriteCommand>:
  * @description: 向设备写控制命令
  * @param {uint8_t} cmd 芯片手册规定的命令
  * @return {*}
  */
 void Oled_WriteCommand(uint8_t cmd)
 {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteCommand(&hi2c1, OLED_I2C_ADDRESS, OLED_CMD, cmd);
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	2200      	movs	r2, #0
 80083b2:	213c      	movs	r1, #60	@ 0x3c
 80083b4:	4803      	ldr	r0, [pc, #12]	@ (80083c4 <Oled_WriteCommand+0x20>)
 80083b6:	f7f8 f98f 	bl	80006d8 <HAL_I2C_WriteCommand>
 }
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000108 	.word	0x20000108

080083c8 <Oled_WriteData>:
  * @description: 向设备写控制数据
  * @param {uint8_t} data 数据
  * @return {*}
  */
 void Oled_WriteData(uint8_t data)
 {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteData(&hi2c1 ,OLED_I2C_ADDRESS,OLED_DATA,&data,1);
 80083d2:	1dfb      	adds	r3, r7, #7
 80083d4:	2201      	movs	r2, #1
 80083d6:	9200      	str	r2, [sp, #0]
 80083d8:	2240      	movs	r2, #64	@ 0x40
 80083da:	213c      	movs	r1, #60	@ 0x3c
 80083dc:	4803      	ldr	r0, [pc, #12]	@ (80083ec <Oled_WriteData+0x24>)
 80083de:	f7f8 f9a3 	bl	8000728 <HAL_I2C_WriteData>
 }
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000108 	.word	0x20000108

080083f0 <OLED_Clear>:
  * @function: OLED_Clear(void)
  * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
  * @return {*}
  */
 void OLED_Clear(void)
 {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
     uint8_t i,n;
     for(i=0;i<8;i++)
 80083f6:	2300      	movs	r3, #0
 80083f8:	71fb      	strb	r3, [r7, #7]
 80083fa:	e01e      	b.n	800843a <OLED_Clear+0x4a>
     {
         Oled_WriteCommand (0xb0+i);    //设置页地址（0~7）
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	3b50      	subs	r3, #80	@ 0x50
 8008400:	b2db      	uxtb	r3, r3
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff ffce 	bl	80083a4 <Oled_WriteCommand>
         Oled_WriteCommand(0x00);      //设置显示位置—列低地址
 8008408:	2000      	movs	r0, #0
 800840a:	f7ff ffcb 	bl	80083a4 <Oled_WriteCommand>
         Oled_WriteCommand(0x10);      //设置显示位置—列高地址
 800840e:	2010      	movs	r0, #16
 8008410:	f7ff ffc8 	bl	80083a4 <Oled_WriteCommand>
         Oled_WriteCommand(0x2e);
 8008414:	202e      	movs	r0, #46	@ 0x2e
 8008416:	f7ff ffc5 	bl	80083a4 <Oled_WriteCommand>
         for(n=0;n<128;n++)
 800841a:	2300      	movs	r3, #0
 800841c:	71bb      	strb	r3, [r7, #6]
 800841e:	e005      	b.n	800842c <OLED_Clear+0x3c>
             Oled_WriteData(0);
 8008420:	2000      	movs	r0, #0
 8008422:	f7ff ffd1 	bl	80083c8 <Oled_WriteData>
         for(n=0;n<128;n++)
 8008426:	79bb      	ldrb	r3, [r7, #6]
 8008428:	3301      	adds	r3, #1
 800842a:	71bb      	strb	r3, [r7, #6]
 800842c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	daf5      	bge.n	8008420 <OLED_Clear+0x30>
     for(i=0;i<8;i++)
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	3301      	adds	r3, #1
 8008438:	71fb      	strb	r3, [r7, #7]
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b07      	cmp	r3, #7
 800843e:	d9dd      	bls.n	80083fc <OLED_Clear+0xc>
     }
 }
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <OLED_Set_Pos>:
  * @description: 坐标设置
  * @param {uint8_t} x,y
  * @return {*}
  */
 void OLED_Set_Pos(uint8_t x, uint8_t y)
 {
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	460a      	mov	r2, r1
 8008454:	71fb      	strb	r3, [r7, #7]
 8008456:	4613      	mov	r3, r2
 8008458:	71bb      	strb	r3, [r7, #6]
     Oled_WriteCommand(0xb0+y);    //设置页地址（0~7）
 800845a:	79bb      	ldrb	r3, [r7, #6]
 800845c:	3b50      	subs	r3, #80	@ 0x50
 800845e:	b2db      	uxtb	r3, r3
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff9f 	bl	80083a4 <Oled_WriteCommand>
     Oled_WriteCommand(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8008466:	79fb      	ldrb	r3, [r7, #7]
 8008468:	091b      	lsrs	r3, r3, #4
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f043 0310 	orr.w	r3, r3, #16
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff ff96 	bl	80083a4 <Oled_WriteCommand>
     Oled_WriteCommand(x&0x0f);    //设置显示位置—列低地址
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	b2db      	uxtb	r3, r3
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff ff8f 	bl	80083a4 <Oled_WriteCommand>
 }
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <OLED_ShowChar>:
  * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
 {
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	461a      	mov	r2, r3
 800849e:	4623      	mov	r3, r4
 80084a0:	71fb      	strb	r3, [r7, #7]
 80084a2:	4603      	mov	r3, r0
 80084a4:	71bb      	strb	r3, [r7, #6]
 80084a6:	460b      	mov	r3, r1
 80084a8:	717b      	strb	r3, [r7, #5]
 80084aa:	4613      	mov	r3, r2
 80084ac:	713b      	strb	r3, [r7, #4]
     unsigned char c=0,i=0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73bb      	strb	r3, [r7, #14]
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
         c=chr-' ';//得到偏移后的值
 80084b6:	797b      	ldrb	r3, [r7, #5]
 80084b8:	3b20      	subs	r3, #32
 80084ba:	73bb      	strb	r3, [r7, #14]
         if(x>128-1){x=0;y=y+2;}
 80084bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da04      	bge.n	80084ce <OLED_ShowChar+0x3e>
 80084c4:	2300      	movs	r3, #0
 80084c6:	71fb      	strb	r3, [r7, #7]
 80084c8:	79bb      	ldrb	r3, [r7, #6]
 80084ca:	3302      	adds	r3, #2
 80084cc:	71bb      	strb	r3, [r7, #6]
         if(Char_Size ==16)
 80084ce:	793b      	ldrb	r3, [r7, #4]
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d154      	bne.n	800857e <OLED_ShowChar+0xee>
         {
             OLED_Set_Pos(x,y);
 80084d4:	79ba      	ldrb	r2, [r7, #6]
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff ffb5 	bl	800844a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	e01b      	b.n	800851e <OLED_ShowChar+0x8e>
                 {
                   if(Color_Turn)
 80084e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <OLED_ShowChar+0x76>
                       Oled_WriteData(~F8X16[c*16+i]);
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	011a      	lsls	r2, r3, #4
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	4413      	add	r3, r2
 80084f6:	4a3c      	ldr	r2, [pc, #240]	@ (80085e8 <OLED_ShowChar+0x158>)
 80084f8:	5cd3      	ldrb	r3, [r2, r3]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff ff62 	bl	80083c8 <Oled_WriteData>
 8008504:	e008      	b.n	8008518 <OLED_ShowChar+0x88>
                   else
                       Oled_WriteData(F8X16[c*16+i]);
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	011a      	lsls	r2, r3, #4
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	4413      	add	r3, r2
 800850e:	4a36      	ldr	r2, [pc, #216]	@ (80085e8 <OLED_ShowChar+0x158>)
 8008510:	5cd3      	ldrb	r3, [r2, r3]
 8008512:	4618      	mov	r0, r3
 8008514:	f7ff ff58 	bl	80083c8 <Oled_WriteData>
             for(i=0;i<8;i++)
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	3301      	adds	r3, #1
 800851c:	73fb      	strb	r3, [r7, #15]
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b07      	cmp	r3, #7
 8008522:	d9e0      	bls.n	80084e6 <OLED_ShowChar+0x56>
                 }
             OLED_Set_Pos(x,y+1);
 8008524:	79bb      	ldrb	r3, [r7, #6]
 8008526:	3301      	adds	r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff8b 	bl	800844a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
 8008538:	e01d      	b.n	8008576 <OLED_ShowChar+0xe6>
                 {
                   if(Color_Turn)
 800853a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <OLED_ShowChar+0xcc>
                       Oled_WriteData(~F8X16[c*16+i+8]);
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	011a      	lsls	r2, r3, #4
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	4413      	add	r3, r2
 800854a:	3308      	adds	r3, #8
 800854c:	4a26      	ldr	r2, [pc, #152]	@ (80085e8 <OLED_ShowChar+0x158>)
 800854e:	5cd3      	ldrb	r3, [r2, r3]
 8008550:	43db      	mvns	r3, r3
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff ff37 	bl	80083c8 <Oled_WriteData>
 800855a:	e009      	b.n	8008570 <OLED_ShowChar+0xe0>
                   else
                       Oled_WriteData(F8X16[c*16+i+8]);
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	011a      	lsls	r2, r3, #4
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	4413      	add	r3, r2
 8008564:	3308      	adds	r3, #8
 8008566:	4a20      	ldr	r2, [pc, #128]	@ (80085e8 <OLED_ShowChar+0x158>)
 8008568:	5cd3      	ldrb	r3, [r2, r3]
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ff2c 	bl	80083c8 <Oled_WriteData>
             for(i=0;i<8;i++)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	3301      	adds	r3, #1
 8008574:	73fb      	strb	r3, [r7, #15]
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b07      	cmp	r3, #7
 800857a:	d9de      	bls.n	800853a <OLED_ShowChar+0xaa>
                       Oled_WriteData(~F6x8[c][i]);
                   else
                       Oled_WriteData(F6x8[c][i]);
                 }
           }
 }
 800857c:	e02f      	b.n	80085de <OLED_ShowChar+0x14e>
                 OLED_Set_Pos(x,y);
 800857e:	79ba      	ldrb	r2, [r7, #6]
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff ff60 	bl	800844a <OLED_Set_Pos>
                 for(i=0;i<6;i++)
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	e023      	b.n	80085d8 <OLED_ShowChar+0x148>
                   if(Color_Turn)
 8008590:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00f      	beq.n	80085b8 <OLED_ShowChar+0x128>
                       Oled_WriteData(~F6x8[c][i]);
 8008598:	7bba      	ldrb	r2, [r7, #14]
 800859a:	7bf9      	ldrb	r1, [r7, #15]
 800859c:	4813      	ldr	r0, [pc, #76]	@ (80085ec <OLED_ShowChar+0x15c>)
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4403      	add	r3, r0
 80085a8:	440b      	add	r3, r1
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff ff09 	bl	80083c8 <Oled_WriteData>
 80085b6:	e00c      	b.n	80085d2 <OLED_ShowChar+0x142>
                       Oled_WriteData(F6x8[c][i]);
 80085b8:	7bba      	ldrb	r2, [r7, #14]
 80085ba:	7bf9      	ldrb	r1, [r7, #15]
 80085bc:	480b      	ldr	r0, [pc, #44]	@ (80085ec <OLED_ShowChar+0x15c>)
 80085be:	4613      	mov	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4403      	add	r3, r0
 80085c8:	440b      	add	r3, r1
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fefb 	bl	80083c8 <Oled_WriteData>
                 for(i=0;i<6;i++)
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	3301      	adds	r3, #1
 80085d6:	73fb      	strb	r3, [r7, #15]
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d9d8      	bls.n	8008590 <OLED_ShowChar+0x100>
 }
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd90      	pop	{r4, r7, pc}
 80085e6:	bf00      	nop
 80085e8:	08009354 	.word	0x08009354
 80085ec:	0800912c 	.word	0x0800912c

080085f0 <OLED_ShowString>:
  * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
 {
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	603a      	str	r2, [r7, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	71fb      	strb	r3, [r7, #7]
 80085fe:	460b      	mov	r3, r1
 8008600:	71bb      	strb	r3, [r7, #6]
 8008602:	4613      	mov	r3, r2
 8008604:	717b      	strb	r3, [r7, #5]
     uint8_t  j=0;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800860a:	e02f      	b.n	800866c <OLED_ShowString+0x7c>
     {       OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4413      	add	r3, r2
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	797c      	ldrb	r4, [r7, #5]
 8008616:	79b9      	ldrb	r1, [r7, #6]
 8008618:	79f8      	ldrb	r0, [r7, #7]
 800861a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	4623      	mov	r3, r4
 8008622:	f7ff ff35 	bl	8008490 <OLED_ShowChar>
             if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8008626:	797b      	ldrb	r3, [r7, #5]
 8008628:	2b0c      	cmp	r3, #12
 800862a:	d103      	bne.n	8008634 <OLED_ShowString+0x44>
                 x += 6;
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	3306      	adds	r3, #6
 8008630:	71fb      	strb	r3, [r7, #7]
 8008632:	e002      	b.n	800863a <OLED_ShowString+0x4a>
             else  //8X16的字体列加8，显示下一个字符
                 x += 8;
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	3308      	adds	r3, #8
 8008638:	71fb      	strb	r3, [r7, #7]

             if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	2b7a      	cmp	r3, #122	@ 0x7a
 800863e:	d907      	bls.n	8008650 <OLED_ShowString+0x60>
 8008640:	797b      	ldrb	r3, [r7, #5]
 8008642:	2b0c      	cmp	r3, #12
 8008644:	d104      	bne.n	8008650 <OLED_ShowString+0x60>
             {
                 x = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	71fb      	strb	r3, [r7, #7]
                 y++;
 800864a:	79bb      	ldrb	r3, [r7, #6]
 800864c:	3301      	adds	r3, #1
 800864e:	71bb      	strb	r3, [r7, #6]
             }
             if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b78      	cmp	r3, #120	@ 0x78
 8008654:	d907      	bls.n	8008666 <OLED_ShowString+0x76>
 8008656:	797b      	ldrb	r3, [r7, #5]
 8008658:	2b10      	cmp	r3, #16
 800865a:	d104      	bne.n	8008666 <OLED_ShowString+0x76>
             {
                 x = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	71fb      	strb	r3, [r7, #7]
                 y++;
 8008660:	79bb      	ldrb	r3, [r7, #6]
 8008662:	3301      	adds	r3, #1
 8008664:	71bb      	strb	r3, [r7, #6]
             }
             j++;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	3301      	adds	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4413      	add	r3, r2
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1c9      	bne.n	800860c <OLED_ShowString+0x1c>
     }
     clean++;
 8008678:	4b04      	ldr	r3, [pc, #16]	@ (800868c <OLED_ShowString+0x9c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a03      	ldr	r2, [pc, #12]	@ (800868c <OLED_ShowString+0x9c>)
 8008680:	6013      	str	r3, [r2, #0]
 }
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	bd90      	pop	{r4, r7, pc}
 800868a:	bf00      	nop
 800868c:	20000488 	.word	0x20000488

08008690 <sniprintf>:
 8008690:	b40c      	push	{r2, r3}
 8008692:	b530      	push	{r4, r5, lr}
 8008694:	4b18      	ldr	r3, [pc, #96]	@ (80086f8 <sniprintf+0x68>)
 8008696:	1e0c      	subs	r4, r1, #0
 8008698:	681d      	ldr	r5, [r3, #0]
 800869a:	b09d      	sub	sp, #116	@ 0x74
 800869c:	da08      	bge.n	80086b0 <sniprintf+0x20>
 800869e:	238b      	movs	r3, #139	@ 0x8b
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	b01d      	add	sp, #116	@ 0x74
 80086a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ac:	b002      	add	sp, #8
 80086ae:	4770      	bx	lr
 80086b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80086b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80086be:	bf0c      	ite	eq
 80086c0:	4623      	moveq	r3, r4
 80086c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086c6:	9304      	str	r3, [sp, #16]
 80086c8:	9307      	str	r3, [sp, #28]
 80086ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086ce:	9002      	str	r0, [sp, #8]
 80086d0:	9006      	str	r0, [sp, #24]
 80086d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086d6:	4628      	mov	r0, r5
 80086d8:	ab21      	add	r3, sp, #132	@ 0x84
 80086da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086dc:	a902      	add	r1, sp, #8
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	f000 f9c2 	bl	8008a68 <_svfiprintf_r>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	bfbc      	itt	lt
 80086e8:	238b      	movlt	r3, #139	@ 0x8b
 80086ea:	602b      	strlt	r3, [r5, #0]
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	d0da      	beq.n	80086a6 <sniprintf+0x16>
 80086f0:	2200      	movs	r2, #0
 80086f2:	9b02      	ldr	r3, [sp, #8]
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e7d6      	b.n	80086a6 <sniprintf+0x16>
 80086f8:	20000024 	.word	0x20000024

080086fc <siprintf>:
 80086fc:	b40e      	push	{r1, r2, r3}
 80086fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008702:	b510      	push	{r4, lr}
 8008704:	2400      	movs	r4, #0
 8008706:	b09d      	sub	sp, #116	@ 0x74
 8008708:	ab1f      	add	r3, sp, #124	@ 0x7c
 800870a:	9002      	str	r0, [sp, #8]
 800870c:	9006      	str	r0, [sp, #24]
 800870e:	9107      	str	r1, [sp, #28]
 8008710:	9104      	str	r1, [sp, #16]
 8008712:	4809      	ldr	r0, [pc, #36]	@ (8008738 <siprintf+0x3c>)
 8008714:	4909      	ldr	r1, [pc, #36]	@ (800873c <siprintf+0x40>)
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	9105      	str	r1, [sp, #20]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	a902      	add	r1, sp, #8
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008724:	f000 f9a0 	bl	8008a68 <_svfiprintf_r>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	701c      	strb	r4, [r3, #0]
 800872c:	b01d      	add	sp, #116	@ 0x74
 800872e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008732:	b003      	add	sp, #12
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000024 	.word	0x20000024
 800873c:	ffff0208 	.word	0xffff0208

08008740 <memset>:
 8008740:	4603      	mov	r3, r0
 8008742:	4402      	add	r2, r0
 8008744:	4293      	cmp	r3, r2
 8008746:	d100      	bne.n	800874a <memset+0xa>
 8008748:	4770      	bx	lr
 800874a:	f803 1b01 	strb.w	r1, [r3], #1
 800874e:	e7f9      	b.n	8008744 <memset+0x4>

08008750 <__errno>:
 8008750:	4b01      	ldr	r3, [pc, #4]	@ (8008758 <__errno+0x8>)
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000024 	.word	0x20000024

0800875c <__libc_init_array>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	2600      	movs	r6, #0
 8008760:	4d0c      	ldr	r5, [pc, #48]	@ (8008794 <__libc_init_array+0x38>)
 8008762:	4c0d      	ldr	r4, [pc, #52]	@ (8008798 <__libc_init_array+0x3c>)
 8008764:	1b64      	subs	r4, r4, r5
 8008766:	10a4      	asrs	r4, r4, #2
 8008768:	42a6      	cmp	r6, r4
 800876a:	d109      	bne.n	8008780 <__libc_init_array+0x24>
 800876c:	f000 fc76 	bl	800905c <_init>
 8008770:	2600      	movs	r6, #0
 8008772:	4d0a      	ldr	r5, [pc, #40]	@ (800879c <__libc_init_array+0x40>)
 8008774:	4c0a      	ldr	r4, [pc, #40]	@ (80087a0 <__libc_init_array+0x44>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	42a6      	cmp	r6, r4
 800877c:	d105      	bne.n	800878a <__libc_init_array+0x2e>
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	f855 3b04 	ldr.w	r3, [r5], #4
 8008784:	4798      	blx	r3
 8008786:	3601      	adds	r6, #1
 8008788:	e7ee      	b.n	8008768 <__libc_init_array+0xc>
 800878a:	f855 3b04 	ldr.w	r3, [r5], #4
 800878e:	4798      	blx	r3
 8008790:	3601      	adds	r6, #1
 8008792:	e7f2      	b.n	800877a <__libc_init_array+0x1e>
 8008794:	08009970 	.word	0x08009970
 8008798:	08009970 	.word	0x08009970
 800879c:	08009970 	.word	0x08009970
 80087a0:	08009974 	.word	0x08009974

080087a4 <__retarget_lock_acquire_recursive>:
 80087a4:	4770      	bx	lr

080087a6 <__retarget_lock_release_recursive>:
 80087a6:	4770      	bx	lr

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	4291      	cmp	r1, r2
 80087ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b0:	d100      	bne.n	80087b4 <memcpy+0xc>
 80087b2:	4770      	bx	lr
 80087b4:	b510      	push	{r4, lr}
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c0:	d1f9      	bne.n	80087b6 <memcpy+0xe>
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <_free_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4605      	mov	r5, r0
 80087c8:	2900      	cmp	r1, #0
 80087ca:	d040      	beq.n	800884e <_free_r+0x8a>
 80087cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d0:	1f0c      	subs	r4, r1, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bfb8      	it	lt
 80087d6:	18e4      	addlt	r4, r4, r3
 80087d8:	f000 f8de 	bl	8008998 <__malloc_lock>
 80087dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008850 <_free_r+0x8c>)
 80087de:	6813      	ldr	r3, [r2, #0]
 80087e0:	b933      	cbnz	r3, 80087f0 <_free_r+0x2c>
 80087e2:	6063      	str	r3, [r4, #4]
 80087e4:	6014      	str	r4, [r2, #0]
 80087e6:	4628      	mov	r0, r5
 80087e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ec:	f000 b8da 	b.w	80089a4 <__malloc_unlock>
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d908      	bls.n	8008806 <_free_r+0x42>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	1821      	adds	r1, r4, r0
 80087f8:	428b      	cmp	r3, r1
 80087fa:	bf01      	itttt	eq
 80087fc:	6819      	ldreq	r1, [r3, #0]
 80087fe:	685b      	ldreq	r3, [r3, #4]
 8008800:	1809      	addeq	r1, r1, r0
 8008802:	6021      	streq	r1, [r4, #0]
 8008804:	e7ed      	b.n	80087e2 <_free_r+0x1e>
 8008806:	461a      	mov	r2, r3
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b10b      	cbz	r3, 8008810 <_free_r+0x4c>
 800880c:	42a3      	cmp	r3, r4
 800880e:	d9fa      	bls.n	8008806 <_free_r+0x42>
 8008810:	6811      	ldr	r1, [r2, #0]
 8008812:	1850      	adds	r0, r2, r1
 8008814:	42a0      	cmp	r0, r4
 8008816:	d10b      	bne.n	8008830 <_free_r+0x6c>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	4401      	add	r1, r0
 800881c:	1850      	adds	r0, r2, r1
 800881e:	4283      	cmp	r3, r0
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	d1e0      	bne.n	80087e6 <_free_r+0x22>
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4408      	add	r0, r1
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	6053      	str	r3, [r2, #4]
 800882e:	e7da      	b.n	80087e6 <_free_r+0x22>
 8008830:	d902      	bls.n	8008838 <_free_r+0x74>
 8008832:	230c      	movs	r3, #12
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	e7d6      	b.n	80087e6 <_free_r+0x22>
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	1821      	adds	r1, r4, r0
 800883c:	428b      	cmp	r3, r1
 800883e:	bf01      	itttt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	1809      	addeq	r1, r1, r0
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	6063      	str	r3, [r4, #4]
 800884a:	6054      	str	r4, [r2, #4]
 800884c:	e7cb      	b.n	80087e6 <_free_r+0x22>
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200005d0 	.word	0x200005d0

08008854 <sbrk_aligned>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4e0f      	ldr	r6, [pc, #60]	@ (8008894 <sbrk_aligned+0x40>)
 8008858:	460c      	mov	r4, r1
 800885a:	6831      	ldr	r1, [r6, #0]
 800885c:	4605      	mov	r5, r0
 800885e:	b911      	cbnz	r1, 8008866 <sbrk_aligned+0x12>
 8008860:	f000 fba8 	bl	8008fb4 <_sbrk_r>
 8008864:	6030      	str	r0, [r6, #0]
 8008866:	4621      	mov	r1, r4
 8008868:	4628      	mov	r0, r5
 800886a:	f000 fba3 	bl	8008fb4 <_sbrk_r>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d103      	bne.n	800887a <sbrk_aligned+0x26>
 8008872:	f04f 34ff 	mov.w	r4, #4294967295
 8008876:	4620      	mov	r0, r4
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	1cc4      	adds	r4, r0, #3
 800887c:	f024 0403 	bic.w	r4, r4, #3
 8008880:	42a0      	cmp	r0, r4
 8008882:	d0f8      	beq.n	8008876 <sbrk_aligned+0x22>
 8008884:	1a21      	subs	r1, r4, r0
 8008886:	4628      	mov	r0, r5
 8008888:	f000 fb94 	bl	8008fb4 <_sbrk_r>
 800888c:	3001      	adds	r0, #1
 800888e:	d1f2      	bne.n	8008876 <sbrk_aligned+0x22>
 8008890:	e7ef      	b.n	8008872 <sbrk_aligned+0x1e>
 8008892:	bf00      	nop
 8008894:	200005cc 	.word	0x200005cc

08008898 <_malloc_r>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	1ccd      	adds	r5, r1, #3
 800889e:	f025 0503 	bic.w	r5, r5, #3
 80088a2:	3508      	adds	r5, #8
 80088a4:	2d0c      	cmp	r5, #12
 80088a6:	bf38      	it	cc
 80088a8:	250c      	movcc	r5, #12
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	4606      	mov	r6, r0
 80088ae:	db01      	blt.n	80088b4 <_malloc_r+0x1c>
 80088b0:	42a9      	cmp	r1, r5
 80088b2:	d904      	bls.n	80088be <_malloc_r+0x26>
 80088b4:	230c      	movs	r3, #12
 80088b6:	6033      	str	r3, [r6, #0]
 80088b8:	2000      	movs	r0, #0
 80088ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008994 <_malloc_r+0xfc>
 80088c2:	f000 f869 	bl	8008998 <__malloc_lock>
 80088c6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ca:	461c      	mov	r4, r3
 80088cc:	bb44      	cbnz	r4, 8008920 <_malloc_r+0x88>
 80088ce:	4629      	mov	r1, r5
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ffbf 	bl	8008854 <sbrk_aligned>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	4604      	mov	r4, r0
 80088da:	d158      	bne.n	800898e <_malloc_r+0xf6>
 80088dc:	f8d8 4000 	ldr.w	r4, [r8]
 80088e0:	4627      	mov	r7, r4
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	d143      	bne.n	800896e <_malloc_r+0xd6>
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	d04b      	beq.n	8008982 <_malloc_r+0xea>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	4639      	mov	r1, r7
 80088ee:	4630      	mov	r0, r6
 80088f0:	eb04 0903 	add.w	r9, r4, r3
 80088f4:	f000 fb5e 	bl	8008fb4 <_sbrk_r>
 80088f8:	4581      	cmp	r9, r0
 80088fa:	d142      	bne.n	8008982 <_malloc_r+0xea>
 80088fc:	6821      	ldr	r1, [r4, #0]
 80088fe:	4630      	mov	r0, r6
 8008900:	1a6d      	subs	r5, r5, r1
 8008902:	4629      	mov	r1, r5
 8008904:	f7ff ffa6 	bl	8008854 <sbrk_aligned>
 8008908:	3001      	adds	r0, #1
 800890a:	d03a      	beq.n	8008982 <_malloc_r+0xea>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	442b      	add	r3, r5
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	f8d8 3000 	ldr.w	r3, [r8]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	bb62      	cbnz	r2, 8008974 <_malloc_r+0xdc>
 800891a:	f8c8 7000 	str.w	r7, [r8]
 800891e:	e00f      	b.n	8008940 <_malloc_r+0xa8>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	1b52      	subs	r2, r2, r5
 8008924:	d420      	bmi.n	8008968 <_malloc_r+0xd0>
 8008926:	2a0b      	cmp	r2, #11
 8008928:	d917      	bls.n	800895a <_malloc_r+0xc2>
 800892a:	1961      	adds	r1, r4, r5
 800892c:	42a3      	cmp	r3, r4
 800892e:	6025      	str	r5, [r4, #0]
 8008930:	bf18      	it	ne
 8008932:	6059      	strne	r1, [r3, #4]
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	bf08      	it	eq
 8008938:	f8c8 1000 	streq.w	r1, [r8]
 800893c:	5162      	str	r2, [r4, r5]
 800893e:	604b      	str	r3, [r1, #4]
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f82f 	bl	80089a4 <__malloc_unlock>
 8008946:	f104 000b 	add.w	r0, r4, #11
 800894a:	1d23      	adds	r3, r4, #4
 800894c:	f020 0007 	bic.w	r0, r0, #7
 8008950:	1ac2      	subs	r2, r0, r3
 8008952:	bf1c      	itt	ne
 8008954:	1a1b      	subne	r3, r3, r0
 8008956:	50a3      	strne	r3, [r4, r2]
 8008958:	e7af      	b.n	80088ba <_malloc_r+0x22>
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	42a3      	cmp	r3, r4
 800895e:	bf0c      	ite	eq
 8008960:	f8c8 2000 	streq.w	r2, [r8]
 8008964:	605a      	strne	r2, [r3, #4]
 8008966:	e7eb      	b.n	8008940 <_malloc_r+0xa8>
 8008968:	4623      	mov	r3, r4
 800896a:	6864      	ldr	r4, [r4, #4]
 800896c:	e7ae      	b.n	80088cc <_malloc_r+0x34>
 800896e:	463c      	mov	r4, r7
 8008970:	687f      	ldr	r7, [r7, #4]
 8008972:	e7b6      	b.n	80088e2 <_malloc_r+0x4a>
 8008974:	461a      	mov	r2, r3
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	42a3      	cmp	r3, r4
 800897a:	d1fb      	bne.n	8008974 <_malloc_r+0xdc>
 800897c:	2300      	movs	r3, #0
 800897e:	6053      	str	r3, [r2, #4]
 8008980:	e7de      	b.n	8008940 <_malloc_r+0xa8>
 8008982:	230c      	movs	r3, #12
 8008984:	4630      	mov	r0, r6
 8008986:	6033      	str	r3, [r6, #0]
 8008988:	f000 f80c 	bl	80089a4 <__malloc_unlock>
 800898c:	e794      	b.n	80088b8 <_malloc_r+0x20>
 800898e:	6005      	str	r5, [r0, #0]
 8008990:	e7d6      	b.n	8008940 <_malloc_r+0xa8>
 8008992:	bf00      	nop
 8008994:	200005d0 	.word	0x200005d0

08008998 <__malloc_lock>:
 8008998:	4801      	ldr	r0, [pc, #4]	@ (80089a0 <__malloc_lock+0x8>)
 800899a:	f7ff bf03 	b.w	80087a4 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	200005c8 	.word	0x200005c8

080089a4 <__malloc_unlock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	@ (80089ac <__malloc_unlock+0x8>)
 80089a6:	f7ff befe 	b.w	80087a6 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	200005c8 	.word	0x200005c8

080089b0 <__ssputs_r>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	461f      	mov	r7, r3
 80089b6:	688e      	ldr	r6, [r1, #8]
 80089b8:	4682      	mov	sl, r0
 80089ba:	42be      	cmp	r6, r7
 80089bc:	460c      	mov	r4, r1
 80089be:	4690      	mov	r8, r2
 80089c0:	680b      	ldr	r3, [r1, #0]
 80089c2:	d82d      	bhi.n	8008a20 <__ssputs_r+0x70>
 80089c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089cc:	d026      	beq.n	8008a1c <__ssputs_r+0x6c>
 80089ce:	6965      	ldr	r5, [r4, #20]
 80089d0:	6909      	ldr	r1, [r1, #16]
 80089d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089d6:	eba3 0901 	sub.w	r9, r3, r1
 80089da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089de:	1c7b      	adds	r3, r7, #1
 80089e0:	444b      	add	r3, r9
 80089e2:	106d      	asrs	r5, r5, #1
 80089e4:	429d      	cmp	r5, r3
 80089e6:	bf38      	it	cc
 80089e8:	461d      	movcc	r5, r3
 80089ea:	0553      	lsls	r3, r2, #21
 80089ec:	d527      	bpl.n	8008a3e <__ssputs_r+0x8e>
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7ff ff52 	bl	8008898 <_malloc_r>
 80089f4:	4606      	mov	r6, r0
 80089f6:	b360      	cbz	r0, 8008a52 <__ssputs_r+0xa2>
 80089f8:	464a      	mov	r2, r9
 80089fa:	6921      	ldr	r1, [r4, #16]
 80089fc:	f7ff fed4 	bl	80087a8 <memcpy>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	6126      	str	r6, [r4, #16]
 8008a0e:	444e      	add	r6, r9
 8008a10:	6026      	str	r6, [r4, #0]
 8008a12:	463e      	mov	r6, r7
 8008a14:	6165      	str	r5, [r4, #20]
 8008a16:	eba5 0509 	sub.w	r5, r5, r9
 8008a1a:	60a5      	str	r5, [r4, #8]
 8008a1c:	42be      	cmp	r6, r7
 8008a1e:	d900      	bls.n	8008a22 <__ssputs_r+0x72>
 8008a20:	463e      	mov	r6, r7
 8008a22:	4632      	mov	r2, r6
 8008a24:	4641      	mov	r1, r8
 8008a26:	6820      	ldr	r0, [r4, #0]
 8008a28:	f000 faaa 	bl	8008f80 <memmove>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	1b9b      	subs	r3, r3, r6
 8008a32:	60a3      	str	r3, [r4, #8]
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	4433      	add	r3, r6
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	462a      	mov	r2, r5
 8008a40:	f000 fad6 	bl	8008ff0 <_realloc_r>
 8008a44:	4606      	mov	r6, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1e0      	bne.n	8008a0c <__ssputs_r+0x5c>
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	6921      	ldr	r1, [r4, #16]
 8008a4e:	f7ff feb9 	bl	80087c4 <_free_r>
 8008a52:	230c      	movs	r3, #12
 8008a54:	f8ca 3000 	str.w	r3, [sl]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	e7e9      	b.n	8008a3a <__ssputs_r+0x8a>
	...

08008a68 <_svfiprintf_r>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4698      	mov	r8, r3
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	4607      	mov	r7, r0
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	460d      	mov	r5, r1
 8008a76:	4614      	mov	r4, r2
 8008a78:	b09d      	sub	sp, #116	@ 0x74
 8008a7a:	d510      	bpl.n	8008a9e <_svfiprintf_r+0x36>
 8008a7c:	690b      	ldr	r3, [r1, #16]
 8008a7e:	b973      	cbnz	r3, 8008a9e <_svfiprintf_r+0x36>
 8008a80:	2140      	movs	r1, #64	@ 0x40
 8008a82:	f7ff ff09 	bl	8008898 <_malloc_r>
 8008a86:	6028      	str	r0, [r5, #0]
 8008a88:	6128      	str	r0, [r5, #16]
 8008a8a:	b930      	cbnz	r0, 8008a9a <_svfiprintf_r+0x32>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	b01d      	add	sp, #116	@ 0x74
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	2340      	movs	r3, #64	@ 0x40
 8008a9c:	616b      	str	r3, [r5, #20]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa2:	2320      	movs	r3, #32
 8008aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aa8:	2330      	movs	r3, #48	@ 0x30
 8008aaa:	f04f 0901 	mov.w	r9, #1
 8008aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c4c <_svfiprintf_r+0x1e4>
 8008ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aba:	4623      	mov	r3, r4
 8008abc:	469a      	mov	sl, r3
 8008abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac2:	b10a      	cbz	r2, 8008ac8 <_svfiprintf_r+0x60>
 8008ac4:	2a25      	cmp	r2, #37	@ 0x25
 8008ac6:	d1f9      	bne.n	8008abc <_svfiprintf_r+0x54>
 8008ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8008acc:	d00b      	beq.n	8008ae6 <_svfiprintf_r+0x7e>
 8008ace:	465b      	mov	r3, fp
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ff6b 	bl	80089b0 <__ssputs_r>
 8008ada:	3001      	adds	r0, #1
 8008adc:	f000 80a7 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae2:	445a      	add	r2, fp
 8008ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 809f 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008af0:	2300      	movs	r3, #0
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295
 8008af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afa:	f10a 0a01 	add.w	sl, sl, #1
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b08:	4654      	mov	r4, sl
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b10:	484e      	ldr	r0, [pc, #312]	@ (8008c4c <_svfiprintf_r+0x1e4>)
 8008b12:	f000 fa5f 	bl	8008fd4 <memchr>
 8008b16:	9a04      	ldr	r2, [sp, #16]
 8008b18:	b9d8      	cbnz	r0, 8008b52 <_svfiprintf_r+0xea>
 8008b1a:	06d0      	lsls	r0, r2, #27
 8008b1c:	bf44      	itt	mi
 8008b1e:	2320      	movmi	r3, #32
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b24:	0711      	lsls	r1, r2, #28
 8008b26:	bf44      	itt	mi
 8008b28:	232b      	movmi	r3, #43	@ 0x2b
 8008b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b34:	d015      	beq.n	8008b62 <_svfiprintf_r+0xfa>
 8008b36:	4654      	mov	r4, sl
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	9a07      	ldr	r2, [sp, #28]
 8008b40:	4621      	mov	r1, r4
 8008b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b46:	3b30      	subs	r3, #48	@ 0x30
 8008b48:	2b09      	cmp	r3, #9
 8008b4a:	d94b      	bls.n	8008be4 <_svfiprintf_r+0x17c>
 8008b4c:	b1b0      	cbz	r0, 8008b7c <_svfiprintf_r+0x114>
 8008b4e:	9207      	str	r2, [sp, #28]
 8008b50:	e014      	b.n	8008b7c <_svfiprintf_r+0x114>
 8008b52:	eba0 0308 	sub.w	r3, r0, r8
 8008b56:	fa09 f303 	lsl.w	r3, r9, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	46a2      	mov	sl, r4
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	e7d2      	b.n	8008b08 <_svfiprintf_r+0xa0>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	1d19      	adds	r1, r3, #4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9103      	str	r1, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbb      	ittet	lt
 8008b6e:	425b      	neglt	r3, r3
 8008b70:	f042 0202 	orrlt.w	r2, r2, #2
 8008b74:	9307      	strge	r3, [sp, #28]
 8008b76:	9307      	strlt	r3, [sp, #28]
 8008b78:	bfb8      	it	lt
 8008b7a:	9204      	strlt	r2, [sp, #16]
 8008b7c:	7823      	ldrb	r3, [r4, #0]
 8008b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b80:	d10a      	bne.n	8008b98 <_svfiprintf_r+0x130>
 8008b82:	7863      	ldrb	r3, [r4, #1]
 8008b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b86:	d132      	bne.n	8008bee <_svfiprintf_r+0x186>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	3402      	adds	r4, #2
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	9203      	str	r2, [sp, #12]
 8008b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c50 <_svfiprintf_r+0x1e8>
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	7821      	ldrb	r1, [r4, #0]
 8008ba2:	f000 fa17 	bl	8008fd4 <memchr>
 8008ba6:	b138      	cbz	r0, 8008bb8 <_svfiprintf_r+0x150>
 8008ba8:	2240      	movs	r2, #64	@ 0x40
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	eba0 000a 	sub.w	r0, r0, sl
 8008bb0:	4082      	lsls	r2, r0
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	3401      	adds	r4, #1
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbc:	2206      	movs	r2, #6
 8008bbe:	4825      	ldr	r0, [pc, #148]	@ (8008c54 <_svfiprintf_r+0x1ec>)
 8008bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc4:	f000 fa06 	bl	8008fd4 <memchr>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d036      	beq.n	8008c3a <_svfiprintf_r+0x1d2>
 8008bcc:	4b22      	ldr	r3, [pc, #136]	@ (8008c58 <_svfiprintf_r+0x1f0>)
 8008bce:	bb1b      	cbnz	r3, 8008c18 <_svfiprintf_r+0x1b0>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	3307      	adds	r3, #7
 8008bd4:	f023 0307 	bic.w	r3, r3, #7
 8008bd8:	3308      	adds	r3, #8
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bde:	4433      	add	r3, r6
 8008be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be2:	e76a      	b.n	8008aba <_svfiprintf_r+0x52>
 8008be4:	460c      	mov	r4, r1
 8008be6:	2001      	movs	r0, #1
 8008be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bec:	e7a8      	b.n	8008b40 <_svfiprintf_r+0xd8>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f04f 0c0a 	mov.w	ip, #10
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c00:	3a30      	subs	r2, #48	@ 0x30
 8008c02:	2a09      	cmp	r2, #9
 8008c04:	d903      	bls.n	8008c0e <_svfiprintf_r+0x1a6>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0c6      	beq.n	8008b98 <_svfiprintf_r+0x130>
 8008c0a:	9105      	str	r1, [sp, #20]
 8008c0c:	e7c4      	b.n	8008b98 <_svfiprintf_r+0x130>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	2301      	movs	r3, #1
 8008c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c16:	e7f0      	b.n	8008bfa <_svfiprintf_r+0x192>
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <_svfiprintf_r+0x1f4>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	f3af 8000 	nop.w
 8008c28:	1c42      	adds	r2, r0, #1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	d1d6      	bne.n	8008bdc <_svfiprintf_r+0x174>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	065b      	lsls	r3, r3, #25
 8008c32:	f53f af2d 	bmi.w	8008a90 <_svfiprintf_r+0x28>
 8008c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c38:	e72c      	b.n	8008a94 <_svfiprintf_r+0x2c>
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4638      	mov	r0, r7
 8008c42:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <_svfiprintf_r+0x1f4>)
 8008c44:	a904      	add	r1, sp, #16
 8008c46:	f000 f87d 	bl	8008d44 <_printf_i>
 8008c4a:	e7ed      	b.n	8008c28 <_svfiprintf_r+0x1c0>
 8008c4c:	08009934 	.word	0x08009934
 8008c50:	0800993a 	.word	0x0800993a
 8008c54:	0800993e 	.word	0x0800993e
 8008c58:	00000000 	.word	0x00000000
 8008c5c:	080089b1 	.word	0x080089b1

08008c60 <_printf_common>:
 8008c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c64:	4616      	mov	r6, r2
 8008c66:	4698      	mov	r8, r3
 8008c68:	688a      	ldr	r2, [r1, #8]
 8008c6a:	690b      	ldr	r3, [r1, #16]
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	bfb8      	it	lt
 8008c72:	4613      	movlt	r3, r2
 8008c74:	6033      	str	r3, [r6, #0]
 8008c76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c80:	b10a      	cbz	r2, 8008c86 <_printf_common+0x26>
 8008c82:	3301      	adds	r3, #1
 8008c84:	6033      	str	r3, [r6, #0]
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	0699      	lsls	r1, r3, #26
 8008c8a:	bf42      	ittt	mi
 8008c8c:	6833      	ldrmi	r3, [r6, #0]
 8008c8e:	3302      	addmi	r3, #2
 8008c90:	6033      	strmi	r3, [r6, #0]
 8008c92:	6825      	ldr	r5, [r4, #0]
 8008c94:	f015 0506 	ands.w	r5, r5, #6
 8008c98:	d106      	bne.n	8008ca8 <_printf_common+0x48>
 8008c9a:	f104 0a19 	add.w	sl, r4, #25
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	6832      	ldr	r2, [r6, #0]
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	dc2b      	bgt.n	8008d00 <_printf_common+0xa0>
 8008ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	3b00      	subs	r3, #0
 8008cb0:	bf18      	it	ne
 8008cb2:	2301      	movne	r3, #1
 8008cb4:	0692      	lsls	r2, r2, #26
 8008cb6:	d430      	bmi.n	8008d1a <_printf_common+0xba>
 8008cb8:	4641      	mov	r1, r8
 8008cba:	4638      	mov	r0, r7
 8008cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cc0:	47c8      	blx	r9
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d023      	beq.n	8008d0e <_printf_common+0xae>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6922      	ldr	r2, [r4, #16]
 8008cca:	f003 0306 	and.w	r3, r3, #6
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	bf14      	ite	ne
 8008cd2:	2500      	movne	r5, #0
 8008cd4:	6833      	ldreq	r3, [r6, #0]
 8008cd6:	f04f 0600 	mov.w	r6, #0
 8008cda:	bf08      	it	eq
 8008cdc:	68e5      	ldreq	r5, [r4, #12]
 8008cde:	f104 041a 	add.w	r4, r4, #26
 8008ce2:	bf08      	it	eq
 8008ce4:	1aed      	subeq	r5, r5, r3
 8008ce6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cea:	bf08      	it	eq
 8008cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bfc4      	itt	gt
 8008cf4:	1a9b      	subgt	r3, r3, r2
 8008cf6:	18ed      	addgt	r5, r5, r3
 8008cf8:	42b5      	cmp	r5, r6
 8008cfa:	d11a      	bne.n	8008d32 <_printf_common+0xd2>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	e008      	b.n	8008d12 <_printf_common+0xb2>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4652      	mov	r2, sl
 8008d04:	4641      	mov	r1, r8
 8008d06:	4638      	mov	r0, r7
 8008d08:	47c8      	blx	r9
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d103      	bne.n	8008d16 <_printf_common+0xb6>
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d16:	3501      	adds	r5, #1
 8008d18:	e7c1      	b.n	8008c9e <_printf_common+0x3e>
 8008d1a:	2030      	movs	r0, #48	@ 0x30
 8008d1c:	18e1      	adds	r1, r4, r3
 8008d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d28:	4422      	add	r2, r4
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d30:	e7c2      	b.n	8008cb8 <_printf_common+0x58>
 8008d32:	2301      	movs	r3, #1
 8008d34:	4622      	mov	r2, r4
 8008d36:	4641      	mov	r1, r8
 8008d38:	4638      	mov	r0, r7
 8008d3a:	47c8      	blx	r9
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d0e6      	beq.n	8008d0e <_printf_common+0xae>
 8008d40:	3601      	adds	r6, #1
 8008d42:	e7d9      	b.n	8008cf8 <_printf_common+0x98>

08008d44 <_printf_i>:
 8008d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	7e0f      	ldrb	r7, [r1, #24]
 8008d4a:	4691      	mov	r9, r2
 8008d4c:	2f78      	cmp	r7, #120	@ 0x78
 8008d4e:	4680      	mov	r8, r0
 8008d50:	460c      	mov	r4, r1
 8008d52:	469a      	mov	sl, r3
 8008d54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d5a:	d807      	bhi.n	8008d6c <_printf_i+0x28>
 8008d5c:	2f62      	cmp	r7, #98	@ 0x62
 8008d5e:	d80a      	bhi.n	8008d76 <_printf_i+0x32>
 8008d60:	2f00      	cmp	r7, #0
 8008d62:	f000 80d1 	beq.w	8008f08 <_printf_i+0x1c4>
 8008d66:	2f58      	cmp	r7, #88	@ 0x58
 8008d68:	f000 80b8 	beq.w	8008edc <_printf_i+0x198>
 8008d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d74:	e03a      	b.n	8008dec <_printf_i+0xa8>
 8008d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d7a:	2b15      	cmp	r3, #21
 8008d7c:	d8f6      	bhi.n	8008d6c <_printf_i+0x28>
 8008d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d84 <_printf_i+0x40>)
 8008d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d84:	08008ddd 	.word	0x08008ddd
 8008d88:	08008df1 	.word	0x08008df1
 8008d8c:	08008d6d 	.word	0x08008d6d
 8008d90:	08008d6d 	.word	0x08008d6d
 8008d94:	08008d6d 	.word	0x08008d6d
 8008d98:	08008d6d 	.word	0x08008d6d
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008d6d 	.word	0x08008d6d
 8008da4:	08008d6d 	.word	0x08008d6d
 8008da8:	08008d6d 	.word	0x08008d6d
 8008dac:	08008d6d 	.word	0x08008d6d
 8008db0:	08008eef 	.word	0x08008eef
 8008db4:	08008e1b 	.word	0x08008e1b
 8008db8:	08008ea9 	.word	0x08008ea9
 8008dbc:	08008d6d 	.word	0x08008d6d
 8008dc0:	08008d6d 	.word	0x08008d6d
 8008dc4:	08008f11 	.word	0x08008f11
 8008dc8:	08008d6d 	.word	0x08008d6d
 8008dcc:	08008e1b 	.word	0x08008e1b
 8008dd0:	08008d6d 	.word	0x08008d6d
 8008dd4:	08008d6d 	.word	0x08008d6d
 8008dd8:	08008eb1 	.word	0x08008eb1
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	1d1a      	adds	r2, r3, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6032      	str	r2, [r6, #0]
 8008de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dec:	2301      	movs	r3, #1
 8008dee:	e09c      	b.n	8008f2a <_printf_i+0x1e6>
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	6820      	ldr	r0, [r4, #0]
 8008df4:	1d19      	adds	r1, r3, #4
 8008df6:	6031      	str	r1, [r6, #0]
 8008df8:	0606      	lsls	r6, r0, #24
 8008dfa:	d501      	bpl.n	8008e00 <_printf_i+0xbc>
 8008dfc:	681d      	ldr	r5, [r3, #0]
 8008dfe:	e003      	b.n	8008e08 <_printf_i+0xc4>
 8008e00:	0645      	lsls	r5, r0, #25
 8008e02:	d5fb      	bpl.n	8008dfc <_printf_i+0xb8>
 8008e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	da03      	bge.n	8008e14 <_printf_i+0xd0>
 8008e0c:	232d      	movs	r3, #45	@ 0x2d
 8008e0e:	426d      	negs	r5, r5
 8008e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e14:	230a      	movs	r3, #10
 8008e16:	4858      	ldr	r0, [pc, #352]	@ (8008f78 <_printf_i+0x234>)
 8008e18:	e011      	b.n	8008e3e <_printf_i+0xfa>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	0608      	lsls	r0, r1, #24
 8008e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e24:	d402      	bmi.n	8008e2c <_printf_i+0xe8>
 8008e26:	0649      	lsls	r1, r1, #25
 8008e28:	bf48      	it	mi
 8008e2a:	b2ad      	uxthmi	r5, r5
 8008e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	bf14      	ite	ne
 8008e32:	230a      	movne	r3, #10
 8008e34:	2308      	moveq	r3, #8
 8008e36:	4850      	ldr	r0, [pc, #320]	@ (8008f78 <_printf_i+0x234>)
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e3e:	6866      	ldr	r6, [r4, #4]
 8008e40:	2e00      	cmp	r6, #0
 8008e42:	60a6      	str	r6, [r4, #8]
 8008e44:	db05      	blt.n	8008e52 <_printf_i+0x10e>
 8008e46:	6821      	ldr	r1, [r4, #0]
 8008e48:	432e      	orrs	r6, r5
 8008e4a:	f021 0104 	bic.w	r1, r1, #4
 8008e4e:	6021      	str	r1, [r4, #0]
 8008e50:	d04b      	beq.n	8008eea <_printf_i+0x1a6>
 8008e52:	4616      	mov	r6, r2
 8008e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e58:	fb03 5711 	mls	r7, r3, r1, r5
 8008e5c:	5dc7      	ldrb	r7, [r0, r7]
 8008e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e62:	462f      	mov	r7, r5
 8008e64:	42bb      	cmp	r3, r7
 8008e66:	460d      	mov	r5, r1
 8008e68:	d9f4      	bls.n	8008e54 <_printf_i+0x110>
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d10b      	bne.n	8008e86 <_printf_i+0x142>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07df      	lsls	r7, r3, #31
 8008e72:	d508      	bpl.n	8008e86 <_printf_i+0x142>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	6861      	ldr	r1, [r4, #4]
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	bfde      	ittt	le
 8008e7c:	2330      	movle	r3, #48	@ 0x30
 8008e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e86:	1b92      	subs	r2, r2, r6
 8008e88:	6122      	str	r2, [r4, #16]
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f8cd a000 	str.w	sl, [sp]
 8008e94:	aa03      	add	r2, sp, #12
 8008e96:	f7ff fee3 	bl	8008c60 <_printf_common>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d14a      	bne.n	8008f34 <_printf_i+0x1f0>
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea2:	b004      	add	sp, #16
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	f043 0320 	orr.w	r3, r3, #32
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	2778      	movs	r7, #120	@ 0x78
 8008eb2:	4832      	ldr	r0, [pc, #200]	@ (8008f7c <_printf_i+0x238>)
 8008eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	6831      	ldr	r1, [r6, #0]
 8008ebc:	061f      	lsls	r7, r3, #24
 8008ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ec2:	d402      	bmi.n	8008eca <_printf_i+0x186>
 8008ec4:	065f      	lsls	r7, r3, #25
 8008ec6:	bf48      	it	mi
 8008ec8:	b2ad      	uxthmi	r5, r5
 8008eca:	6031      	str	r1, [r6, #0]
 8008ecc:	07d9      	lsls	r1, r3, #31
 8008ece:	bf44      	itt	mi
 8008ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ed4:	6023      	strmi	r3, [r4, #0]
 8008ed6:	b11d      	cbz	r5, 8008ee0 <_printf_i+0x19c>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	e7ad      	b.n	8008e38 <_printf_i+0xf4>
 8008edc:	4826      	ldr	r0, [pc, #152]	@ (8008f78 <_printf_i+0x234>)
 8008ede:	e7e9      	b.n	8008eb4 <_printf_i+0x170>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	f023 0320 	bic.w	r3, r3, #32
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	e7f6      	b.n	8008ed8 <_printf_i+0x194>
 8008eea:	4616      	mov	r6, r2
 8008eec:	e7bd      	b.n	8008e6a <_printf_i+0x126>
 8008eee:	6833      	ldr	r3, [r6, #0]
 8008ef0:	6825      	ldr	r5, [r4, #0]
 8008ef2:	1d18      	adds	r0, r3, #4
 8008ef4:	6961      	ldr	r1, [r4, #20]
 8008ef6:	6030      	str	r0, [r6, #0]
 8008ef8:	062e      	lsls	r6, r5, #24
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	d501      	bpl.n	8008f02 <_printf_i+0x1be>
 8008efe:	6019      	str	r1, [r3, #0]
 8008f00:	e002      	b.n	8008f08 <_printf_i+0x1c4>
 8008f02:	0668      	lsls	r0, r5, #25
 8008f04:	d5fb      	bpl.n	8008efe <_printf_i+0x1ba>
 8008f06:	8019      	strh	r1, [r3, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4616      	mov	r6, r2
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	e7bc      	b.n	8008e8a <_printf_i+0x146>
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	2100      	movs	r1, #0
 8008f14:	1d1a      	adds	r2, r3, #4
 8008f16:	6032      	str	r2, [r6, #0]
 8008f18:	681e      	ldr	r6, [r3, #0]
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f000 f859 	bl	8008fd4 <memchr>
 8008f22:	b108      	cbz	r0, 8008f28 <_printf_i+0x1e4>
 8008f24:	1b80      	subs	r0, r0, r6
 8008f26:	6060      	str	r0, [r4, #4]
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f32:	e7aa      	b.n	8008e8a <_printf_i+0x146>
 8008f34:	4632      	mov	r2, r6
 8008f36:	4649      	mov	r1, r9
 8008f38:	4640      	mov	r0, r8
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	47d0      	blx	sl
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d0ad      	beq.n	8008e9e <_printf_i+0x15a>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	079b      	lsls	r3, r3, #30
 8008f46:	d413      	bmi.n	8008f70 <_printf_i+0x22c>
 8008f48:	68e0      	ldr	r0, [r4, #12]
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	4298      	cmp	r0, r3
 8008f4e:	bfb8      	it	lt
 8008f50:	4618      	movlt	r0, r3
 8008f52:	e7a6      	b.n	8008ea2 <_printf_i+0x15e>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4632      	mov	r2, r6
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	47d0      	blx	sl
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d09d      	beq.n	8008e9e <_printf_i+0x15a>
 8008f62:	3501      	adds	r5, #1
 8008f64:	68e3      	ldr	r3, [r4, #12]
 8008f66:	9903      	ldr	r1, [sp, #12]
 8008f68:	1a5b      	subs	r3, r3, r1
 8008f6a:	42ab      	cmp	r3, r5
 8008f6c:	dcf2      	bgt.n	8008f54 <_printf_i+0x210>
 8008f6e:	e7eb      	b.n	8008f48 <_printf_i+0x204>
 8008f70:	2500      	movs	r5, #0
 8008f72:	f104 0619 	add.w	r6, r4, #25
 8008f76:	e7f5      	b.n	8008f64 <_printf_i+0x220>
 8008f78:	08009945 	.word	0x08009945
 8008f7c:	08009956 	.word	0x08009956

08008f80 <memmove>:
 8008f80:	4288      	cmp	r0, r1
 8008f82:	b510      	push	{r4, lr}
 8008f84:	eb01 0402 	add.w	r4, r1, r2
 8008f88:	d902      	bls.n	8008f90 <memmove+0x10>
 8008f8a:	4284      	cmp	r4, r0
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	d807      	bhi.n	8008fa0 <memmove+0x20>
 8008f90:	1e43      	subs	r3, r0, #1
 8008f92:	42a1      	cmp	r1, r4
 8008f94:	d008      	beq.n	8008fa8 <memmove+0x28>
 8008f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f9e:	e7f8      	b.n	8008f92 <memmove+0x12>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4402      	add	r2, r0
 8008fa4:	428a      	cmp	r2, r1
 8008fa6:	d100      	bne.n	8008faa <memmove+0x2a>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fb2:	e7f7      	b.n	8008fa4 <memmove+0x24>

08008fb4 <_sbrk_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4d05      	ldr	r5, [pc, #20]	@ (8008fd0 <_sbrk_r+0x1c>)
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	f7f8 fd04 	bl	80019cc <_sbrk>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_sbrk_r+0x1a>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_sbrk_r+0x1a>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	200005c4 	.word	0x200005c4

08008fd4 <memchr>:
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	b2c9      	uxtb	r1, r1
 8008fda:	4402      	add	r2, r0
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	d101      	bne.n	8008fe6 <memchr+0x12>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e003      	b.n	8008fee <memchr+0x1a>
 8008fe6:	7804      	ldrb	r4, [r0, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	428c      	cmp	r4, r1
 8008fec:	d1f6      	bne.n	8008fdc <memchr+0x8>
 8008fee:	bd10      	pop	{r4, pc}

08008ff0 <_realloc_r>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	b921      	cbnz	r1, 8009006 <_realloc_r+0x16>
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	f7ff bc49 	b.w	8008898 <_malloc_r>
 8009006:	b92a      	cbnz	r2, 8009014 <_realloc_r+0x24>
 8009008:	f7ff fbdc 	bl	80087c4 <_free_r>
 800900c:	4625      	mov	r5, r4
 800900e:	4628      	mov	r0, r5
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	f000 f81a 	bl	800904c <_malloc_usable_size_r>
 8009018:	4284      	cmp	r4, r0
 800901a:	4606      	mov	r6, r0
 800901c:	d802      	bhi.n	8009024 <_realloc_r+0x34>
 800901e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009022:	d8f4      	bhi.n	800900e <_realloc_r+0x1e>
 8009024:	4621      	mov	r1, r4
 8009026:	4638      	mov	r0, r7
 8009028:	f7ff fc36 	bl	8008898 <_malloc_r>
 800902c:	4680      	mov	r8, r0
 800902e:	b908      	cbnz	r0, 8009034 <_realloc_r+0x44>
 8009030:	4645      	mov	r5, r8
 8009032:	e7ec      	b.n	800900e <_realloc_r+0x1e>
 8009034:	42b4      	cmp	r4, r6
 8009036:	4622      	mov	r2, r4
 8009038:	4629      	mov	r1, r5
 800903a:	bf28      	it	cs
 800903c:	4632      	movcs	r2, r6
 800903e:	f7ff fbb3 	bl	80087a8 <memcpy>
 8009042:	4629      	mov	r1, r5
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fbbd 	bl	80087c4 <_free_r>
 800904a:	e7f1      	b.n	8009030 <_realloc_r+0x40>

0800904c <_malloc_usable_size_r>:
 800904c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009050:	1f18      	subs	r0, r3, #4
 8009052:	2b00      	cmp	r3, #0
 8009054:	bfbc      	itt	lt
 8009056:	580b      	ldrlt	r3, [r1, r0]
 8009058:	18c0      	addlt	r0, r0, r3
 800905a:	4770      	bx	lr

0800905c <_init>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr

08009068 <_fini>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr
