
remode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08008c74  08008c74  00009c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800954c  0800954c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009558  08009558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800955c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000078  080095d0  0000b078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080095d0  0000b5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017019  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8b  00000000  00000000  000220b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00025e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ac  00000000  00000000  000274f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aba1  00000000  00000000  0002869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7bf  00000000  00000000  0004323d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953f3  00000000  00000000  0005f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4def  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006338  00000000  00000000  000f4e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fb16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c5c 	.word	0x08008c5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08008c5c 	.word	0x08008c5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b3d      	ldr	r3, [pc, #244]	@ (8000264 <MX_ADC1_Init+0x108>)
 800016e:	4a3e      	ldr	r2, [pc, #248]	@ (8000268 <MX_ADC1_Init+0x10c>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b3c      	ldr	r3, [pc, #240]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b3a      	ldr	r3, [pc, #232]	@ (8000264 <MX_ADC1_Init+0x108>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b38      	ldr	r3, [pc, #224]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b37      	ldr	r3, [pc, #220]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b35      	ldr	r3, [pc, #212]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000194:	4b33      	ldr	r3, [pc, #204]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000196:	2206      	movs	r2, #6
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4832      	ldr	r0, [pc, #200]	@ (8000264 <MX_ADC1_Init+0x108>)
 800019c:	f001 fc0a 	bl	80019b4 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fd08 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001b2:	2301      	movs	r3, #1
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	482a      	ldr	r0, [pc, #168]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001bc:	f001 fe8a 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fcf8 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	4823      	ldr	r0, [pc, #140]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001d8:	f001 fe7c 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fcea 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001e6:	2302      	movs	r3, #2
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	481c      	ldr	r0, [pc, #112]	@ (8000264 <MX_ADC1_Init+0x108>)
 80001f4:	f001 fe6e 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fcdc 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000206:	2304      	movs	r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000210:	f001 fe60 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800021a:	f000 fcce 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800021e:	2310      	movs	r3, #16
 8000220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000222:	2305      	movs	r3, #5
 8000224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000226:	2304      	movs	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	480d      	ldr	r0, [pc, #52]	@ (8000264 <MX_ADC1_Init+0x108>)
 8000230:	f001 fe50 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800023a:	f000 fcbe 	bl	8000bba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800023e:	2311      	movs	r3, #17
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000242:	2306      	movs	r3, #6
 8000244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	@ (8000264 <MX_ADC1_Init+0x108>)
 800024c:	f001 fe42 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000256:	f000 fcb0 	bl	8000bba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000094 	.word	0x20000094
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2c      	ldr	r2, [pc, #176]	@ (8000338 <HAL_ADC_MspInit+0xcc>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d151      	bne.n	8000330 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a2a      	ldr	r2, [pc, #168]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b28      	ldr	r3, [pc, #160]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b25      	ldr	r3, [pc, #148]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a24      	ldr	r2, [pc, #144]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_ADC_MspInit+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002bc:	230f      	movs	r3, #15
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	481d      	ldr	r0, [pc, #116]	@ (8000340 <HAL_ADC_MspInit+0xd4>)
 80002cc:	f002 fdfa 	bl	8002ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <HAL_ADC_MspInit+0xdc>)
 80002d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002f0:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000304:	480f      	ldr	r0, [pc, #60]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000306:	f002 f9b1 	bl	800266c <HAL_DMA_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000310:	f000 fc53 	bl	8000bba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 8000318:	621a      	str	r2, [r3, #32]
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <HAL_ADC_MspInit+0xd8>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2012      	movs	r0, #18
 8000326:	f002 f95e 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800032a:	2012      	movs	r0, #18
 800032c:	f002 f977 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40012400 	.word	0x40012400
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800
 8000344:	200000c4 	.word	0x200000c4
 8000348:	40020008 	.word	0x40020008

0800034c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_DMA_Init+0x78>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	200b      	movs	r0, #11
 8000370:	f002 f939 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000374:	200b      	movs	r0, #11
 8000376:	f002 f952 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	200c      	movs	r0, #12
 8000380:	f002 f931 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000384:	200c      	movs	r0, #12
 8000386:	f002 f94a 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200d      	movs	r0, #13
 8000390:	f002 f929 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000394:	200d      	movs	r0, #13
 8000396:	f002 f942 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2010      	movs	r0, #16
 80003a0:	f002 f921 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003a4:	2010      	movs	r0, #16
 80003a6:	f002 f93a 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2011      	movs	r0, #17
 80003b0:	f002 f919 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003b4:	2011      	movs	r0, #17
 80003b6:	f002 f932 	bl	800261e <HAL_NVIC_EnableIRQ>

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003dc:	4b56      	ldr	r3, [pc, #344]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a55      	ldr	r2, [pc, #340]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003e2:	f043 0310 	orr.w	r3, r3, #16
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b53      	ldr	r3, [pc, #332]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0310 	and.w	r3, r3, #16
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b50      	ldr	r3, [pc, #320]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a4f      	ldr	r2, [pc, #316]	@ (8000538 <MX_GPIO_Init+0x170>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b4d      	ldr	r3, [pc, #308]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <MX_GPIO_Init+0x170>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a49      	ldr	r2, [pc, #292]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b47      	ldr	r3, [pc, #284]	@ (8000538 <MX_GPIO_Init+0x170>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a43      	ldr	r2, [pc, #268]	@ (8000538 <MX_GPIO_Init+0x170>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b41      	ldr	r3, [pc, #260]	@ (8000538 <MX_GPIO_Init+0x170>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000442:	483e      	ldr	r0, [pc, #248]	@ (800053c <MX_GPIO_Init+0x174>)
 8000444:	f002 fec2 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2103      	movs	r1, #3
 800044c:	483c      	ldr	r0, [pc, #240]	@ (8000540 <MX_GPIO_Init+0x178>)
 800044e:	f002 febd 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000458:	4839      	ldr	r0, [pc, #228]	@ (8000540 <MX_GPIO_Init+0x178>)
 800045a:	f002 feb7 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4831      	ldr	r0, [pc, #196]	@ (800053c <MX_GPIO_Init+0x174>)
 8000478:	f002 fd24 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800047c:	2310      	movs	r3, #16
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	482d      	ldr	r0, [pc, #180]	@ (8000544 <MX_GPIO_Init+0x17c>)
 8000490:	f002 fd18 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000494:	2303      	movs	r3, #3
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4825      	ldr	r0, [pc, #148]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004ac:	f002 fd0a 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	481f      	ldr	r0, [pc, #124]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004c2:	f002 fcff 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004c6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4819      	ldr	r0, [pc, #100]	@ (8000540 <MX_GPIO_Init+0x178>)
 80004dc:	f002 fcf2 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4813      	ldr	r0, [pc, #76]	@ (8000544 <MX_GPIO_Init+0x17c>)
 80004f6:	f002 fce5 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : remode1_Pin remode2_Pin */
  GPIO_InitStruct.Pin = remode1_Pin|remode2_Pin;
 80004fa:	2318      	movs	r3, #24
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <MX_GPIO_Init+0x178>)
 800050e:	f002 fcd9 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000518:	2311      	movs	r3, #17
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_GPIO_Init+0x178>)
 800052c:	f002 fcca 	bl	8002ec4 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000
 8000540:	40010c00 	.word	0x40010c00
 8000544:	40010800 	.word	0x40010800

08000548 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_I2C1_Init+0x50>)
 800054e:	4a13      	ldr	r2, [pc, #76]	@ (800059c <MX_I2C1_Init+0x54>)
 8000550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000554:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <MX_I2C1_Init+0x58>)
 8000556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_I2C1_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000566:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800056a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000578:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <MX_I2C1_Init+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000584:	4804      	ldr	r0, [pc, #16]	@ (8000598 <MX_I2C1_Init+0x50>)
 8000586:	f002 fe53 	bl	8003230 <HAL_I2C_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000590:	f000 fb13 	bl	8000bba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000108 	.word	0x20000108
 800059c:	40005400 	.word	0x40005400
 80005a0:	00061a80 	.word	0x00061a80

080005a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a45      	ldr	r2, [pc, #276]	@ (80006d4 <HAL_I2C_MspInit+0x130>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	f040 8082 	bne.w	80006ca <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a43      	ldr	r2, [pc, #268]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b41      	ldr	r3, [pc, #260]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005de:	23c0      	movs	r3, #192	@ 0xc0
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	2312      	movs	r3, #18
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	483a      	ldr	r0, [pc, #232]	@ (80006dc <HAL_I2C_MspInit+0x138>)
 80005f2:	f002 fc67 	bl	8002ec4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f6:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a37      	ldr	r2, [pc, #220]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 80005fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <HAL_I2C_MspInit+0x134>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800060e:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000610:	4a34      	ldr	r2, [pc, #208]	@ (80006e4 <HAL_I2C_MspInit+0x140>)
 8000612:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000614:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 800063a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800063e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000640:	4827      	ldr	r0, [pc, #156]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000642:	f002 f813 	bl	800266c <HAL_DMA_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 800064c:	f000 fab5 	bl	8000bba <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000654:	639a      	str	r2, [r3, #56]	@ 0x38
 8000656:	4a22      	ldr	r2, [pc, #136]	@ (80006e0 <HAL_I2C_MspInit+0x13c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800065e:	4a23      	ldr	r2, [pc, #140]	@ (80006ec <HAL_I2C_MspInit+0x148>)
 8000660:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000664:	2210      	movs	r2, #16
 8000666:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000688:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800068c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800068e:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 8000690:	f001 ffec 	bl	800266c <HAL_DMA_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800069a:	f000 fa8e 	bl	8000bba <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a4:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <HAL_I2C_MspInit+0x144>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	201f      	movs	r0, #31
 80006b0:	f001 ff99 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006b4:	201f      	movs	r0, #31
 80006b6:	f001 ffb2 	bl	800261e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2020      	movs	r0, #32
 80006c0:	f001 ff91 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006c4:	2020      	movs	r0, #32
 80006c6:	f001 ffaa 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	2000015c 	.word	0x2000015c
 80006e4:	40020080 	.word	0x40020080
 80006e8:	200001a0 	.word	0x200001a0
 80006ec:	4002006c 	.word	0x4002006c

080006f0 <HAL_I2C_WriteCommand>:
 * 参    数：Control_bytes，控制字节
 * 参    数：Command 要写入的命令值，范围：0x00~0xFF
 * 返 回 值：无
 */
void HAL_I2C_WriteCommand(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t Command)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	807b      	strh	r3, [r7, #2]
 8000702:	460b      	mov	r3, r1
 8000704:	707b      	strb	r3, [r7, #1]
 8000706:	4613      	mov	r3, r2
 8000708:	703b      	strb	r3, [r7, #0]
    uint8_t TxData[2] = { Control_bytes , Command }; // 将控制字节和命令值打包
 800070a:	787b      	ldrb	r3, [r7, #1]
 800070c:	733b      	strb	r3, [r7, #12]
 800070e:	783b      	ldrb	r3, [r7, #0]
 8000710:	737b      	strb	r3, [r7, #13]

//    HAL_I2C_Master_Transmit(&hi2c1 , DevAddress << 1 , TxData , 2 , HAL_MAX_DELAY);
//      HAL_I2C_Master_Transmit_IT(&hi2c1 , DevAddress << 1 , TxData , 2 );
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 2);
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b299      	uxth	r1, r3
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	2302      	movs	r3, #2
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <HAL_I2C_WriteCommand+0x4c>)
 8000720:	f002 fede 	bl	80034e0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000724:	bf00      	nop
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <HAL_I2C_WriteCommand+0x4c>)
 8000728:	f003 fa7c 	bl	8003c24 <HAL_I2C_GetState>
 800072c:	4603      	mov	r3, r0
 800072e:	2b20      	cmp	r3, #32
 8000730:	d1f9      	bne.n	8000726 <HAL_I2C_WriteCommand+0x36>

}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000108 	.word	0x20000108

08000740 <HAL_I2C_WriteData>:
 * 参    数：DataLength，要写入数据的数量
 * 返 回 值：无
 */
void HAL_I2C_WriteData(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Control_bytes, uint8_t *Data,
        uint8_t DataLength)
{
 8000740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000744:	b089      	sub	sp, #36	@ 0x24
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	817b      	strh	r3, [r7, #10]
 8000750:	4613      	mov	r3, r2
 8000752:	727b      	strb	r3, [r7, #9]
 8000754:	466b      	mov	r3, sp
 8000756:	461e      	mov	r6, r3
    uint8_t TxData[1 + DataLength]; // 创建缓冲区，包含控制字节和数据
 8000758:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800075c:	1c59      	adds	r1, r3, #1
 800075e:	1e4b      	subs	r3, r1, #1
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	460a      	mov	r2, r1
 8000764:	2300      	movs	r3, #0
 8000766:	4690      	mov	r8, r2
 8000768:	4699      	mov	r9, r3
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800077a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800077e:	460a      	mov	r2, r1
 8000780:	2300      	movs	r3, #0
 8000782:	4614      	mov	r4, r2
 8000784:	461d      	mov	r5, r3
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	00eb      	lsls	r3, r5, #3
 8000790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000794:	00e2      	lsls	r2, r4, #3
 8000796:	460b      	mov	r3, r1
 8000798:	3307      	adds	r3, #7
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	ebad 0d03 	sub.w	sp, sp, r3
 80007a2:	466b      	mov	r3, sp
 80007a4:	3300      	adds	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    TxData[0] = Control_bytes;        // 第一个字节是控制字节
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	7a7a      	ldrb	r2, [r7, #9]
 80007ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < DataLength; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	77fb      	strb	r3, [r7, #31]
 80007b2:	e00a      	b.n	80007ca <HAL_I2C_WriteData+0x8a>
    {
        TxData[1 + i] = Data[i];    // 将数据复制到缓冲区
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	441a      	add	r2, r3
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	3301      	adds	r3, #1
 80007be:	7811      	ldrb	r1, [r2, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < DataLength; i++)
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	3301      	adds	r3, #1
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	7ffa      	ldrb	r2, [r7, #31]
 80007cc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3ef      	bcc.n	80007b4 <HAL_I2C_WriteData+0x74>
    }
//    HAL_I2C_Master_Transmit(&hi2c1, DevAddress << 1, TxData,  1 + DataLength, HAL_MAX_DELAY);
//    HAL_I2C_Master_Transmit_IT(&hi2c1, DevAddress << 1, TxData,  1 + DataLength);
    HAL_I2C_Master_Transmit_DMA(&hi2c1 , DevAddress << 1 , TxData , 1 + DataLength); // 发送数据
 80007d4:	897b      	ldrh	r3, [r7, #10]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	b299      	uxth	r1, r3
 80007da:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <HAL_I2C_WriteData+0xc8>)
 80007e8:	f002 fe7a 	bl	80034e0 <HAL_I2C_Master_Transmit_DMA>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007ec:	bf00      	nop
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <HAL_I2C_WriteData+0xc8>)
 80007f0:	f003 fa18 	bl	8003c24 <HAL_I2C_GetState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b20      	cmp	r3, #32
 80007f8:	d1f9      	bne.n	80007ee <HAL_I2C_WriteData+0xae>
 80007fa:	46b5      	mov	sp, r6
}
 80007fc:	bf00      	nop
 80007fe:	3724      	adds	r7, #36	@ 0x24
 8000800:	46bd      	mov	sp, r7
 8000802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000806:	bf00      	nop
 8000808:	20000108 	.word	0x20000108

0800080c <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b08b      	sub	sp, #44	@ 0x2c
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a58      	ldr	r2, [pc, #352]	@ (8000978 <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	f040 80a9 	bne.w	8000970 <HAL_ADC_ConvHalfCpltCallback+0x164>
    {
        static uint8_t i = 0;
//    i++;
        // 遍历所有通道进行滤波
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
 8000822:	e067      	b.n	80008f4 <HAL_ADC_ConvHalfCpltCallback+0xe8>
        {
            // 更新滤波器
            joystick_filters[ch].buffer[joystick_filters[ch].index] = adc_raw[ch];
 8000824:	7df8      	ldrb	r0, [r7, #23]
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	7df9      	ldrb	r1, [r7, #23]
 800082a:	4c54      	ldr	r4, [pc, #336]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800082c:	460b      	mov	r3, r1
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4423      	add	r3, r4
 8000836:	3310      	adds	r3, #16
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461c      	mov	r4, r3
 800083c:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <HAL_ADC_ConvHalfCpltCallback+0x174>)
 800083e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000842:	b298      	uxth	r0, r3
 8000844:	494d      	ldr	r1, [pc, #308]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8000846:	4613      	mov	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4413      	add	r3, r2
 800084c:	4423      	add	r3, r4
 800084e:	4602      	mov	r2, r0
 8000850:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            joystick_filters[ch].index = (joystick_filters[ch].index + 1) % FILTER_WINDOW;
 8000854:	7dfa      	ldrb	r2, [r7, #23]
 8000856:	4949      	ldr	r1, [pc, #292]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8000858:	4613      	mov	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	440b      	add	r3, r1
 8000862:	3310      	adds	r3, #16
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	425a      	negs	r2, r3
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	f002 0207 	and.w	r2, r2, #7
 8000872:	bf58      	it	pl
 8000874:	4253      	negpl	r3, r2
 8000876:	7dfa      	ldrb	r2, [r7, #23]
 8000878:	b2d8      	uxtb	r0, r3
 800087a:	4940      	ldr	r1, [pc, #256]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	440b      	add	r3, r1
 8000886:	3310      	adds	r3, #16
 8000888:	4602      	mov	r2, r0
 800088a:	701a      	strb	r2, [r3, #0]

            // 计算滑动平均
            uint32_t sum = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e00f      	b.n	80008b6 <HAL_ADC_ConvHalfCpltCallback+0xaa>
            {
                sum += joystick_filters[ch].buffer[i];
 8000896:	7dfa      	ldrb	r2, [r7, #23]
 8000898:	7bf9      	ldrb	r1, [r7, #15]
 800089a:	4838      	ldr	r0, [pc, #224]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x170>)
 800089c:	4613      	mov	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4413      	add	r3, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80008a8:	461a      	mov	r2, r3
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	4413      	add	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
            for (uint8_t i = 0; i < FILTER_WINDOW; i++)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d9ec      	bls.n	8000896 <HAL_ADC_ConvHalfCpltCallback+0x8a>
            }
            filtered_values[ch] = sum / FILTER_WINDOW;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	b291      	uxth	r1, r2
 80008c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (abs(filtered_values[ch] - 2048) <= DEADZONE_THRESHOLD)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfb8      	it	lt
 80008dc:	425b      	neglt	r3, r3
 80008de:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e0:	dc05      	bgt.n	80008ee <HAL_ADC_ConvHalfCpltCallback+0xe2>
            {
                filtered_values[ch] = 2048;
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t ch = 0; ch < ADC_CHANNELS; ch++)
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	3301      	adds	r3, #1
 80008f2:	75fb      	strb	r3, [r7, #23]
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d994      	bls.n	8000824 <HAL_ADC_ConvHalfCpltCallback+0x18>
            }
        }
        if (filtered_values[0] == 2048)
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000904:	d102      	bne.n	800090c <HAL_ADC_ConvHalfCpltCallback+0x100>
            i = 1;
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
        if (i == 1)
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d12d      	bne.n	8000970 <HAL_ADC_ConvHalfCpltCallback+0x164>
        {
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d" , filtered_values[0] , filtered_values[1] ,
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800091e:	885b      	ldrh	r3, [r3, #2]
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
                    filtered_values[2] , filtered_values[3]);
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d" , filtered_values[0] , filtered_values[1] ,
 800092a:	4619      	mov	r1, r3
                    filtered_values[2] , filtered_values[3]);
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800092e:	88db      	ldrh	r3, [r3, #6]
 8000930:	b29b      	uxth	r3, r3
            snprintf(tx_buffer , MAX_MSG_LEN , "%d,%d,%d,%d" , filtered_values[0] , filtered_values[1] ,
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	9101      	str	r1, [sp, #4]
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	4a14      	ldr	r2, [pc, #80]	@ (800098c <HAL_ADC_ConvHalfCpltCallback+0x180>)
 800093c:	2114      	movs	r1, #20
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8000940:	f007 fca6 	bl	8008290 <sniprintf>

            sprintf(remode1 , "%d,%d " , filtered_values[0] , filtered_values[1]);
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800094e:	885b      	ldrh	r3, [r3, #2]
 8000950:	b29b      	uxth	r3, r3
 8000952:	4910      	ldr	r1, [pc, #64]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8000954:	4810      	ldr	r0, [pc, #64]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8000956:	f007 fcd1 	bl	80082fc <siprintf>
            sprintf(remode2 , "%d,%d " , filtered_values[2] , filtered_values[3]);
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8000964:	88db      	ldrh	r3, [r3, #6]
 8000966:	b29b      	uxth	r3, r3
 8000968:	490a      	ldr	r1, [pc, #40]	@ (8000994 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <HAL_ADC_ConvHalfCpltCallback+0x190>)
 800096c:	f007 fcc6 	bl	80082fc <siprintf>

        }
    }
}
 8000970:	bf00      	nop
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000094 	.word	0x20000094
 800097c:	20000274 	.word	0x20000274
 8000980:	20000260 	.word	0x20000260
 8000984:	20000268 	.word	0x20000268
 8000988:	200002bc 	.word	0x200002bc
 800098c:	08008c74 	.word	0x08008c74
 8000990:	200001e4 	.word	0x200001e4
 8000994:	08008c80 	.word	0x08008c80
 8000998:	200001f8 	.word	0x200001f8
 800099c:	2000022c 	.word	0x2000022c

080009a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d102      	bne.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        timer_flag =1; // 设置2000ms标志
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]

    }
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40012c00 	.word	0x40012c00
 80009c8:	20000270 	.word	0x20000270

080009cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8

    /* USER CODE BEGIN 1 */
 uint8_t i=0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80009d6:	f000 ff67 	bl	80018a8 <HAL_Init>

    /* USER CODE BEGIN Init */
    HAL_SYSTICK_IRQHandler();
 80009da:	f001 fe3a 	bl	8002652 <HAL_SYSTICK_IRQHandler>
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80009de:	f000 f891 	bl	8000b04 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80009e2:	f7ff fcf1 	bl	80003c8 <MX_GPIO_Init>
    MX_DMA_Init();
 80009e6:	f7ff fcb1 	bl	800034c <MX_DMA_Init>
    MX_I2C1_Init();
 80009ea:	f7ff fdad 	bl	8000548 <MX_I2C1_Init>
    MX_ADC1_Init();
 80009ee:	f7ff fbb5 	bl	800015c <MX_ADC1_Init>
    MX_SPI1_Init();
 80009f2:	f000 fc39 	bl	8001268 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 80009f6:	f000 feb3 	bl	8001760 <MX_USART1_UART_Init>
    MX_TIM1_Init();
 80009fa:	f000 fe39 	bl	8001670 <MX_TIM1_Init>
    /* USER CODE BEGIN 2 */
    // 启动定时器中断
    HAL_TIM_Base_Start_IT(&htim1);
 80009fe:	4836      	ldr	r0, [pc, #216]	@ (8000ad8 <main+0x10c>)
 8000a00:	f006 f9e0 	bl	8006dc4 <HAL_TIM_Base_Start_IT>

    // 初始化滤波器结构体
    memset(joystick_filters , 0 , sizeof(joystick_filters));
 8000a04:	2248      	movs	r2, #72	@ 0x48
 8000a06:	2100      	movs	r1, #0
 8000a08:	4834      	ldr	r0, [pc, #208]	@ (8000adc <main+0x110>)
 8000a0a:	f007 fc99 	bl	8008340 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000a0e:	4834      	ldr	r0, [pc, #208]	@ (8000ae0 <main+0x114>)
 8000a10:	f001 fc5a 	bl	80022c8 <HAL_ADCEx_Calibration_Start>
    hadc1.Instance->CR2 |= ADC_CR2_CAL;  // 启动内部校准
 8000a14:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <main+0x114>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <main+0x114>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0204 	orr.w	r2, r2, #4
 8000a22:	609a      	str	r2, [r3, #8]
    while (hadc1.Instance->CR2 & ADC_CR2_CAL); // 等待校准完成
 8000a24:	bf00      	nop
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <main+0x114>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f8      	bne.n	8000a26 <main+0x5a>

    OLED_Init();                           //OLED初始
 8000a34:	f007 fa9a 	bl	8007f6c <OLED_Init>
    OLED_ShowString(42 , 3 , "hellow" , 12 , 0);    //反相显示8X16字符串
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ae4 <main+0x118>)
 8000a40:	2103      	movs	r1, #3
 8000a42:	202a      	movs	r0, #42	@ 0x2a
 8000a44:	f007 fbd4 	bl	80081f0 <OLED_ShowString>

    //RF24L01引脚初始化
    NRF24L01_Gpio_Init();
 8000a48:	f000 fb8c 	bl	8001164 <NRF24L01_Gpio_Init>

    //检测nRF24L01
    while (NRF24L01_check_DMA() == 0)
 8000a4c:	e001      	b.n	8000a52 <main+0x86>
        RF24L01_Init_DMA();
 8000a4e:	f000 fba5 	bl	800119c <RF24L01_Init_DMA>
    while (NRF24L01_check_DMA() == 0)
 8000a52:	f000 fa11 	bl	8000e78 <NRF24L01_check_DMA>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f8      	beq.n	8000a4e <main+0x82>
    RF24L01_Set_Mode_DMA(MODE_TX);        //发送模式
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 faa7 	bl	8000fb0 <RF24L01_Set_Mode_DMA>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000a62:	2204      	movs	r2, #4
 8000a64:	4920      	ldr	r1, [pc, #128]	@ (8000ae8 <main+0x11c>)
 8000a66:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <main+0x114>)
 8000a68:	f001 f87c 	bl	8001b64 <HAL_ADC_Start_DMA>
        if (timer_flag>=1)
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <main+0x120>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d013      	beq.n	8000a9e <main+0xd2>
        {
            if (NRF24L01_TxPacket_DMA((uint8_t*) tx_buffer , strlen(tx_buffer)) == TX_OK)
 8000a76:	481e      	ldr	r0, [pc, #120]	@ (8000af0 <main+0x124>)
 8000a78:	f7ff fb68 	bl	800014c <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	481b      	ldr	r0, [pc, #108]	@ (8000af0 <main+0x124>)
 8000a84:	f000 faec 	bl	8001060 <NRF24L01_TxPacket_DMA>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d107      	bne.n	8000a9e <main+0xd2>
            { // 发送成功处理
                timer_flag = 0; // 清除标志
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <main+0x120>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_TogglePin(GPIOC , GPIO_PIN_13);
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	4816      	ldr	r0, [pc, #88]	@ (8000af4 <main+0x128>)
 8000a9a:	f002 fbaf 	bl	80031fc <HAL_GPIO_TogglePin>
            }
        }
        OLED_ShowString(0 , 0 , remode1 , 12 , 0);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <main+0x12c>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f007 fba1 	bl	80081f0 <OLED_ShowString>
        OLED_ShowString(64 , 0 , remode2 , 12 , 0);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <main+0x130>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2040      	movs	r0, #64	@ 0x40
 8000aba:	f007 fb99 	bl	80081f0 <OLED_ShowString>
            if (clean>=15 && i==0)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <main+0x134>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b0e      	cmp	r3, #14
 8000ac4:	d9cd      	bls.n	8000a62 <main+0x96>
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ca      	bne.n	8000a62 <main+0x96>
            {
                OLED_Clear();
 8000acc:	f007 fa90 	bl	8007ff0 <OLED_Clear>
                i=1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
        HAL_ADC_Start_DMA(&hadc1 , (uint32_t*) adc_raw , ADC_CHANNELS);
 8000ad4:	e7c5      	b.n	8000a62 <main+0x96>
 8000ad6:	bf00      	nop
 8000ad8:	200003a4 	.word	0x200003a4
 8000adc:	20000274 	.word	0x20000274
 8000ae0:	20000094 	.word	0x20000094
 8000ae4:	08008c88 	.word	0x08008c88
 8000ae8:	20000260 	.word	0x20000260
 8000aec:	20000270 	.word	0x20000270
 8000af0:	200001e4 	.word	0x200001e4
 8000af4:	40011000 	.word	0x40011000
 8000af8:	200001f8 	.word	0x200001f8
 8000afc:	2000022c 	.word	0x2000022c
 8000b00:	20000458 	.word	0x20000458

08000b04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	@ 0x50
 8000b08:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b0e:	2228      	movs	r2, #40	@ 0x28
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fc14 	bl	8008340 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b50:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fc02 	bl	8005364 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x66>
    {
        Error_Handler();
 8000b66:	f000 f828 	bl	8000bba <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct , FLASH_LATENCY_2) != HAL_OK)
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2102      	movs	r1, #2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fe6e 	bl	8005868 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000b92:	f000 f812 	bl	8000bba <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b96:	2302      	movs	r3, #2
 8000b98:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000b9a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b9e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 ffee 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000bae:	f000 f804 	bl	8000bba <Error_Handler>
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	@ 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbe:	b672      	cpsid	i
}
 8000bc0:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <Error_Handler+0x8>
	...

08000bc8 <drv_spi_read_write_byte>:
 *         @TxByte: 发送的数据字节
 * @note  :非堵塞式，一旦等待超时，函数会自动退出
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte(uint8_t TxByte)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1 , &TxByte , &rx_data , 1 , HAL_MAX_DELAY);
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	1df9      	adds	r1, r7, #7
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <drv_spi_read_write_byte+0x28>)
 8000be2:	f005 f9bf 	bl	8005f64 <HAL_SPI_TransmitReceive>
//    HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
//    while (HAL_SPI_GetState(&SPI1))!=HAL_SPI_STATE_READY);
    return rx_data;      //返回
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200002c0 	.word	0x200002c0

08000bf4 <drv_spi_read_write_byte_dma>:
 *         @TxByte: 发送的数据字节
 * @note  :使用DMA进行SPI传输，需要等待传输完成
 * @retval:接收到的字节
 */
uint8_t drv_spi_read_write_byte_dma(uint8_t TxByte)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_StatusTypeDef status;

    // 使用DMA进行SPI传输
    status = HAL_SPI_TransmitReceive_DMA(&hspi1, &TxByte, &rx_data, 1);
 8000bfe:	f107 020e 	add.w	r2, r7, #14
 8000c02:	1df9      	adds	r1, r7, #7
 8000c04:	2301      	movs	r3, #1
 8000c06:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <drv_spi_read_write_byte_dma+0x40>)
 8000c08:	f005 fc08 	bl	800641c <HAL_SPI_TransmitReceive_DMA>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK) {
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <drv_spi_read_write_byte_dma+0x26>
        // 处理错误情况
        Error_Handler();
 8000c16:	f7ff ffd0 	bl	8000bba <Error_Handler>
    }

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c1a:	bf00      	nop
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <drv_spi_read_write_byte_dma+0x40>)
 8000c1e:	f005 fe1e 	bl	800685e <HAL_SPI_GetState>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1f9      	bne.n	8000c1c <drv_spi_read_write_byte_dma+0x28>

    return rx_data;
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002c0 	.word	0x200002c0

08000c38 <NRF24L01_Read_Reg_DMA>:
 *         @RegAddr:寄存器地址
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:读取的数据
 */
uint8_t NRF24L01_Read_Reg_DMA(uint8_t RegAddr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2] = {NRF_READ_REG | RegAddr, 0xFF};  // 命令+空数据
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	733b      	strb	r3, [r7, #12]
 8000c46:	23ff      	movs	r3, #255	@ 0xff
 8000c48:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf[2] = {0};                            // 接收缓冲区
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	813b      	strh	r3, [r7, #8]

    RF24L01_SET_CS_LOW();          // 片选
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <NRF24L01_Read_Reg_DMA+0x54>)
 8000c54:	f002 faba 	bl	80031cc <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8000c58:	f107 0208 	add.w	r2, r7, #8
 8000c5c:	f107 010c 	add.w	r1, r7, #12
 8000c60:	2302      	movs	r3, #2
 8000c62:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <NRF24L01_Read_Reg_DMA+0x58>)
 8000c64:	f005 fbda 	bl	800641c <HAL_SPI_TransmitReceive_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c68:	bf00      	nop
 8000c6a:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <NRF24L01_Read_Reg_DMA+0x58>)
 8000c6c:	f005 fdf7 	bl	800685e <HAL_SPI_GetState>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d1f9      	bne.n	8000c6a <NRF24L01_Read_Reg_DMA+0x32>

    RF24L01_SET_CS_HIGH();         // 取消片选
 8000c76:	2201      	movs	r2, #1
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <NRF24L01_Read_Reg_DMA+0x54>)
 8000c7c:	f002 faa6 	bl	80031cc <HAL_GPIO_WritePin>

    return rx_buf[1];              // 返回接收到的数据
 8000c80:	7a7b      	ldrb	r3, [r7, #9]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	200002c0 	.word	0x200002c0

08000c94 <NRF24L01_Write_Reg_DMA>:
 *         @Value:要写入的值
 * @note  :使用DMA进行SPI传输，提高效率
 * @retval:无
 */
void NRF24L01_Write_Reg_DMA(uint8_t RegAddr, uint8_t Value)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[2] = {NRF_WRITE_REG | RegAddr, Value};  // 命令+数据
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	733b      	strb	r3, [r7, #12]
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();      // 片选
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <NRF24L01_Write_Reg_DMA+0x58>)
 8000cb8:	f002 fa88 	bl	80031cc <HAL_GPIO_WritePin>

    // 使用DMA进行SPI传输
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <NRF24L01_Write_Reg_DMA+0x5c>)
 8000cc6:	f005 faf7 	bl	80062b8 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cca:	bf00      	nop
 8000ccc:	4808      	ldr	r0, [pc, #32]	@ (8000cf0 <NRF24L01_Write_Reg_DMA+0x5c>)
 8000cce:	f005 fdc6 	bl	800685e <HAL_SPI_GetState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d1f9      	bne.n	8000ccc <NRF24L01_Write_Reg_DMA+0x38>

    RF24L01_SET_CS_HIGH();     // 取消片选
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4803      	ldr	r0, [pc, #12]	@ (8000cec <NRF24L01_Write_Reg_DMA+0x58>)
 8000cde:	f002 fa75 	bl	80031cc <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	200002c0 	.word	0x200002c0

08000cf4 <NRF24L01_Read_Status_Register>:
 * @param :无
 * @note  :无
 * @retval:RF24L01状态
 */
uint8_t NRF24L01_Read_Status_Register(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    uint8_t Status;

    RF24L01_SET_CS_LOW();      //片选
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <NRF24L01_Read_Status_Register+0x30>)
 8000d00:	f002 fa64 	bl	80031cc <HAL_GPIO_WritePin>

    Status = drv_spi_read_write_byte( NRF_READ_REG + STATUS);  //读状态寄存器
 8000d04:	2007      	movs	r0, #7
 8000d06:	f7ff ff5f 	bl	8000bc8 <drv_spi_read_write_byte>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]

    RF24L01_SET_CS_HIGH();     //取消片选
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2102      	movs	r1, #2
 8000d12:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <NRF24L01_Read_Status_Register+0x30>)
 8000d14:	f002 fa5a 	bl	80031cc <HAL_GPIO_WritePin>

    return Status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40010c00 	.word	0x40010c00

08000d28 <NRF24L01_Clear_IRQ_Flag>:
 @IRQ_Source:中断源
 * @note  :无
 * @retval:清除后状态寄存器的值
 */
uint8_t NRF24L01_Clear_IRQ_Flag(uint8_t IRQ_Source)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    IRQ_Source &= (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT); // 保留有效中断位
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d38:	71fb      	strb	r3, [r7, #7]
    status = NRF24L01_Read_Status_Register();                  // 读取当前状态
 8000d3a:	f7ff ffdb 	bl	8000cf4 <NRF24L01_Read_Status_Register>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_1 , GPIO_PIN_RESET); // 拉低CSN
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000d48:	f002 fa40 	bl	80031cc <HAL_GPIO_WritePin>
    drv_spi_read_write_byte(NRF_WRITE_REG + STATUS);          // 发送写命令
 8000d4c:	2027      	movs	r0, #39	@ 0x27
 8000d4e:	f7ff ff3b 	bl	8000bc8 <drv_spi_read_write_byte>
    drv_spi_read_write_byte(status | IRQ_Source);             // 写1清中断标志[1]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff34 	bl	8000bc8 <drv_spi_read_write_byte>
    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_1 , GPIO_PIN_SET);   // 拉高CSN
 8000d60:	2201      	movs	r2, #1
 8000d62:	2102      	movs	r1, #2
 8000d64:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <NRF24L01_Clear_IRQ_Flag+0x50>)
 8000d66:	f002 fa31 	bl	80031cc <HAL_GPIO_WritePin>

    return NRF24L01_Read_Status_Register();                   // 返回新状态
 8000d6a:	f7ff ffc3 	bl	8000cf4 <NRF24L01_Read_Status_Register>
 8000d6e:	4603      	mov	r3, r0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <NRF24L01_Set_TxAddr_DMA>:
 * @param :
 *         @pAddr:地址存放地址
 *         @len:长度
 */
void NRF24L01_Set_TxAddr_DMA(uint8_t *pAddr, uint8_t len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[6];  // 命令+5字节地址

    len = (len > 5) ? 5 : len;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	bf28      	it	cs
 8000d8e:	2305      	movcs	r3, #5
 8000d90:	70fb      	strb	r3, [r7, #3]
    tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8000d92:	2330      	movs	r3, #48	@ 0x30
 8000d94:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, len);
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f007 fb01 	bl	80083a8 <memcpy>

    RF24L01_SET_CS_LOW();
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8000dac:	f002 fa0e 	bl	80031cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, len + 1);
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8000dc0:	f005 fa7a 	bl	80062b8 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000dc4:	bf00      	nop
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <NRF24L01_Set_TxAddr_DMA+0x6c>)
 8000dc8:	f005 fd49 	bl	800685e <HAL_SPI_GetState>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d1f9      	bne.n	8000dc6 <NRF24L01_Set_TxAddr_DMA+0x4a>
    RF24L01_SET_CS_HIGH();
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <NRF24L01_Set_TxAddr_DMA+0x68>)
 8000dd8:	f002 f9f8 	bl	80031cc <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	200002c0 	.word	0x200002c0

08000dec <NRF24L01_Set_RxAddr_DMA>:
 *         @PipeNum:通道
 *         @pAddr:地址存放地址
 *         @Len:长度
 */
void NRF24L01_Set_RxAddr_DMA(uint8_t PipeNum, uint8_t *pAddr, uint8_t Len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buf[6];  // 命令+5字节地址

    Len = (Len > 5) ? 5 : Len;
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	bf28      	it	cs
 8000e02:	2305      	movcs	r3, #5
 8000e04:	71bb      	strb	r3, [r7, #6]
    PipeNum = (PipeNum > 5) ? 5 : PipeNum;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	bf28      	it	cs
 8000e0c:	2305      	movcs	r3, #5
 8000e0e:	71fb      	strb	r3, [r7, #7]

    tx_buf[0] = NRF_WRITE_REG | (RX_ADDR_P0 + PipeNum);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	330a      	adds	r3, #10
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	723b      	strb	r3, [r7, #8]
    memcpy(&tx_buf[1], pAddr, Len);
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	3301      	adds	r3, #1
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 fabb 	bl	80083a8 <memcpy>

    RF24L01_SET_CS_LOW();
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <NRF24L01_Set_RxAddr_DMA+0x84>)
 8000e38:	f002 f9c8 	bl	80031cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, Len + 1);
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8000e4c:	f005 fa34 	bl	80062b8 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e50:	bf00      	nop
 8000e52:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <NRF24L01_Set_RxAddr_DMA+0x88>)
 8000e54:	f005 fd03 	bl	800685e <HAL_SPI_GetState>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d1f9      	bne.n	8000e52 <NRF24L01_Set_RxAddr_DMA+0x66>
    RF24L01_SET_CS_HIGH();
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <NRF24L01_Set_RxAddr_DMA+0x84>)
 8000e64:	f002 f9b2 	bl	80031cc <HAL_GPIO_WritePin>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	200002c0 	.word	0x200002c0

08000e78 <NRF24L01_check_DMA>:
 * @param :无
 * @note  :使用DMA进行SPI传输检测模块
 * @retval:检测结果(0:失败, 1:成功)
 */
uint8_t NRF24L01_check_DMA(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t buf[5] = {0xA5, 0xA5, 0xA5, 0xA5, 0xA5};
 8000e7e:	4a48      	ldr	r2, [pc, #288]	@ (8000fa0 <NRF24L01_check_DMA+0x128>)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e88:	6018      	str	r0, [r3, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	7019      	strb	r1, [r3, #0]
    uint8_t read_buf[5] = {0};
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	711a      	strb	r2, [r3, #4]
    uint8_t tx_buf[6], rx_buf[6];
    uint32_t start_time = HAL_GetTick();
 8000e98:	f000 fd5e 	bl	8001958 <HAL_GetTick>
 8000e9c:	6238      	str	r0, [r7, #32]

    while(1) {
        // 使用DMA写入地址
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8000e9e:	2330      	movs	r3, #48	@ 0x30
 8000ea0:	723b      	strb	r3, [r7, #8]
        memcpy(&tx_buf[1], buf, 5);
 8000ea2:	f107 0309 	add.w	r3, r7, #9
 8000ea6:	f107 0218 	add.w	r2, r7, #24
 8000eaa:	6810      	ldr	r0, [r2, #0]
 8000eac:	6018      	str	r0, [r3, #0]
 8000eae:	7912      	ldrb	r2, [r2, #4]
 8000eb0:	711a      	strb	r2, [r3, #4]

        RF24L01_SET_CS_LOW();
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	483b      	ldr	r0, [pc, #236]	@ (8000fa4 <NRF24L01_check_DMA+0x12c>)
 8000eb8:	f002 f988 	bl	80031cc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 6);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4838      	ldr	r0, [pc, #224]	@ (8000fa8 <NRF24L01_check_DMA+0x130>)
 8000ec6:	f005 f9f7 	bl	80062b8 <HAL_SPI_Transmit_DMA>
        while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000eca:	bf00      	nop
 8000ecc:	4836      	ldr	r0, [pc, #216]	@ (8000fa8 <NRF24L01_check_DMA+0x130>)
 8000ece:	f005 fcc6 	bl	800685e <HAL_SPI_GetState>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d1f9      	bne.n	8000ecc <NRF24L01_check_DMA+0x54>
        RF24L01_SET_CS_HIGH();
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2102      	movs	r1, #2
 8000edc:	4831      	ldr	r0, [pc, #196]	@ (8000fa4 <NRF24L01_check_DMA+0x12c>)
 8000ede:	f002 f975 	bl	80031cc <HAL_GPIO_WritePin>

        // 使用DMA读取地址
        tx_buf[0] = NRF_READ_REG | TX_ADDR;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	723b      	strb	r3, [r7, #8]
        memset(&tx_buf[1], 0xFF, 5);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	3301      	adds	r3, #1
 8000eec:	2205      	movs	r2, #5
 8000eee:	21ff      	movs	r1, #255	@ 0xff
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fa25 	bl	8008340 <memset>

        RF24L01_SET_CS_LOW();
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	482a      	ldr	r0, [pc, #168]	@ (8000fa4 <NRF24L01_check_DMA+0x12c>)
 8000efc:	f002 f966 	bl	80031cc <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 6);
 8000f00:	463a      	mov	r2, r7
 8000f02:	f107 0108 	add.w	r1, r7, #8
 8000f06:	2306      	movs	r3, #6
 8000f08:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <NRF24L01_check_DMA+0x130>)
 8000f0a:	f005 fa87 	bl	800641c <HAL_SPI_TransmitReceive_DMA>
        while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f0e:	bf00      	nop
 8000f10:	4825      	ldr	r0, [pc, #148]	@ (8000fa8 <NRF24L01_check_DMA+0x130>)
 8000f12:	f005 fca4 	bl	800685e <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <NRF24L01_check_DMA+0x98>
        RF24L01_SET_CS_HIGH();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <NRF24L01_check_DMA+0x12c>)
 8000f22:	f002 f953 	bl	80031cc <HAL_GPIO_WritePin>

        // 比较结果
        for(i = 0; i < 5; i++) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f2c:	e013      	b.n	8000f56 <NRF24L01_check_DMA+0xde>
            if(buf[i] != rx_buf[i+1]) {
 8000f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f32:	3328      	adds	r3, #40	@ 0x28
 8000f34:	443b      	add	r3, r7
 8000f36:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f3e:	3301      	adds	r3, #1
 8000f40:	3328      	adds	r3, #40	@ 0x28
 8000f42:	443b      	add	r3, r7
 8000f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d109      	bne.n	8000f60 <NRF24L01_check_DMA+0xe8>
        for(i = 0; i < 5; i++) {
 8000f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f50:	3301      	adds	r3, #1
 8000f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d9e7      	bls.n	8000f2e <NRF24L01_check_DMA+0xb6>
 8000f5e:	e000      	b.n	8000f62 <NRF24L01_check_DMA+0xea>
                break;
 8000f60:	bf00      	nop
            }
        }

        if(i == 5) {
 8000f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d101      	bne.n	8000f6e <NRF24L01_check_DMA+0xf6>
            return 1; // 检测成功
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e013      	b.n	8000f96 <NRF24L01_check_DMA+0x11e>
        }

        // 超时处理(5秒超时)
        if(HAL_GetTick() - start_time > 5000) {
 8000f6e:	f000 fcf3 	bl	8001958 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <NRF24L01_check_DMA+0x10c>
            return 0; // 检测失败
 8000f80:	2300      	movs	r3, #0
 8000f82:	e008      	b.n	8000f96 <NRF24L01_check_DMA+0x11e>
        }

        // 错误指示
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f88:	4808      	ldr	r0, [pc, #32]	@ (8000fac <NRF24L01_check_DMA+0x134>)
 8000f8a:	f002 f937 	bl	80031fc <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f000 fcec 	bl	800196c <HAL_Delay>
        tx_buf[0] = NRF_WRITE_REG | TX_ADDR;
 8000f94:	e783      	b.n	8000e9e <NRF24L01_check_DMA+0x26>
    }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08008cac 	.word	0x08008cac
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	200002c0 	.word	0x200002c0
 8000fac:	40011000 	.word	0x40011000

08000fb0 <RF24L01_Set_Mode_DMA>:
 *         @Mode:模式发送模式或接收模式
 * @note  :使用DMA进行寄存器读写
 * @retval:无
 */
void RF24L01_Set_Mode_DMA(nRf24l01ModeType Mode)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2], rx_buf[2];

    // 使用DMA读取CONFIG寄存器
    tx_buf[0] = NRF_READ_REG | CONFIG;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0xFF;
 8000fbe:	23ff      	movs	r3, #255	@ 0xff
 8000fc0:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4824      	ldr	r0, [pc, #144]	@ (8001058 <RF24L01_Set_Mode_DMA+0xa8>)
 8000fc8:	f002 f900 	bl	80031cc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buf, rx_buf, 2);
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	f107 010c 	add.w	r1, r7, #12
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	4821      	ldr	r0, [pc, #132]	@ (800105c <RF24L01_Set_Mode_DMA+0xac>)
 8000fd8:	f005 fa20 	bl	800641c <HAL_SPI_TransmitReceive_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000fdc:	bf00      	nop
 8000fde:	481f      	ldr	r0, [pc, #124]	@ (800105c <RF24L01_Set_Mode_DMA+0xac>)
 8000fe0:	f005 fc3d 	bl	800685e <HAL_SPI_GetState>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d1f9      	bne.n	8000fde <RF24L01_Set_Mode_DMA+0x2e>
    RF24L01_SET_CS_HIGH();
 8000fea:	2201      	movs	r2, #1
 8000fec:	2102      	movs	r1, #2
 8000fee:	481a      	ldr	r0, [pc, #104]	@ (8001058 <RF24L01_Set_Mode_DMA+0xa8>)
 8000ff0:	f002 f8ec 	bl	80031cc <HAL_GPIO_WritePin>

    uint8_t controlreg = rx_buf[1];
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	73fb      	strb	r3, [r7, #15]

    // 修改模式位
    if (Mode == MODE_TX) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <RF24L01_Set_Mode_DMA+0x58>
        controlreg &= ~(1 << PRIM_RX);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e006      	b.n	8001016 <RF24L01_Set_Mode_DMA+0x66>
    }
    else if (Mode == MODE_RX) {
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d103      	bne.n	8001016 <RF24L01_Set_Mode_DMA+0x66>
        controlreg |= (1 << PRIM_RX);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
    }

    // 使用DMA写入CONFIG寄存器
    tx_buf[0] = NRF_WRITE_REG | CONFIG;
 8001016:	2320      	movs	r3, #32
 8001018:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = controlreg;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	737b      	strb	r3, [r7, #13]

    RF24L01_SET_CS_LOW();
 800101e:	2200      	movs	r2, #0
 8001020:	2102      	movs	r1, #2
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <RF24L01_Set_Mode_DMA+0xa8>)
 8001024:	f002 f8d2 	bl	80031cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2202      	movs	r2, #2
 800102e:	4619      	mov	r1, r3
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <RF24L01_Set_Mode_DMA+0xac>)
 8001032:	f005 f941 	bl	80062b8 <HAL_SPI_Transmit_DMA>
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001036:	bf00      	nop
 8001038:	4808      	ldr	r0, [pc, #32]	@ (800105c <RF24L01_Set_Mode_DMA+0xac>)
 800103a:	f005 fc10 	bl	800685e <HAL_SPI_GetState>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1f9      	bne.n	8001038 <RF24L01_Set_Mode_DMA+0x88>
    RF24L01_SET_CS_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <RF24L01_Set_Mode_DMA+0xa8>)
 800104a:	f002 f8bf 	bl	80031cc <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40010c00 	.word	0x40010c00
 800105c:	200002c0 	.word	0x200002c0

08001060 <NRF24L01_TxPacket_DMA>:
 *         MAX_TX：达到最大重发次数
 *         TX_OK：发送完成
 *         0xFF:其他原因
 */
uint8_t NRF24L01_TxPacket_DMA(uint8_t *txbuf, uint8_t Length)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    uint8_t l_Status = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]
    uint32_t start_time = HAL_GetTick();
 8001070:	f000 fc72 	bl	8001958 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]
    uint8_t tx_cmd = WR_TX_PLOAD;
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	73fb      	strb	r3, [r7, #15]

    // 清空TX FIFO
    RF24L01_SET_CS_LOW();
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	4836      	ldr	r0, [pc, #216]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 8001080:	f002 f8a4 	bl	80031cc <HAL_GPIO_WritePin>
    drv_spi_read_write_byte_dma(FLUSH_TX);
 8001084:	20e1      	movs	r0, #225	@ 0xe1
 8001086:	f7ff fdb5 	bl	8000bf4 <drv_spi_read_write_byte_dma>
    RF24L01_SET_CS_HIGH();
 800108a:	2201      	movs	r2, #1
 800108c:	2102      	movs	r1, #2
 800108e:	4832      	ldr	r0, [pc, #200]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 8001090:	f002 f89c 	bl	80031cc <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	482f      	ldr	r0, [pc, #188]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 800109a:	f002 f897 	bl	80031cc <HAL_GPIO_WritePin>

    // 使用DMA发送数据
    RF24L01_SET_CS_LOW();
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	482d      	ldr	r0, [pc, #180]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 80010a4:	f002 f892 	bl	80031cc <HAL_GPIO_WritePin>

    // 先发送命令字节
    drv_spi_read_write_byte_dma(tx_cmd);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fda2 	bl	8000bf4 <drv_spi_read_write_byte_dma>

    // 然后使用DMA发送数据负载
    HAL_SPI_Transmit_DMA(&hspi1, txbuf, Length);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4828      	ldr	r0, [pc, #160]	@ (800115c <NRF24L01_TxPacket_DMA+0xfc>)
 80010ba:	f005 f8fd 	bl	80062b8 <HAL_SPI_Transmit_DMA>

    // 等待DMA传输完成
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010be:	bf00      	nop
 80010c0:	4826      	ldr	r0, [pc, #152]	@ (800115c <NRF24L01_TxPacket_DMA+0xfc>)
 80010c2:	f005 fbcc 	bl	800685e <HAL_SPI_GetState>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1f9      	bne.n	80010c0 <NRF24L01_TxPacket_DMA+0x60>

    RF24L01_SET_CS_HIGH();
 80010cc:	2201      	movs	r2, #1
 80010ce:	2102      	movs	r1, #2
 80010d0:	4821      	ldr	r0, [pc, #132]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 80010d2:	f002 f87b 	bl	80031cc <HAL_GPIO_WritePin>
    RF24L01_SET_CE_HIGH();  // 启动发送
 80010d6:	2201      	movs	r2, #1
 80010d8:	2101      	movs	r1, #1
 80010da:	481f      	ldr	r0, [pc, #124]	@ (8001158 <NRF24L01_TxPacket_DMA+0xf8>)
 80010dc:	f002 f876 	bl	80031cc <HAL_GPIO_WritePin>

    // 等待传输完成或超时
    while (RF24L01_GET_IRQ_STATUS() != 0)
 80010e0:	e012      	b.n	8001108 <NRF24L01_TxPacket_DMA+0xa8>
    {
        if (HAL_GetTick() - start_time > 500)  // 500ms超时
 80010e2:	f000 fc39 	bl	8001958 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010f0:	d907      	bls.n	8001102 <NRF24L01_TxPacket_DMA+0xa2>
        {
            NRF24L01_Gpio_Init();
 80010f2:	f000 f837 	bl	8001164 <NRF24L01_Gpio_Init>
            RF24L01_Init_DMA();
 80010f6:	f000 f851 	bl	800119c <RF24L01_Init_DMA>
            RF24L01_Set_Mode_DMA(MODE_TX);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ff58 	bl	8000fb0 <RF24L01_Set_Mode_DMA>
            break;
 8001100:	e008      	b.n	8001114 <NRF24L01_TxPacket_DMA+0xb4>
        }
        HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fc32 	bl	800196c <HAL_Delay>
    while (RF24L01_GET_IRQ_STATUS() != 0)
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <NRF24L01_TxPacket_DMA+0x100>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b10      	cmp	r3, #16
 8001112:	d0e6      	beq.n	80010e2 <NRF24L01_TxPacket_DMA+0x82>
    }

    // 读取并清除状态
    l_Status = NRF24L01_Read_Reg_DMA(STATUS);
 8001114:	2007      	movs	r0, #7
 8001116:	f7ff fd8f 	bl	8000c38 <NRF24L01_Read_Reg_DMA>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
    NRF24L01_Write_Reg_DMA(STATUS, l_Status);
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	4619      	mov	r1, r3
 8001122:	2007      	movs	r0, #7
 8001124:	f7ff fdb6 	bl	8000c94 <NRF24L01_Write_Reg_DMA>

    if (l_Status & MAX_TX) // 达到最大重发次数
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <NRF24L01_TxPacket_DMA+0xde>
    {
        NRF24L01_Write_Reg_DMA(FLUSH_TX, 0xff);
 8001132:	21ff      	movs	r1, #255	@ 0xff
 8001134:	20e1      	movs	r0, #225	@ 0xe1
 8001136:	f7ff fdad 	bl	8000c94 <NRF24L01_Write_Reg_DMA>
        return MAX_TX;
 800113a:	2310      	movs	r3, #16
 800113c:	e007      	b.n	800114e <NRF24L01_TxPacket_DMA+0xee>
    }
    if (l_Status & TX_OK)  // 发送完成
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <NRF24L01_TxPacket_DMA+0xec>
    {
        return TX_OK;
 8001148:	2320      	movs	r3, #32
 800114a:	e000      	b.n	800114e <NRF24L01_TxPacket_DMA+0xee>
    }

    return 0xFF;  // 其他原因发送失败
 800114c:	23ff      	movs	r3, #255	@ 0xff
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010c00 	.word	0x40010c00
 800115c:	200002c0 	.word	0x200002c0
 8001160:	40010800 	.word	0x40010800

08001164 <NRF24L01_Gpio_Init>:
 * @param :无
 * @note  :无
 * @retval:无
 */
void NRF24L01_Gpio_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB , GPIO_PIN_0 , GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	4809      	ldr	r0, [pc, #36]	@ (8001194 <NRF24L01_Gpio_Init+0x30>)
 800116e:	f002 f82d 	bl	80031cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA , GPIO_PIN_4 , GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2110      	movs	r1, #16
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <NRF24L01_Gpio_Init+0x34>)
 8001178:	f002 f828 	bl	80031cc <HAL_GPIO_WritePin>

    RF24L01_SET_CE_LOW();      //??24L01
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <NRF24L01_Gpio_Init+0x30>)
 8001182:	f002 f823 	bl	80031cc <HAL_GPIO_WritePin>
    RF24L01_SET_CS_HIGH();     //??SPI??
 8001186:	2201      	movs	r2, #1
 8001188:	2102      	movs	r1, #2
 800118a:	4802      	ldr	r0, [pc, #8]	@ (8001194 <NRF24L01_Gpio_Init+0x30>)
 800118c:	f002 f81e 	bl	80031cc <HAL_GPIO_WritePin>

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40010800 	.word	0x40010800

0800119c <RF24L01_Init_DMA>:
 * @param :无
 * @note  :使用DMA批量配置寄存器，提高初始化速度
 * @retval:无
 */
void RF24L01_Init_DMA(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
    uint8_t addr[5] = { INIT_ADDR };
 80011a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001258 <RF24L01_Init_DMA+0xbc>)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011aa:	6018      	str	r0, [r3, #0]
 80011ac:	3304      	adds	r3, #4
 80011ae:	7019      	strb	r1, [r3, #0]

    // 初始化状态
    RF24L01_SET_CE_HIGH();
 80011b0:	2201      	movs	r2, #1
 80011b2:	2101      	movs	r1, #1
 80011b4:	4829      	ldr	r0, [pc, #164]	@ (800125c <RF24L01_Init_DMA+0xc0>)
 80011b6:	f002 f809 	bl	80031cc <HAL_GPIO_WritePin>
    NRF24L01_Clear_IRQ_Flag(IRQ_ALL);
 80011ba:	2070      	movs	r0, #112	@ 0x70
 80011bc:	f7ff fdb4 	bl	8000d28 <NRF24L01_Clear_IRQ_Flag>
        {RF_CH, 60},
        {RF_SETUP, 0x26}
    };

    // 使用DMA批量写入寄存器配置
    for (int i = 0; i < sizeof(init_config)/sizeof(init_config[0]); i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e036      	b.n	8001234 <RF24L01_Init_DMA+0x98>
        uint8_t tx_buf[2] = {NRF_WRITE_REG | init_config[i].reg, init_config[i].val};
 80011c6:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <RF24L01_Init_DMA+0xc4>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80011ce:	f043 0320 	orr.w	r3, r3, #32
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	703b      	strb	r3, [r7, #0]
 80011d6:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <RF24L01_Init_DMA+0xc4>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	707b      	strb	r3, [r7, #1]

        RF24L01_SET_CS_LOW();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	481d      	ldr	r0, [pc, #116]	@ (800125c <RF24L01_Init_DMA+0xc0>)
 80011e8:	f001 fff0 	bl	80031cc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit_DMA(&hspi1, tx_buf, 2);
 80011ec:	463b      	mov	r3, r7
 80011ee:	2202      	movs	r2, #2
 80011f0:	4619      	mov	r1, r3
 80011f2:	481c      	ldr	r0, [pc, #112]	@ (8001264 <RF24L01_Init_DMA+0xc8>)
 80011f4:	f005 f860 	bl	80062b8 <HAL_SPI_Transmit_DMA>
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011f8:	bf00      	nop
 80011fa:	481a      	ldr	r0, [pc, #104]	@ (8001264 <RF24L01_Init_DMA+0xc8>)
 80011fc:	f005 fb2f 	bl	800685e <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <RF24L01_Init_DMA+0x5e>
        RF24L01_SET_CS_HIGH();
 8001206:	2201      	movs	r2, #1
 8001208:	2102      	movs	r1, #2
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <RF24L01_Init_DMA+0xc0>)
 800120c:	f001 ffde 	bl	80031cc <HAL_GPIO_WritePin>

        // 添加必要的延时(某些寄存器写入后需要稳定时间)
        if(init_config[i].reg == CONFIG || init_config[i].reg == RF_SETUP) {
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <RF24L01_Init_DMA+0xc4>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <RF24L01_Init_DMA+0x8c>
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <RF24L01_Init_DMA+0xc4>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d102      	bne.n	800122e <RF24L01_Init_DMA+0x92>
            HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f000 fb9f 	bl	800196c <HAL_Delay>
    for (int i = 0; i < sizeof(init_config)/sizeof(init_config[0]); i++) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b08      	cmp	r3, #8
 8001238:	d9c5      	bls.n	80011c6 <RF24L01_Init_DMA+0x2a>
        }
    }

    // 设置地址(使用DMA版本)
    NRF24L01_Set_TxAddr_DMA(&addr[0], 5);       // 设置TX地址
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2105      	movs	r1, #5
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd9c 	bl	8000d7c <NRF24L01_Set_TxAddr_DMA>
    NRF24L01_Set_RxAddr_DMA(0, &addr[0], 5);    // 设置RX地址
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2205      	movs	r2, #5
 8001248:	4619      	mov	r1, r3
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fdce 	bl	8000dec <NRF24L01_Set_RxAddr_DMA>

    // 可选的速度和功率设置
    // NRF24L01_Set_Speed_DMA(SPEED_1M);
    // NRF24L01_Set_Power_DMA(POWER_F18DBM);
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08008cb4 	.word	0x08008cb4
 800125c:	40010c00 	.word	0x40010c00
 8001260:	08008cbc 	.word	0x08008cbc
 8001264:	200002c0 	.word	0x200002c0

08001268 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2218      	movs	r2, #24
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f004 fdcf 	bl	8005e5c <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f7ff fc79 	bl	8000bba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002c0 	.word	0x200002c0
 80012d0:	40013000 	.word	0x40013000

080012d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a47      	ldr	r2, [pc, #284]	@ (800140c <HAL_SPI_MspInit+0x138>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	f040 8086 	bne.w	8001402 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f6:	4b46      	ldr	r3, [pc, #280]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a45      	ldr	r2, [pc, #276]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <HAL_SPI_MspInit+0x13c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001326:	23a0      	movs	r3, #160	@ 0xa0
 8001328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4836      	ldr	r0, [pc, #216]	@ (8001414 <HAL_SPI_MspInit+0x140>)
 800133a:	f001 fdc3 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133e:	2340      	movs	r3, #64	@ 0x40
 8001340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	4830      	ldr	r0, [pc, #192]	@ (8001414 <HAL_SPI_MspInit+0x140>)
 8001352:	f001 fdb7 	bl	8002ec4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 8001358:	4a30      	ldr	r2, [pc, #192]	@ (800141c <HAL_SPI_MspInit+0x148>)
 800135a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001380:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 8001382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001386:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001388:	4823      	ldr	r0, [pc, #140]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 800138a:	f001 f96f 	bl	800266c <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001394:	f7ff fc11 	bl	8000bba <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a1f      	ldr	r2, [pc, #124]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 800139c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <HAL_SPI_MspInit+0x144>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <HAL_SPI_MspInit+0x150>)
 80013a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d6:	4812      	ldr	r0, [pc, #72]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013d8:	f001 f948 	bl	800266c <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80013e2:	f7ff fbea 	bl	8000bba <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013ea:	649a      	str	r2, [r3, #72]	@ 0x48
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_SPI_MspInit+0x14c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2023      	movs	r0, #35	@ 0x23
 80013f8:	f001 f8f5 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013fc:	2023      	movs	r0, #35	@ 0x23
 80013fe:	f001 f90e 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	20000318 	.word	0x20000318
 800141c:	4002001c 	.word	0x4002001c
 8001420:	2000035c 	.word	0x2000035c
 8001424:	40020030 	.word	0x40020030

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <HAL_MspInit+0x7c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <HAL_MspInit+0x7c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_MspInit+0x7c>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_MspInit+0x7c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <HAL_MspInit+0x7c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_MspInit+0x7c>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2004      	movs	r0, #4
 8001464:	f001 f8bf 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001468:	2004      	movs	r0, #4
 800146a:	f001 f8d8 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2005      	movs	r0, #5
 8001474:	f001 f8b7 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001478:	2005      	movs	r0, #5
 800147a:	f001 f8d0 	bl	800261e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_MspInit+0x80>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <HAL_MspInit+0x80>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 fa1a 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001508:	f001 fb5e 	bl	8002bc8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA1_Channel1_IRQHandler+0x10>)
 8001522:	f001 fa11 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000c4 	.word	0x200000c4

08001530 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA1_Channel2_IRQHandler+0x10>)
 8001536:	f001 fa07 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000318 	.word	0x20000318

08001544 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <DMA1_Channel3_IRQHandler+0x10>)
 800154a:	f001 f9fd 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000035c 	.word	0x2000035c

08001558 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <DMA1_Channel6_IRQHandler+0x10>)
 800155e:	f001 f9f3 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001a0 	.word	0x200001a0

0800156c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <DMA1_Channel7_IRQHandler+0x10>)
 8001572:	f001 f9e9 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000015c 	.word	0x2000015c

08001580 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <ADC1_2_IRQHandler+0x10>)
 8001586:	f000 fbcb 	bl	8001d20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000094 	.word	0x20000094

08001594 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <TIM1_UP_IRQHandler+0x10>)
 800159a:	f005 fc65 	bl	8006e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200003a4 	.word	0x200003a4

080015a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <I2C1_EV_IRQHandler+0x10>)
 80015ae:	f002 f8bb 	bl	8003728 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000108 	.word	0x20000108

080015bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <I2C1_ER_IRQHandler+0x10>)
 80015c2:	f002 fa22 	bl	8003a0a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000108 	.word	0x20000108

080015d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <SPI1_IRQHandler+0x10>)
 80015d6:	f005 f81d 	bl	8006614 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002c0 	.word	0x200002c0

080015e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <USART1_IRQHandler+0x10>)
 80015ea:	f005 ffdd 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003ec 	.word	0x200003ec

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f006 fe92 	bl	8008350 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20005000 	.word	0x20005000
 8001658:	00000400 	.word	0x00000400
 800165c:	200003a0 	.word	0x200003a0
 8001660:	200005a8 	.word	0x200005a8

08001664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_TIM1_Init+0x9c>)
 800168e:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <MX_TIM1_Init+0xa0>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <MX_TIM1_Init+0x9c>)
 8001694:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_TIM1_Init+0x9c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016b6:	2280      	movs	r2, #128	@ 0x80
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ba:	4814      	ldr	r0, [pc, #80]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016bc:	f005 fb33 	bl	8006d26 <HAL_TIM_Base_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016c6:	f7ff fa78 	bl	8000bba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016d8:	f005 fcb6 	bl	8007048 <HAL_TIM_ConfigClockSource>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016e2:	f7ff fa6a 	bl	8000bba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	@ (800170c <MX_TIM1_Init+0x9c>)
 80016f4:	f005 fe98 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016fe:	f7ff fa5c 	bl	8000bba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200003a4 	.word	0x200003a4
 8001710:	40012c00 	.word	0x40012c00

08001714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_TIM_Base_MspInit+0x44>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d113      	bne.n	800174e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 800172c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001730:	6193      	str	r3, [r2, #24]
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2019      	movs	r0, #25
 8001744:	f000 ff4f 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001748:	2019      	movs	r0, #25
 800174a:	f000 ff68 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000

08001760 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <MX_USART1_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 800176c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_USART1_UART_Init+0x4c>)
 8001798:	f005 feb6 	bl	8007508 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f7ff fa0a 	bl	8000bba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200003ec 	.word	0x200003ec
 80017b0:	40013800 	.word	0x40013800

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <HAL_UART_MspInit+0x9c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d139      	bne.n	8001848 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_UART_MspInit+0xa0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4619      	mov	r1, r3
 8001818:	480f      	ldr	r0, [pc, #60]	@ (8001858 <HAL_UART_MspInit+0xa4>)
 800181a:	f001 fb53 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4809      	ldr	r0, [pc, #36]	@ (8001858 <HAL_UART_MspInit+0xa4>)
 8001834:	f001 fb46 	bl	8002ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2025      	movs	r0, #37	@ 0x25
 800183e:	f000 fed2 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001842:	2025      	movs	r0, #37	@ 0x25
 8001844:	f000 feeb 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800

0800185c <Reset_Handler>:
 800185c:	f7ff ff02 	bl	8001664 <SystemInit>
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <LoopFillZerobss+0xe>)
 8001862:	490c      	ldr	r1, [pc, #48]	@ (8001894 <LoopFillZerobss+0x12>)
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <LoopFillZerobss+0x16>)
 8001866:	2300      	movs	r3, #0
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:
 800186a:	58d4      	ldr	r4, [r2, r3]
 800186c:	50c4      	str	r4, [r0, r3]
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:
 8001870:	18c4      	adds	r4, r0, r3
 8001872:	428c      	cmp	r4, r1
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <LoopFillZerobss+0x1a>)
 8001878:	4c09      	ldr	r4, [pc, #36]	@ (80018a0 <LoopFillZerobss+0x1e>)
 800187a:	2300      	movs	r3, #0
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:
 8001882:	42a2      	cmp	r2, r4
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
 8001886:	f006 fd69 	bl	800835c <__libc_init_array>
 800188a:	f7ff f89f 	bl	80009cc <main>
 800188e:	4770      	bx	lr
 8001890:	20000000 	.word	0x20000000
 8001894:	20000074 	.word	0x20000074
 8001898:	0800955c 	.word	0x0800955c
 800189c:	20000078 	.word	0x20000078
 80018a0:	200005a4 	.word	0x200005a4

080018a4 <CAN1_RX1_IRQHandler>:
 80018a4:	e7fe      	b.n	80018a4 <CAN1_RX1_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fe89 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdb0 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fea1 	bl	800263a <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 fe69 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <HAL_IncTick+0x20>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000008 	.word	0x20000008
 8001954:	20000434 	.word	0x20000434

08001958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000434 	.word	0x20000434

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fff0 	bl	8001958 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffe0 	bl	8001958 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0be      	b.n	8001b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fc3a 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fbbd 	bl	8002178 <ADC_ConversionStop_Disable>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8099 	bne.w	8001b42 <HAL_ADC_Init+0x18e>
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8095 	bne.w	8001b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a20:	f023 0302 	bic.w	r3, r3, #2
 8001a24:	f043 0202 	orr.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7b1b      	ldrb	r3, [r3, #12]
 8001a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a4c:	d003      	beq.n	8001a56 <HAL_ADC_Init+0xa2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_ADC_Init+0xa8>
 8001a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_Init+0xaa>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d1b      	ldrb	r3, [r3, #20]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d119      	bne.n	8001aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	035a      	lsls	r2, r3, #13
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e00b      	b.n	8001aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_ADC_Init+0x1a8>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_Init+0x126>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d104      	bne.n	8001ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	051b      	lsls	r3, r3, #20
 8001ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_ADC_Init+0x1ac>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b1e:	e018      	b.n	8001b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	f023 0312 	bic.w	r3, r3, #18
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b60:	ff1f0efe 	.word	0xff1f0efe

08001b64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a64      	ldr	r2, [pc, #400]	@ (8001d0c <HAL_ADC_Start_DMA+0x1a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_Start_DMA+0x24>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_ADC_Start_DMA+0x1ac>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_Start_DMA+0x32>
 8001b88:	4b60      	ldr	r3, [pc, #384]	@ (8001d0c <HAL_ADC_Start_DMA+0x1a8>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 80b3 	bne.w	8001cfc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_Start_DMA+0x40>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0ae      	b.n	8001d02 <HAL_ADC_Start_DMA+0x19e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fa89 	bl	80020c4 <ADC_Enable>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 809a 	bne.w	8001cf2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <HAL_ADC_Start_DMA+0x1ac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_Start_DMA+0x84>
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d0c <HAL_ADC_Start_DMA+0x1a8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d115      	bne.n	8001c14 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d026      	beq.n	8001c50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c12:	e01d      	b.n	8001c50 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a39      	ldr	r2, [pc, #228]	@ (8001d0c <HAL_ADC_Start_DMA+0x1a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_Start_DMA+0xd0>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_ADC_Start_DMA+0x1ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d10d      	bne.n	8001c50 <HAL_ADC_Start_DMA+0xec>
 8001c34:	4b35      	ldr	r3, [pc, #212]	@ (8001d0c <HAL_ADC_Start_DMA+0x1a8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	f023 0206 	bic.w	r2, r3, #6
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a25      	ldr	r2, [pc, #148]	@ (8001d14 <HAL_ADC_Start_DMA+0x1b0>)
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a24      	ldr	r2, [pc, #144]	@ (8001d18 <HAL_ADC_Start_DMA+0x1b4>)
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <HAL_ADC_Start_DMA+0x1b8>)
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0202 	mvn.w	r2, #2
 8001c98:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a18      	ldr	r0, [r3, #32]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	334c      	adds	r3, #76	@ 0x4c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f000 fd31 	bl	8002720 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cc8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ccc:	d108      	bne.n	8001ce0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001cdc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cde:	e00f      	b.n	8001d00 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001cee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cf0:	e006      	b.n	8001d00 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001cfa:	e001      	b.n	8001d00 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40012400 	.word	0x40012400
 8001d10:	40012800 	.word	0x40012800
 8001d14:	080021fb 	.word	0x080021fb
 8001d18:	08002277 	.word	0x08002277
 8001d1c:	08002293 	.word	0x08002293

08001d20 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03e      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d039      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d72:	d11d      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d119      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0220 	bic.w	r2, r2, #32
 8001d8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f874 	bl	8001e9e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0212 	mvn.w	r2, #18
 8001dbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d04d      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d048      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001df6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001dfa:	d012      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d125      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e14:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e18:	d11d      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e30:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fae4 	bl	8002424 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 020c 	mvn.w	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f812 	bl	8001eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0201 	mvn.w	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x20>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0dc      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1da>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d81c      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b05      	subs	r3, #5
 8001f16:	221f      	movs	r2, #31
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b05      	subs	r3, #5
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f3c:	e03c      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d81c      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b23      	subs	r3, #35	@ 0x23
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4019      	ands	r1, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b23      	subs	r3, #35	@ 0x23
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f7e:	e01b      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b41      	subs	r3, #65	@ 0x41
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b41      	subs	r3, #65	@ 0x41
 8001fac:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d91c      	bls.n	8001ffa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68d9      	ldr	r1, [r3, #12]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4019      	ands	r1, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6898      	ldr	r0, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b1e      	subs	r3, #30
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	e019      	b.n	800202e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6919      	ldr	r1, [r3, #16]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b10      	cmp	r3, #16
 8002034:	d003      	beq.n	800203e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800203a:	2b11      	cmp	r3, #17
 800203c:	d132      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d125      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d126      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002064:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d11a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a13      	ldr	r2, [pc, #76]	@ (80020c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9a      	lsrs	r2, r3, #18
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3b01      	subs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x1b2>
 8002092:	e007      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012400 	.word	0x40012400
 80020bc:	20000000 	.word	0x20000000
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d040      	beq.n	8002164 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <ADC_Enable+0xac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <ADC_Enable+0xb0>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	0c9b      	lsrs	r3, r3, #18
 80020fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002100:	e002      	b.n	8002108 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3b01      	subs	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f9      	bne.n	8002102 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800210e:	f7ff fc23 	bl	8001958 <HAL_GetTick>
 8002112:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002114:	e01f      	b.n	8002156 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002116:	f7ff fc1f 	bl	8001958 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d918      	bls.n	8002156 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d011      	beq.n	8002156 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	f043 0210 	orr.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e007      	b.n	8002166 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d1d8      	bne.n	8002116 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12e      	bne.n	80021f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021a2:	f7ff fbd9 	bl	8001958 <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021a8:	e01b      	b.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021aa:	f7ff fbd5 	bl	8001958 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d914      	bls.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e007      	b.n	80021f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d0dc      	beq.n	80021aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002210:	2b00      	cmp	r3, #0
 8002212:	d127      	bne.n	8002264 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800222a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800222e:	d115      	bne.n	800225c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002234:	2b00      	cmp	r3, #0
 8002236:	d111      	bne.n	800225c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff fe1e 	bl	8001e9e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002262:	e004      	b.n	800226e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7fe fac1 	bl	800080c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff fe02 	bl	8001ec2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e097      	b.n	8002416 <HAL_ADCEx_Calibration_Start+0x14e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff42 	bl	8002178 <ADC_ConversionStop_Disable>
 80022f4:	4603      	mov	r3, r0
 80022f6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fee3 	bl	80020c4 <ADC_Enable>
 80022fe:	4603      	mov	r3, r0
 8002300:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 8081 	bne.w	800240c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800231e:	4b40      	ldr	r3, [pc, #256]	@ (8002420 <HAL_ADCEx_Calibration_Start+0x158>)
 8002320:	681c      	ldr	r4, [r3, #0]
 8002322:	2002      	movs	r0, #2
 8002324:	f003 fce4 	bl	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002328:	4603      	mov	r3, r0
 800232a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800232e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002330:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002332:	e002      	b.n	800233a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0208 	orr.w	r2, r2, #8
 800234e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002350:	f7ff fb02 	bl	8001958 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002356:	e01b      	b.n	8002390 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002358:	f7ff fafe 	bl	8001958 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b0a      	cmp	r3, #10
 8002364:	d914      	bls.n	8002390 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	f023 0312 	bic.w	r3, r3, #18
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e042      	b.n	8002416 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1dc      	bne.n	8002358 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0204 	orr.w	r2, r2, #4
 80023ac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023ae:	f7ff fad3 	bl	8001958 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023b4:	e01b      	b.n	80023ee <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023b6:	f7ff facf 	bl	8001958 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d914      	bls.n	80023ee <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	f023 0312 	bic.w	r3, r3, #18
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e013      	b.n	8002416 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1dc      	bne.n	80023b6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002414:	7dfb      	ldrb	r3, [r7, #23]
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
	...

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <__NVIC_EnableIRQ+0x34>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff90 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff2d 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff42 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff90 	bl	8002528 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5f 	bl	80024d4 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff35 	bl	800249c <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002656:	f000 f802 	bl	800265e <HAL_SYSTICK_Callback>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e043      	b.n	800270a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_DMA_Init+0xa8>)
 800268a:	4413      	add	r3, r2
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_DMA_Init+0xac>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	009a      	lsls	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <HAL_DMA_Init+0xb0>)
 800269e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80026ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	bffdfff8 	.word	0xbffdfff8
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Start_IT+0x20>
 800273c:	2302      	movs	r3, #2
 800273e:	e04b      	b.n	80027d8 <HAL_DMA_Start_IT+0xb8>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13a      	bne.n	80027ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f9f8 	bl	8002b6e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 020e 	orr.w	r2, r2, #14
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e00f      	b.n	80027b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 020a 	orr.w	r2, r2, #10
 80027b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e005      	b.n	80027d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e020      	b.n	800284c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 020e 	bic.w	r2, r2, #14
 8002818:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
	...

08002858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d005      	beq.n	800287c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e051      	b.n	8002920 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020e 	bic.w	r2, r2, #14
 800288a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_DMA_Abort_IT+0xd4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d029      	beq.n	80028fa <HAL_DMA_Abort_IT+0xa2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_DMA_Abort_IT+0xd8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d022      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x9e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_DMA_Abort_IT+0xdc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01a      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x98>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_DMA_Abort_IT+0xe0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d012      	beq.n	80028ea <HAL_DMA_Abort_IT+0x92>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_DMA_Abort_IT+0xe4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00a      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x8c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_DMA_Abort_IT+0xe8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d102      	bne.n	80028de <HAL_DMA_Abort_IT+0x86>
 80028d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028dc:	e00e      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028e2:	e00b      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e8:	e008      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ee:	e005      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028f4:	e002      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028f6:	2310      	movs	r3, #16
 80028f8:	e000      	b.n	80028fc <HAL_DMA_Abort_IT+0xa4>
 80028fa:	2301      	movs	r3, #1
 80028fc:	4a11      	ldr	r2, [pc, #68]	@ (8002944 <HAL_DMA_Abort_IT+0xec>)
 80028fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    } 
  }
  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40020008 	.word	0x40020008
 8002930:	4002001c 	.word	0x4002001c
 8002934:	40020030 	.word	0x40020030
 8002938:	40020044 	.word	0x40020044
 800293c:	40020058 	.word	0x40020058
 8002940:	4002006c 	.word	0x4002006c
 8002944:	40020000 	.word	0x40020000

08002948 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	2204      	movs	r2, #4
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d04f      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xc8>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a66      	ldr	r2, [pc, #408]	@ (8002b38 <HAL_DMA_IRQHandler+0x1f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d029      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xae>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a65      	ldr	r2, [pc, #404]	@ (8002b3c <HAL_DMA_IRQHandler+0x1f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xaa>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a63      	ldr	r2, [pc, #396]	@ (8002b40 <HAL_DMA_IRQHandler+0x1f8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01a      	beq.n	80029ec <HAL_DMA_IRQHandler+0xa4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a62      	ldr	r2, [pc, #392]	@ (8002b44 <HAL_DMA_IRQHandler+0x1fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d012      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x9e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a60      	ldr	r2, [pc, #384]	@ (8002b48 <HAL_DMA_IRQHandler+0x200>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x98>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5f      	ldr	r2, [pc, #380]	@ (8002b4c <HAL_DMA_IRQHandler+0x204>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <HAL_DMA_IRQHandler+0x92>
 80029d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029d8:	e00e      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029de:	e00b      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029e4:	e008      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029ea:	e005      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f0:	e002      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029f2:	2340      	movs	r3, #64	@ 0x40
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_IRQHandler+0xb0>
 80029f6:	2304      	movs	r3, #4
 80029f8:	4a55      	ldr	r2, [pc, #340]	@ (8002b50 <HAL_DMA_IRQHandler+0x208>)
 80029fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8094 	beq.w	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a0e:	e08e      	b.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2202      	movs	r2, #2
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d056      	beq.n	8002ace <HAL_DMA_IRQHandler+0x186>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d051      	beq.n	8002ace <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020a 	bic.w	r2, r2, #10
 8002a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a38      	ldr	r2, [pc, #224]	@ (8002b38 <HAL_DMA_IRQHandler+0x1f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d029      	beq.n	8002aae <HAL_DMA_IRQHandler+0x166>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a37      	ldr	r2, [pc, #220]	@ (8002b3c <HAL_DMA_IRQHandler+0x1f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x162>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a35      	ldr	r2, [pc, #212]	@ (8002b40 <HAL_DMA_IRQHandler+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x15c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a34      	ldr	r2, [pc, #208]	@ (8002b44 <HAL_DMA_IRQHandler+0x1fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x156>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a32      	ldr	r2, [pc, #200]	@ (8002b48 <HAL_DMA_IRQHandler+0x200>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x150>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a31      	ldr	r2, [pc, #196]	@ (8002b4c <HAL_DMA_IRQHandler+0x204>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d102      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x14a>
 8002a8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a90:	e00e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a96:	e00b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a9c:	e008      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa2:	e005      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aa8:	e002      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x168>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_DMA_IRQHandler+0x208>)
 8002ab2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d034      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002acc:	e02f      	b.n	8002b2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d028      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 020e 	bic.w	r2, r2, #14
 8002af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
    }
  }
  return;
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
}
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40020008 	.word	0x40020008
 8002b3c:	4002001c 	.word	0x4002001c
 8002b40:	40020030 	.word	0x40020030
 8002b44:	40020044 	.word	0x40020044
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	4002006c 	.word	0x4002006c
 8002b50:	40020000 	.word	0x40020000

08002b54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b62:	b2db      	uxtb	r3, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d108      	bne.n	8002bae <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bac:	e007      	b.n	8002bbe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_FLASH_IRQHandler+0x22>
 8002bde:	4b68      	ldr	r3, [pc, #416]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00e      	beq.n	8002c08 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002bea:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002bf0:	4b64      	ldr	r3, [pc, #400]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002bf8:	f000 f8f4 	bl	8002de4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8cc 	bl	8002d9a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c02:	4b60      	ldr	r3, [pc, #384]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002c08:	4b5d      	ldr	r3, [pc, #372]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a0 	beq.w	8002d56 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c16:	4b5a      	ldr	r3, [pc, #360]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c18:	2220      	movs	r2, #32
 8002c1a:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002c1c:	4b59      	ldr	r3, [pc, #356]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8097 	beq.w	8002d56 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002c28:	4b56      	ldr	r3, [pc, #344]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d12d      	bne.n	8002c8e <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002c32:	4b54      	ldr	r3, [pc, #336]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	4a52      	ldr	r2, [pc, #328]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c3a:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002c3c:	4b51      	ldr	r3, [pc, #324]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002c44:	4b4f      	ldr	r3, [pc, #316]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f89c 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002c50:	4b4c      	ldr	r3, [pc, #304]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c58:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002c60:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4a46      	ldr	r2, [pc, #280]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c66:	f023 0302 	bic.w	r3, r3, #2
 8002c6a:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f909 	bl	8002e84 <FLASH_PageErase>
 8002c72:	e070      	b.n	8002d56 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4a42      	ldr	r2, [pc, #264]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c80:	4b40      	ldr	r3, [pc, #256]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f87e 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>
 8002c8c:	e063      	b.n	8002d56 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d10c      	bne.n	8002cb2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002c98:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4a38      	ldr	r2, [pc, #224]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 f86f 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002caa:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e051      	b.n	8002d56 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002cb2:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cba:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002cbc:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d024      	beq.n	8002d0e <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	4a2e      	ldr	r2, [pc, #184]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ccc:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002cce:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	0c02      	lsrs	r2, r0, #16
 8002ce4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ce8:	0c0b      	lsrs	r3, r1, #16
 8002cea:	4926      	ldr	r1, [pc, #152]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cec:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002cfc:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002cfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d02:	b293      	uxth	r3, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f850 	bl	8002dac <FLASH_Program_HalfWord>
 8002d0c:	e023      	b.n	8002d56 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d105      	bne.n	8002d24 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f833 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>
 8002d22:	e011      	b.n	8002d48 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002d24:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d106      	bne.n	8002d3c <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	3b02      	subs	r3, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f827 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>
 8002d3a:	e005      	b.n	8002d48 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	3b06      	subs	r3, #6
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f820 	bl	8002d88 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_FLASH_IRQHandler+0x1bc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4a06      	ldr	r2, [pc, #24]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002d66:	f023 0307 	bic.w	r3, r3, #7
 8002d6a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a03      	ldr	r2, [pc, #12]	@ (8002d80 <HAL_FLASH_IRQHandler+0x1b8>)
 8002d72:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002d76:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40022000 	.word	0x40022000
 8002d84:	20000438 	.word	0x20000438

08002d88 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <FLASH_Program_HalfWord+0x30>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <FLASH_Program_HalfWord+0x34>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	@ (8002de0 <FLASH_Program_HalfWord+0x34>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	801a      	strh	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000438 	.word	0x20000438
 8002de0:	40022000 	.word	0x40022000

08002de4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002dee:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002e04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002e24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <FLASH_SetErrorCode+0x9c>)
 8002e44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f240 1201 	movw	r2, #257	@ 0x101
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d106      	bne.n	8002e6a <FLASH_SetErrorCode+0x86>
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a06      	ldr	r2, [pc, #24]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	61d3      	str	r3, [r2, #28]
}  
 8002e68:	e002      	b.n	8002e70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e6a:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <FLASH_SetErrorCode+0x98>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60d3      	str	r3, [r2, #12]
}  
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	20000438 	.word	0x20000438

08002e84 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <FLASH_PageErase+0x38>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <FLASH_PageErase+0x3c>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <FLASH_PageErase+0x3c>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <FLASH_PageErase+0x3c>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <FLASH_PageErase+0x3c>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <FLASH_PageErase+0x3c>)
 8002eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000438 	.word	0x20000438
 8002ec0:	40022000 	.word	0x40022000

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b08b      	sub	sp, #44	@ 0x2c
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	e169      	b.n	80031ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f040 8158 	bne.w	80031a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a9a      	ldr	r2, [pc, #616]	@ (8003164 <HAL_GPIO_Init+0x2a0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d05e      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f00:	4a98      	ldr	r2, [pc, #608]	@ (8003164 <HAL_GPIO_Init+0x2a0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d875      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f06:	4a98      	ldr	r2, [pc, #608]	@ (8003168 <HAL_GPIO_Init+0x2a4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d058      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f0c:	4a96      	ldr	r2, [pc, #600]	@ (8003168 <HAL_GPIO_Init+0x2a4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d86f      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f12:	4a96      	ldr	r2, [pc, #600]	@ (800316c <HAL_GPIO_Init+0x2a8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d052      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f18:	4a94      	ldr	r2, [pc, #592]	@ (800316c <HAL_GPIO_Init+0x2a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d869      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f1e:	4a94      	ldr	r2, [pc, #592]	@ (8003170 <HAL_GPIO_Init+0x2ac>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04c      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f24:	4a92      	ldr	r2, [pc, #584]	@ (8003170 <HAL_GPIO_Init+0x2ac>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d863      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f2a:	4a92      	ldr	r2, [pc, #584]	@ (8003174 <HAL_GPIO_Init+0x2b0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d046      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f30:	4a90      	ldr	r2, [pc, #576]	@ (8003174 <HAL_GPIO_Init+0x2b0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d85d      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d82a      	bhi.n	8002f90 <HAL_GPIO_Init+0xcc>
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d859      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <HAL_GPIO_Init+0x80>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002fbf 	.word	0x08002fbf
 8002f48:	08002f99 	.word	0x08002f99
 8002f4c:	08002fab 	.word	0x08002fab
 8002f50:	08002fed 	.word	0x08002fed
 8002f54:	08002ff3 	.word	0x08002ff3
 8002f58:	08002ff3 	.word	0x08002ff3
 8002f5c:	08002ff3 	.word	0x08002ff3
 8002f60:	08002ff3 	.word	0x08002ff3
 8002f64:	08002ff3 	.word	0x08002ff3
 8002f68:	08002ff3 	.word	0x08002ff3
 8002f6c:	08002ff3 	.word	0x08002ff3
 8002f70:	08002ff3 	.word	0x08002ff3
 8002f74:	08002ff3 	.word	0x08002ff3
 8002f78:	08002ff3 	.word	0x08002ff3
 8002f7c:	08002ff3 	.word	0x08002ff3
 8002f80:	08002ff3 	.word	0x08002ff3
 8002f84:	08002ff3 	.word	0x08002ff3
 8002f88:	08002fa1 	.word	0x08002fa1
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	4a79      	ldr	r2, [pc, #484]	@ (8003178 <HAL_GPIO_Init+0x2b4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f96:	e02c      	b.n	8002ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e029      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	623b      	str	r3, [r7, #32]
          break;
 8002fa8:	e024      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	623b      	str	r3, [r7, #32]
          break;
 8002fb2:	e01f      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	623b      	str	r3, [r7, #32]
          break;
 8002fbc:	e01a      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	623b      	str	r3, [r7, #32]
          break;
 8002fca:	e013      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	611a      	str	r2, [r3, #16]
          break;
 8002fde:	e009      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	615a      	str	r2, [r3, #20]
          break;
 8002fea:	e003      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
          break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          break;
 8002ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2bff      	cmp	r3, #255	@ 0xff
 8002ff8:	d801      	bhi.n	8002ffe <HAL_GPIO_Init+0x13a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_Init+0x13e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2bff      	cmp	r3, #255	@ 0xff
 8003008:	d802      	bhi.n	8003010 <HAL_GPIO_Init+0x14c>
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x152>
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	3b08      	subs	r3, #8
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	210f      	movs	r1, #15
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	401a      	ands	r2, r3
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	431a      	orrs	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80b1 	beq.w	80031a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003044:	4b4d      	ldr	r3, [pc, #308]	@ (800317c <HAL_GPIO_Init+0x2b8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a4c      	ldr	r2, [pc, #304]	@ (800317c <HAL_GPIO_Init+0x2b8>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_GPIO_Init+0x2b8>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800305c:	4a48      	ldr	r2, [pc, #288]	@ (8003180 <HAL_GPIO_Init+0x2bc>)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a40      	ldr	r2, [pc, #256]	@ (8003184 <HAL_GPIO_Init+0x2c0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_GPIO_Init+0x1ec>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3f      	ldr	r2, [pc, #252]	@ (8003188 <HAL_GPIO_Init+0x2c4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00d      	beq.n	80030ac <HAL_GPIO_Init+0x1e8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3e      	ldr	r2, [pc, #248]	@ (800318c <HAL_GPIO_Init+0x2c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x1e4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3d      	ldr	r2, [pc, #244]	@ (8003190 <HAL_GPIO_Init+0x2cc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_GPIO_Init+0x1e0>
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e004      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030b0:	2300      	movs	r3, #0
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4093      	lsls	r3, r2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030c2:	492f      	ldr	r1, [pc, #188]	@ (8003180 <HAL_GPIO_Init+0x2bc>)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	492c      	ldr	r1, [pc, #176]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	4928      	ldr	r1, [pc, #160]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003104:	4b23      	ldr	r3, [pc, #140]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4922      	ldr	r1, [pc, #136]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003112:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	491e      	ldr	r1, [pc, #120]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4918      	ldr	r1, [pc, #96]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	4914      	ldr	r1, [pc, #80]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d021      	beq.n	8003198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	490e      	ldr	r1, [pc, #56]	@ (8003194 <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e021      	b.n	80031a6 <HAL_GPIO_Init+0x2e2>
 8003162:	bf00      	nop
 8003164:	10320000 	.word	0x10320000
 8003168:	10310000 	.word	0x10310000
 800316c:	10220000 	.word	0x10220000
 8003170:	10210000 	.word	0x10210000
 8003174:	10120000 	.word	0x10120000
 8003178:	10110000 	.word	0x10110000
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	40010800 	.word	0x40010800
 8003188:	40010c00 	.word	0x40010c00
 800318c:	40011000 	.word	0x40011000
 8003190:	40011400 	.word	0x40011400
 8003194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_GPIO_Init+0x304>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	43db      	mvns	r3, r3
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <HAL_GPIO_Init+0x304>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	3301      	adds	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f47f ae8e 	bne.w	8002ed8 <HAL_GPIO_Init+0x14>
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	372c      	adds	r7, #44	@ 0x2c
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40010400 	.word	0x40010400

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43d9      	mvns	r1, r3
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	400b      	ands	r3, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd f9a4 	bl	80005a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f002 fc30 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	@ (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	@ (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	@ (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	@ (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	@ (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d103      	bne.n	80034d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
  }
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	f040 8101 	bne.w	8003708 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003506:	4b83      	ldr	r3, [pc, #524]	@ (8003714 <HAL_I2C_Master_Transmit_DMA+0x234>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	4a82      	ldr	r2, [pc, #520]	@ (8003718 <HAL_I2C_Master_Transmit_DMA+0x238>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0a1a      	lsrs	r2, r3, #8
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3b01      	subs	r3, #1
 8003524:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d112      	bne.n	8003552 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e0db      	b.n	800370a <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d0df      	beq.n	8003520 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800356a:	2302      	movs	r3, #2
 800356c:	e0cd      	b.n	800370a <HAL_I2C_Master_Transmit_DMA+0x22a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d007      	beq.n	8003594 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	@ 0x21
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2210      	movs	r2, #16
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	893a      	ldrh	r2, [r7, #8]
 80035c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80035d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80035d6:	897a      	ldrh	r2, [r7, #10]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d073      	beq.n	80036cc <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003600:	2200      	movs	r2, #0
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	2200      	movs	r2, #0
 800360a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	4619      	mov	r1, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3310      	adds	r3, #16
 800361c:	461a      	mov	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003622:	f7ff f87d 	bl	8002720 <HAL_DMA_Start_IT>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d139      	bne.n	80036a4 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8003630:	e013      	b.n	800365a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e057      	b.n	800370a <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003670:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003680:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003690:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e02f      	b.n	8003704 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e01e      	b.n	800370a <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036da:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ea:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003702:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000000 	.word	0x20000000
 8003718:	14f8b589 	.word	0x14f8b589
 800371c:	ffff0000 	.word	0xffff0000
 8003720:	08004f51 	.word	0x08004f51
 8003724:	0800510f 	.word	0x0800510f

08003728 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003748:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003750:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d003      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x38>
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	f040 80c1 	bne.w	80038e2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <HAL_I2C_EV_IRQHandler+0x6e>
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003780:	d003      	beq.n	800378a <HAL_I2C_EV_IRQHandler+0x62>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003788:	d101      	bne.n	800378e <HAL_I2C_EV_IRQHandler+0x66>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_I2C_EV_IRQHandler+0x68>
 800378e:	2300      	movs	r3, #0
 8003790:	2b01      	cmp	r3, #1
 8003792:	f000 8132 	beq.w	80039fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00c      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x92>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	0a5b      	lsrs	r3, r3, #9
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 fdbf 	bl	8005330 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fda6 	bl	8004304 <I2C_Master_SB>
 80037b8:	e092      	b.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08db      	lsrs	r3, r3, #3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_I2C_EV_IRQHandler+0xb2>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	0a5b      	lsrs	r3, r3, #9
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fe1b 	bl	800440e <I2C_Master_ADD10>
 80037d8:	e082      	b.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_I2C_EV_IRQHandler+0xd2>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fe34 	bl	8004460 <I2C_Master_ADDR>
 80037f8:	e072      	b.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03b      	beq.n	800387e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003814:	f000 80f3 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	09db      	lsrs	r3, r3, #7
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00f      	beq.n	8003844 <HAL_I2C_EV_IRQHandler+0x11c>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <HAL_I2C_EV_IRQHandler+0x11c>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9fe 	bl	8003c3e <I2C_MasterTransmit_TXE>
 8003842:	e04d      	b.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80d6 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	0a5b      	lsrs	r3, r3, #9
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80cf 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003860:	7bbb      	ldrb	r3, [r7, #14]
 8003862:	2b21      	cmp	r3, #33	@ 0x21
 8003864:	d103      	bne.n	800386e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa85 	bl	8003d76 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386c:	e0c7      	b.n	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	f040 80c4 	bne.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 faf3 	bl	8003e62 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387c:	e0bf      	b.n	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388c:	f000 80b7 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00f      	beq.n	80038bc <HAL_I2C_EV_IRQHandler+0x194>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	0a9b      	lsrs	r3, r3, #10
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_I2C_EV_IRQHandler+0x194>
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb6c 	bl	8003f92 <I2C_MasterReceive_RXNE>
 80038ba:	e011      	b.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 809a 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8093 	beq.w	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fc22 	bl	8004122 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038de:	e08e      	b.n	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80038e0:	e08d      	b.n	80039fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e007      	b.n	8003904 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d012      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x20e>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 ffed 	bl	800490e <I2C_Slave_ADDR>
 8003934:	e066      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x22e>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 f828 	bl	80049a4 <I2C_Slave_STOPF>
 8003954:	e056      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003956:	7bbb      	ldrb	r3, [r7, #14]
 8003958:	2b21      	cmp	r3, #33	@ 0x21
 800395a:	d002      	beq.n	8003962 <HAL_I2C_EV_IRQHandler+0x23a>
 800395c:	7bbb      	ldrb	r3, [r7, #14]
 800395e:	2b29      	cmp	r3, #41	@ 0x29
 8003960:	d125      	bne.n	80039ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	09db      	lsrs	r3, r3, #7
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x266>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	0a9b      	lsrs	r3, r3, #10
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x266>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff05 	bl	8004796 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800398c:	e039      	b.n	8003a02 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d033      	beq.n	8003a02 <HAL_I2C_EV_IRQHandler+0x2da>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02d      	beq.n	8003a02 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ff32 	bl	8004810 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ac:	e029      	b.n	8003a02 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00f      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x2b2>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0a9b      	lsrs	r3, r3, #10
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_I2C_EV_IRQHandler+0x2b2>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 ff3c 	bl	8004850 <I2C_SlaveReceive_RXNE>
 80039d8:	e014      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	0a5b      	lsrs	r3, r3, #9
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 ff6a 	bl	80048cc <I2C_SlaveReceive_BTF>
 80039f8:	e004      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a02:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b08a      	sub	sp, #40	@ 0x28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a2c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_I2C_ER_IRQHandler+0x5e>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a56:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	0a5b      	lsrs	r3, r3, #9
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x88>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003a90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	0a9b      	lsrs	r3, r3, #10
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03f      	beq.n	8003b1e <HAL_I2C_ER_IRQHandler+0x114>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d039      	beq.n	8003b1e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003aaa:	7efb      	ldrb	r3, [r7, #27]
 8003aac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003abc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ac4:	7ebb      	ldrb	r3, [r7, #26]
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d112      	bne.n	8003af0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b21      	cmp	r3, #33	@ 0x21
 8003ad4:	d008      	beq.n	8003ae8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b29      	cmp	r3, #41	@ 0x29
 8003ada:	d005      	beq.n	8003ae8 <HAL_I2C_ER_IRQHandler+0xde>
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b28      	cmp	r3, #40	@ 0x28
 8003ae0:	d106      	bne.n	8003af0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b21      	cmp	r3, #33	@ 0x21
 8003ae6:	d103      	bne.n	8003af0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f001 f88b 	bl	8004c04 <I2C_Slave_AF>
 8003aee:	e016      	b.n	8003b1e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003af8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b02:	7efb      	ldrb	r3, [r7, #27]
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d002      	beq.n	8003b0e <HAL_I2C_ER_IRQHandler+0x104>
 8003b08:	7efb      	ldrb	r3, [r7, #27]
 8003b0a:	2b40      	cmp	r3, #64	@ 0x40
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	0adb      	lsrs	r3, r3, #11
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_I2C_ER_IRQHandler+0x13e>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003b46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 f8c6 	bl	8004cec <I2C_ITError>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	@ 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c32:	b2db      	uxtb	r3, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d150      	bne.n	8003d06 <I2C_MasterTransmit_TXE+0xc8>
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b21      	cmp	r3, #33	@ 0x21
 8003c68:	d14d      	bne.n	8003d06 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d01d      	beq.n	8003cac <I2C_MasterTransmit_TXE+0x6e>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d01a      	beq.n	8003cac <I2C_MasterTransmit_TXE+0x6e>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c7c:	d016      	beq.n	8003cac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2211      	movs	r2, #17
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff5f 	bl	8003b68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003caa:	e060      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d107      	bne.n	8003cf6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ff74 	bl	8003bdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf4:	e03b      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff32 	bl	8003b68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d04:	e033      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b21      	cmp	r3, #33	@ 0x21
 8003d0a:	d005      	beq.n	8003d18 <I2C_MasterTransmit_TXE+0xda>
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	d12d      	bne.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b22      	cmp	r3, #34	@ 0x22
 8003d16:	d12a      	bne.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d30:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d32:	e01c      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	d103      	bne.n	8003d48 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f88e 	bl	8003e62 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d46:	e012      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d6c:	e7ff      	b.n	8003d6e <I2C_MasterTransmit_TXE+0x130>
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b21      	cmp	r3, #33	@ 0x21
 8003d8e:	d164      	bne.n	8003e5a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d012      	beq.n	8003dc0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003dbe:	e04c      	b.n	8003e5a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d01d      	beq.n	8003e02 <I2C_MasterTransmit_BTF+0x8c>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d01a      	beq.n	8003e02 <I2C_MasterTransmit_BTF+0x8c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dd2:	d016      	beq.n	8003e02 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003de2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2211      	movs	r2, #17
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff feb4 	bl	8003b68 <HAL_I2C_MasterTxCpltCallback>
}
 8003e00:	e02b      	b.n	8003e5a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e10:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e20:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d107      	bne.n	8003e4c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fec9 	bl	8003bdc <HAL_I2C_MemTxCpltCallback>
}
 8003e4a:	e006      	b.n	8003e5a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe87 	bl	8003b68 <HAL_I2C_MasterTxCpltCallback>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10b      	bne.n	8003e9a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003e98:	e077      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	121b      	asrs	r3, r3, #8
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003eb4:	e069      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10b      	bne.n	8003ed6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ed4:	e059      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d152      	bne.n	8003f84 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b22      	cmp	r3, #34	@ 0x22
 8003ee2:	d10d      	bne.n	8003f00 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003efe:	e044      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b21      	cmp	r3, #33	@ 0x21
 8003f0e:	d112      	bne.n	8003f36 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f34:	e029      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d124      	bne.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b21      	cmp	r3, #33	@ 0x21
 8003f44:	d121      	bne.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f54:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f64:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe2d 	bl	8003bdc <HAL_I2C_MemTxCpltCallback>
}
 8003f82:	e002      	b.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fa97 	bl	80034b8 <I2C_Flush_DR>
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b22      	cmp	r3, #34	@ 0x22
 8003fa4:	f040 80b9 	bne.w	800411a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d921      	bls.n	8004000 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	f040 8096 	bne.w	800411a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ffe:	e08c      	b.n	800411a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	2b02      	cmp	r3, #2
 8004006:	d07f      	beq.n	8004108 <I2C_MasterReceive_RXNE+0x176>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d002      	beq.n	8004014 <I2C_MasterReceive_RXNE+0x82>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d179      	bne.n	8004108 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 f959 	bl	80052cc <I2C_WaitOnSTOPRequestThroughIT>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d14c      	bne.n	80040ba <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800402e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800403e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d10a      	bne.n	8004090 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fdb0 	bl	8003bee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800408e:	e044      	b.n	800411a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b08      	cmp	r3, #8
 800409c:	d002      	beq.n	80040a4 <I2C_MasterReceive_RXNE+0x112>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d103      	bne.n	80040ac <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040aa:	e002      	b.n	80040b2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2212      	movs	r2, #18
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fd61 	bl	8003b7a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040b8:	e02f      	b.n	800411a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fd7d 	bl	8003c00 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004106:	e008      	b.n	800411a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004116:	605a      	str	r2, [r3, #4]
}
 8004118:	e7ff      	b.n	800411a <I2C_MasterReceive_RXNE+0x188>
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b04      	cmp	r3, #4
 8004138:	d11b      	bne.n	8004172 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004170:	e0c4      	b.n	80042fc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b03      	cmp	r3, #3
 800417a:	d129      	bne.n	80041d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00a      	beq.n	80041a8 <I2C_MasterReceive_BTF+0x86>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d007      	beq.n	80041a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041ce:	e095      	b.n	80042fc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d17d      	bne.n	80042d6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d002      	beq.n	80041e6 <I2C_MasterReceive_BTF+0xc4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e016      	b.n	8004226 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d002      	beq.n	8004204 <I2C_MasterReceive_BTF+0xe2>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d108      	bne.n	8004216 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004224:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004280:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	d10a      	bne.n	80042ac <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fca2 	bl	8003bee <HAL_I2C_MemRxCpltCallback>
}
 80042aa:	e027      	b.n	80042fc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d002      	beq.n	80042c0 <I2C_MasterReceive_BTF+0x19e>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d103      	bne.n	80042c8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80042c6:	e002      	b.n	80042ce <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2212      	movs	r2, #18
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fc53 	bl	8003b7a <HAL_I2C_MasterRxCpltCallback>
}
 80042d4:	e012      	b.n	80042fc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d117      	bne.n	8004348 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004330:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004332:	e067      	b.n	8004404 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	611a      	str	r2, [r3, #16]
}
 8004346:	e05d      	b.n	8004404 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004350:	d133      	bne.n	80043ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b21      	cmp	r3, #33	@ 0x21
 800435c:	d109      	bne.n	8004372 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800436e:	611a      	str	r2, [r3, #16]
 8004370:	e008      	b.n	8004384 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	b2da      	uxtb	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <I2C_Master_SB+0x92>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d032      	beq.n	8004404 <I2C_Master_SB+0x100>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d02d      	beq.n	8004404 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b6:	605a      	str	r2, [r3, #4]
}
 80043b8:	e024      	b.n	8004404 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10e      	bne.n	80043e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	11db      	asrs	r3, r3, #7
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0306 	and.w	r3, r3, #6
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f063 030f 	orn	r3, r3, #15
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	611a      	str	r2, [r3, #16]
}
 80043de:	e011      	b.n	8004404 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10d      	bne.n	8004404 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	11db      	asrs	r3, r3, #7
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0306 	and.w	r3, r3, #6
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f063 030e 	orn	r3, r3, #14
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	b2da      	uxtb	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <I2C_Master_ADD10+0x26>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d108      	bne.n	8004446 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <I2C_Master_ADD10+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004454:	605a      	str	r2, [r3, #4]
  }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b091      	sub	sp, #68	@ 0x44
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800446e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b22      	cmp	r3, #34	@ 0x22
 8004488:	f040 8174 	bne.w	8004774 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10f      	bne.n	80044b4 <I2C_Master_ADDR+0x54>
 8004494:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d10b      	bne.n	80044b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	e16b      	b.n	800478c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11d      	bne.n	80044f8 <I2C_Master_ADDR+0x98>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044c4:	d118      	bne.n	80044f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80044f6:	e149      	b.n	800478c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d113      	bne.n	800452a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e120      	b.n	800476c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 808a 	bne.w	800464a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800453c:	d137      	bne.n	80045ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d113      	bne.n	8004586 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	e0f2      	b.n	800476c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e0de      	b.n	800476c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d02e      	beq.n	8004612 <I2C_Master_ADDR+0x1b2>
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d02b      	beq.n	8004612 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045bc:	2b12      	cmp	r3, #18
 80045be:	d102      	bne.n	80045c6 <I2C_Master_ADDR+0x166>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d125      	bne.n	8004612 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d00e      	beq.n	80045ea <I2C_Master_ADDR+0x18a>
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d00b      	beq.n	80045ea <I2C_Master_ADDR+0x18a>
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d008      	beq.n	80045ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e007      	b.n	80045fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	e0ac      	b.n	800476c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004620:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e090      	b.n	800476c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d158      	bne.n	8004706 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	2b04      	cmp	r3, #4
 8004658:	d021      	beq.n	800469e <I2C_Master_ADDR+0x23e>
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	2b02      	cmp	r3, #2
 800465e:	d01e      	beq.n	800469e <I2C_Master_ADDR+0x23e>
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2b10      	cmp	r3, #16
 8004664:	d01b      	beq.n	800469e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004674:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e012      	b.n	80046c4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d2:	d14b      	bne.n	800476c <I2C_Master_ADDR+0x30c>
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046da:	d00b      	beq.n	80046f4 <I2C_Master_ADDR+0x294>
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d008      	beq.n	80046f4 <I2C_Master_ADDR+0x294>
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d005      	beq.n	80046f4 <I2C_Master_ADDR+0x294>
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d002      	beq.n	80046f4 <I2C_Master_ADDR+0x294>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d13b      	bne.n	800476c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e032      	b.n	800476c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004714:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d117      	bne.n	8004756 <I2C_Master_ADDR+0x2f6>
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472c:	d00b      	beq.n	8004746 <I2C_Master_ADDR+0x2e6>
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d008      	beq.n	8004746 <I2C_Master_ADDR+0x2e6>
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <I2C_Master_ADDR+0x2e6>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b10      	cmp	r3, #16
 800473e:	d002      	beq.n	8004746 <I2C_Master_ADDR+0x2e6>
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	2b20      	cmp	r3, #32
 8004744:	d107      	bne.n	8004756 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004754:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004772:	e00b      	b.n	800478c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
}
 800478a:	e7ff      	b.n	800478c <I2C_Master_ADDR+0x32c>
 800478c:	bf00      	nop
 800478e:	3744      	adds	r7, #68	@ 0x44
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02b      	beq.n	8004808 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d114      	bne.n	8004808 <I2C_SlaveTransmit_TXE+0x72>
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b29      	cmp	r3, #41	@ 0x29
 80047e2:	d111      	bne.n	8004808 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2221      	movs	r2, #33	@ 0x21
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2228      	movs	r2, #40	@ 0x28
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff f9c2 	bl	8003b8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d011      	beq.n	8004846 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02c      	beq.n	80048c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d114      	bne.n	80048c4 <I2C_SlaveReceive_RXNE+0x74>
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b2a      	cmp	r3, #42	@ 0x2a
 800489e:	d111      	bne.n	80048c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2222      	movs	r2, #34	@ 0x22
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2228      	movs	r2, #40	@ 0x28
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff f96d 	bl	8003b9e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004928:	2b28      	cmp	r3, #40	@ 0x28
 800492a:	d127      	bne.n	800497c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	09db      	lsrs	r3, r3, #7
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	81bb      	strh	r3, [r7, #12]
 800495e:	e002      	b.n	8004966 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800496e:	89ba      	ldrh	r2, [r7, #12]
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff f91b 	bl	8003bb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800497a:	e00e      	b.n	800499a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a00:	d172      	bne.n	8004ae8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b22      	cmp	r3, #34	@ 0x22
 8004a06:	d002      	beq.n	8004a0e <I2C_Slave_STOPF+0x6a>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a0c:	d135      	bne.n	8004a7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe f884 	bl	8002b54 <HAL_DMA_GetState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d049      	beq.n	8004ae6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	4a69      	ldr	r2, [pc, #420]	@ (8004bfc <I2C_Slave_STOPF+0x258>)
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fefa 	bl	8002858 <HAL_DMA_Abort_IT>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03d      	beq.n	8004ae6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a78:	e035      	b.n	8004ae6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f84e 	bl	8002b54 <HAL_DMA_GetState>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d014      	beq.n	8004ae8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8004bfc <I2C_Slave_STOPF+0x258>)
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fd fec4 	bl	8002858 <HAL_DMA_Abort_IT>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4798      	blx	r3
 8004ae4:	e000      	b.n	8004ae8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d03e      	beq.n	8004b70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d112      	bne.n	8004b26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d112      	bne.n	8004b5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	f043 0204 	orr.w	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f8b7 	bl	8004cec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b7e:	e039      	b.n	8004bf4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b84:	d109      	bne.n	8004b9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2228      	movs	r2, #40	@ 0x28
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff f802 	bl	8003b9e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b28      	cmp	r3, #40	@ 0x28
 8004ba4:	d111      	bne.n	8004bca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <I2C_Slave_STOPF+0x25c>)
 8004baa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff f801 	bl	8003bca <HAL_I2C_ListenCpltCallback>
}
 8004bc8:	e014      	b.n	8004bf4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	2b22      	cmp	r3, #34	@ 0x22
 8004bd0:	d002      	beq.n	8004bd8 <I2C_Slave_STOPF+0x234>
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b22      	cmp	r3, #34	@ 0x22
 8004bd6:	d10d      	bne.n	8004bf4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fe ffd5 	bl	8003b9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	0800517d 	.word	0x0800517d
 8004c00:	ffff0000 	.word	0xffff0000

08004c04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d002      	beq.n	8004c26 <I2C_Slave_AF+0x22>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d129      	bne.n	8004c7a <I2C_Slave_AF+0x76>
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b28      	cmp	r3, #40	@ 0x28
 8004c2a:	d126      	bne.n	8004c7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce8 <I2C_Slave_AF+0xe4>)
 8004c30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fe ffa9 	bl	8003bca <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c78:	e031      	b.n	8004cde <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b21      	cmp	r3, #33	@ 0x21
 8004c7e:	d129      	bne.n	8004cd4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <I2C_Slave_AF+0xe4>)
 8004c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2221      	movs	r2, #33	@ 0x21
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004caa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cb4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cc4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fe fbf6 	bl	80034b8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fe ff5d 	bl	8003b8c <HAL_I2C_SlaveTxCpltCallback>
}
 8004cd2:	e004      	b.n	8004cde <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cdc:	615a      	str	r2, [r3, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	ffff0000 	.word	0xffff0000

08004cec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d04:	7bbb      	ldrb	r3, [r7, #14]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d002      	beq.n	8004d10 <I2C_ITError+0x24>
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d10a      	bne.n	8004d26 <I2C_ITError+0x3a>
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b22      	cmp	r3, #34	@ 0x22
 8004d14:	d107      	bne.n	8004d26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d2c:	2b28      	cmp	r3, #40	@ 0x28
 8004d2e:	d107      	bne.n	8004d40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2228      	movs	r2, #40	@ 0x28
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d3e:	e015      	b.n	8004d6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4e:	d00a      	beq.n	8004d66 <I2C_ITError+0x7a>
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b60      	cmp	r3, #96	@ 0x60
 8004d54:	d007      	beq.n	8004d66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7a:	d162      	bne.n	8004e42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d020      	beq.n	8004ddc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9e:	4a6a      	ldr	r2, [pc, #424]	@ (8004f48 <I2C_ITError+0x25c>)
 8004da0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd fd56 	bl	8002858 <HAL_DMA_Abort_IT>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8089 	beq.w	8004ec6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4798      	blx	r3
 8004dda:	e074      	b.n	8004ec6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	4a59      	ldr	r2, [pc, #356]	@ (8004f48 <I2C_ITError+0x25c>)
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd fd35 	bl	8002858 <HAL_DMA_Abort_IT>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d068      	beq.n	8004ec6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d10b      	bne.n	8004e1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
 8004e40:	e041      	b.n	8004ec6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b60      	cmp	r3, #96	@ 0x60
 8004e4c:	d125      	bne.n	8004e9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d10b      	bne.n	8004e82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe febd 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
 8004e98:	e015      	b.n	8004ec6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d10b      	bne.n	8004ec0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fe fe9d 	bl	8003c00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10e      	bne.n	8004ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d113      	bne.n	8004f40 <I2C_ITError+0x254>
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b28      	cmp	r3, #40	@ 0x28
 8004f1c:	d110      	bne.n	8004f40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <I2C_ITError+0x260>)
 8004f22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fe fe45 	bl	8003bca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0800517d 	.word	0x0800517d
 8004f4c:	ffff0000 	.word	0xffff0000

08004f50 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f64:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f6c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f82:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f90:	2200      	movs	r2, #0
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004faa:	2b21      	cmp	r3, #33	@ 0x21
 8004fac:	d007      	beq.n	8004fbe <I2C_DMAXferCplt+0x6e>
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004fb4:	2b22      	cmp	r3, #34	@ 0x22
 8004fb6:	d131      	bne.n	800501c <I2C_DMAXferCplt+0xcc>
 8004fb8:	7cbb      	ldrb	r3, [r7, #18]
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d12e      	bne.n	800501c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fcc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b29      	cmp	r3, #41	@ 0x29
 8004fd8:	d10a      	bne.n	8004ff0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2221      	movs	r2, #33	@ 0x21
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2228      	movs	r2, #40	@ 0x28
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fe8:	6978      	ldr	r0, [r7, #20]
 8004fea:	f7fe fdcf 	bl	8003b8c <HAL_I2C_SlaveTxCpltCallback>
 8004fee:	e00c      	b.n	800500a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ff4:	d109      	bne.n	800500a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2222      	movs	r2, #34	@ 0x22
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2228      	movs	r2, #40	@ 0x28
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f7fe fdca 	bl	8003b9e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005018:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800501a:	e074      	b.n	8005106 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d06e      	beq.n	8005106 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005040:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005050:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005058:	d009      	beq.n	800506e <I2C_DMAXferCplt+0x11e>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d006      	beq.n	800506e <I2C_DMAXferCplt+0x11e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005066:	d002      	beq.n	800506e <I2C_DMAXferCplt+0x11e>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d107      	bne.n	800507e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800508c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800509c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2200      	movs	r2, #0
 80050a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	f7fe fda7 	bl	8003c00 <HAL_I2C_ErrorCallback>
}
 80050b2:	e028      	b.n	8005106 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	d10a      	bne.n	80050de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	f7fe fd89 	bl	8003bee <HAL_I2C_MemRxCpltCallback>
}
 80050dc:	e013      	b.n	8005106 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d002      	beq.n	80050f2 <I2C_DMAXferCplt+0x1a2>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d103      	bne.n	80050fa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80050f8:	e002      	b.n	8005100 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2212      	movs	r2, #18
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005100:	6978      	ldr	r0, [r7, #20]
 8005102:	f7fe fd3a 	bl	8003b7a <HAL_I2C_MasterRxCpltCallback>
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005128:	2200      	movs	r2, #0
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	2200      	movs	r2, #0
 800513a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f043 0210 	orr.w	r2, r3, #16
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7fe fd46 	bl	8003c00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005194:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005196:	4b4b      	ldr	r3, [pc, #300]	@ (80052c4 <I2C_DMAAbort+0x148>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	4a4a      	ldr	r2, [pc, #296]	@ (80052c8 <I2C_DMAAbort+0x14c>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0a1a      	lsrs	r2, r3, #8
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00da      	lsls	r2, r3, #3
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80051c2:	e00a      	b.n	80051da <I2C_DMAAbort+0x5e>
    }
    count--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d8:	d0ea      	beq.n	80051b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	2200      	movs	r2, #0
 80051e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	2200      	movs	r2, #0
 80051f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521c:	2200      	movs	r2, #0
 800521e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	2200      	movs	r2, #0
 800522e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b60      	cmp	r3, #96	@ 0x60
 800524a:	d10e      	bne.n	800526a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7fe fcd5 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005268:	e027      	b.n	80052ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005270:	2b28      	cmp	r3, #40	@ 0x28
 8005272:	d117      	bne.n	80052a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005292:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2228      	movs	r2, #40	@ 0x28
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052a2:	e007      	b.n	80052b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052b4:	6978      	ldr	r0, [r7, #20]
 80052b6:	f7fe fca3 	bl	8003c00 <HAL_I2C_ErrorCallback>
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000000 	.word	0x20000000
 80052c8:	14f8b589 	.word	0x14f8b589

080052cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	4a13      	ldr	r2, [pc, #76]	@ (800532c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0a1a      	lsrs	r2, r3, #8
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d107      	bne.n	800530a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e008      	b.n	800531c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005318:	d0e9      	beq.n	80052ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000000 	.word	0x20000000
 800532c:	14f8b589 	.word	0x14f8b589

08005330 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005340:	d103      	bne.n	800534a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005348:	e007      	b.n	800535a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005352:	d102      	bne.n	800535a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2208      	movs	r2, #8
 8005358:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e272      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8087 	beq.w	8005492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005384:	4b92      	ldr	r3, [pc, #584]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 030c 	and.w	r3, r3, #12
 800538c:	2b04      	cmp	r3, #4
 800538e:	d00c      	beq.n	80053aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005390:	4b8f      	ldr	r3, [pc, #572]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b08      	cmp	r3, #8
 800539a:	d112      	bne.n	80053c2 <HAL_RCC_OscConfig+0x5e>
 800539c:	4b8c      	ldr	r3, [pc, #560]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d10b      	bne.n	80053c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053aa:	4b89      	ldr	r3, [pc, #548]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d06c      	beq.n	8005490 <HAL_RCC_OscConfig+0x12c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d168      	bne.n	8005490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e24c      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ca:	d106      	bne.n	80053da <HAL_RCC_OscConfig+0x76>
 80053cc:	4b80      	ldr	r3, [pc, #512]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a7f      	ldr	r2, [pc, #508]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e02e      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0x98>
 80053e2:	4b7b      	ldr	r3, [pc, #492]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7a      	ldr	r2, [pc, #488]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b78      	ldr	r3, [pc, #480]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a77      	ldr	r2, [pc, #476]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e01d      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0xbc>
 8005406:	4b72      	ldr	r3, [pc, #456]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a71      	ldr	r2, [pc, #452]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800540c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b6f      	ldr	r3, [pc, #444]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6e      	ldr	r2, [pc, #440]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e00b      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 8005420:	4b6b      	ldr	r3, [pc, #428]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6a      	ldr	r2, [pc, #424]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b68      	ldr	r3, [pc, #416]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a67      	ldr	r2, [pc, #412]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fc fa8a 	bl	8001958 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fc fa86 	bl	8001958 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e200      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	4b5d      	ldr	r3, [pc, #372]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0xe4>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc fa76 	bl	8001958 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005470:	f7fc fa72 	bl	8001958 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	@ 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1ec      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005482:	4b53      	ldr	r3, [pc, #332]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x10c>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d063      	beq.n	8005566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800549e:	4b4c      	ldr	r3, [pc, #304]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054aa:	4b49      	ldr	r3, [pc, #292]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d11c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x18c>
 80054b6:	4b46      	ldr	r3, [pc, #280]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d116      	bne.n	80054f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_RCC_OscConfig+0x176>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d001      	beq.n	80054da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e1c0      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054da:	4b3d      	ldr	r3, [pc, #244]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4939      	ldr	r1, [pc, #228]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	e03a      	b.n	8005566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f8:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <HAL_RCC_OscConfig+0x270>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fe:	f7fc fa2b 	bl	8001958 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005506:	f7fc fa27 	bl	8001958 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e1a1      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	4b2d      	ldr	r3, [pc, #180]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005524:	4b2a      	ldr	r3, [pc, #168]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4927      	ldr	r1, [pc, #156]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	e015      	b.n	8005566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553a:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <HAL_RCC_OscConfig+0x270>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fc fa0a 	bl	8001958 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005548:	f7fc fa06 	bl	8001958 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e180      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555a:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d03a      	beq.n	80055e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d019      	beq.n	80055ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557a:	4b17      	ldr	r3, [pc, #92]	@ (80055d8 <HAL_RCC_OscConfig+0x274>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005580:	f7fc f9ea 	bl	8001958 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005588:	f7fc f9e6 	bl	8001958 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e160      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <HAL_RCC_OscConfig+0x26c>)
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055a6:	2001      	movs	r0, #1
 80055a8:	f000 face 	bl	8005b48 <RCC_Delay>
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ae:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <HAL_RCC_OscConfig+0x274>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7fc f9d0 	bl	8001958 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ba:	e00f      	b.n	80055dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fc f9cc 	bl	8001958 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d908      	bls.n	80055dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e146      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	42420000 	.word	0x42420000
 80055d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055dc:	4b92      	ldr	r3, [pc, #584]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e9      	bne.n	80055bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a6 	beq.w	8005742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	4b88      	ldr	r3, [pc, #544]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4a87      	ldr	r2, [pc, #540]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005610:	61d3      	str	r3, [r2, #28]
 8005612:	4b85      	ldr	r3, [pc, #532]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	4b82      	ldr	r3, [pc, #520]	@ (800582c <HAL_RCC_OscConfig+0x4c8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d118      	bne.n	8005660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562e:	4b7f      	ldr	r3, [pc, #508]	@ (800582c <HAL_RCC_OscConfig+0x4c8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a7e      	ldr	r2, [pc, #504]	@ (800582c <HAL_RCC_OscConfig+0x4c8>)
 8005634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563a:	f7fc f98d 	bl	8001958 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005642:	f7fc f989 	bl	8001958 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b64      	cmp	r3, #100	@ 0x64
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e103      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005654:	4b75      	ldr	r3, [pc, #468]	@ (800582c <HAL_RCC_OscConfig+0x4c8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x312>
 8005668:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4a6e      	ldr	r2, [pc, #440]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6213      	str	r3, [r2, #32]
 8005674:	e02d      	b.n	80056d2 <HAL_RCC_OscConfig+0x36e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x334>
 800567e:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4a69      	ldr	r2, [pc, #420]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6213      	str	r3, [r2, #32]
 800568a:	4b67      	ldr	r3, [pc, #412]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	4a66      	ldr	r2, [pc, #408]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	6213      	str	r3, [r2, #32]
 8005696:	e01c      	b.n	80056d2 <HAL_RCC_OscConfig+0x36e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d10c      	bne.n	80056ba <HAL_RCC_OscConfig+0x356>
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4a60      	ldr	r2, [pc, #384]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	6213      	str	r3, [r2, #32]
 80056ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6213      	str	r3, [r2, #32]
 80056b8:	e00b      	b.n	80056d2 <HAL_RCC_OscConfig+0x36e>
 80056ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4a5a      	ldr	r2, [pc, #360]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6213      	str	r3, [r2, #32]
 80056c6:	4b58      	ldr	r3, [pc, #352]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4a57      	ldr	r2, [pc, #348]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d015      	beq.n	8005706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056da:	f7fc f93d 	bl	8001958 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc f939 	bl	8001958 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0b1      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ee      	beq.n	80056e2 <HAL_RCC_OscConfig+0x37e>
 8005704:	e014      	b.n	8005730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005706:	f7fc f927 	bl	8001958 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fc f923 	bl	8001958 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e09b      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005724:	4b40      	ldr	r3, [pc, #256]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1ee      	bne.n	800570e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005736:	4b3c      	ldr	r3, [pc, #240]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4a3b      	ldr	r2, [pc, #236]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800573c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8087 	beq.w	800585a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574c:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d061      	beq.n	800581c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d146      	bne.n	80057ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005760:	4b33      	ldr	r3, [pc, #204]	@ (8005830 <HAL_RCC_OscConfig+0x4cc>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fc f8f7 	bl	8001958 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576e:	f7fc f8f3 	bl	8001958 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e06d      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005780:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d108      	bne.n	80057a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005796:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4921      	ldr	r1, [pc, #132]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a19      	ldr	r1, [r3, #32]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	430b      	orrs	r3, r1
 80057ba:	491b      	ldr	r1, [pc, #108]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c6:	f7fc f8c7 	bl	8001958 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ce:	f7fc f8c3 	bl	8001958 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e03d      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057e0:	4b11      	ldr	r3, [pc, #68]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x46a>
 80057ec:	e035      	b.n	800585a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_RCC_OscConfig+0x4cc>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fc f8b0 	bl	8001958 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fc f8ac 	bl	8001958 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e026      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800580e:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <HAL_RCC_OscConfig+0x4c4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x498>
 800581a:	e01e      	b.n	800585a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d107      	bne.n	8005834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e019      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
 8005830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005834:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <HAL_RCC_OscConfig+0x500>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	429a      	cmp	r2, r3
 8005846:	d106      	bne.n	8005856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000

08005868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0d0      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800587c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d910      	bls.n	80058ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b67      	ldr	r3, [pc, #412]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 0207 	bic.w	r2, r3, #7
 8005892:	4965      	ldr	r1, [pc, #404]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a58      	ldr	r2, [pc, #352]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a52      	ldr	r2, [pc, #328]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80058e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d040      	beq.n	8005988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d115      	bne.n	8005946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005926:	4b41      	ldr	r3, [pc, #260]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e073      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005936:	4b3d      	ldr	r3, [pc, #244]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e06b      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005946:	4b39      	ldr	r3, [pc, #228]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f023 0203 	bic.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4936      	ldr	r1, [pc, #216]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	4313      	orrs	r3, r2
 8005956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005958:	f7fb fffe 	bl	8001958 <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595e:	e00a      	b.n	8005976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005960:	f7fb fffa 	bl	8001958 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e053      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 020c 	and.w	r2, r3, #12
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	429a      	cmp	r2, r3
 8005986:	d1eb      	bne.n	8005960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005988:	4b27      	ldr	r3, [pc, #156]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d210      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 0207 	bic.w	r2, r3, #7
 800599e:	4922      	ldr	r1, [pc, #136]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <HAL_RCC_ClockConfig+0x1c4>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x1c8>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_ClockConfig+0x1cc>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <HAL_RCC_ClockConfig+0x1d0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb ff5c 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	08008cd0 	.word	0x08008cd0
 8005a34:	20000000 	.word	0x20000000
 8005a38:	20000004 	.word	0x20000004

08005a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a56:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x30>
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x36>
 8005a6a:	e027      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a6c:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a6e:	613b      	str	r3, [r7, #16]
      break;
 8005a70:	e027      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	0c9b      	lsrs	r3, r3, #18
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	0c5b      	lsrs	r3, r3, #17
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a96:	5cd3      	ldrb	r3, [r2, r3]
 8005a98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a9e:	fb03 f202 	mul.w	r2, r3, r2
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	613b      	str	r3, [r7, #16]
      break;
 8005aba:	e002      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005abe:	613b      	str	r3, [r7, #16]
      break;
 8005ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac2:	693b      	ldr	r3, [r7, #16]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	007a1200 	.word	0x007a1200
 8005ad8:	08008ce8 	.word	0x08008ce8
 8005adc:	08008cf8 	.word	0x08008cf8
 8005ae0:	003d0900 	.word	0x003d0900

08005ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae8:	4b02      	ldr	r3, [pc, #8]	@ (8005af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	20000000 	.word	0x20000000

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff2 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	08008ce0 	.word	0x08008ce0

08005b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b24:	f7ff ffde 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0adb      	lsrs	r3, r3, #11
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	08008ce0 	.word	0x08008ce0

08005b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <RCC_Delay+0x34>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	@ (8005b80 <RCC_Delay+0x38>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0a5b      	lsrs	r3, r3, #9
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b64:	bf00      	nop
  }
  while (Delay --);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	60fa      	str	r2, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f9      	bne.n	8005b64 <RCC_Delay+0x1c>
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	10624dd3 	.word	0x10624dd3

08005b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d07d      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	61d3      	str	r3, [r2, #28]
 8005bbc:	4b49      	ldr	r3, [pc, #292]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	4b46      	ldr	r3, [pc, #280]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d118      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd8:	4b43      	ldr	r3, [pc, #268]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be4:	f7fb feb8 	bl	8001958 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bea:	e008      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fb feb4 	bl	8001958 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	@ 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e06d      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c0a:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02e      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d027      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c32:	4b2e      	ldr	r3, [pc, #184]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c38:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c3e:	4a29      	ldr	r2, [pc, #164]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4e:	f7fb fe83 	bl	8001958 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c54:	e00a      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fb fe7f 	bl	8001958 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e036      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ee      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4917      	ldr	r1, [pc, #92]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c90:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	4a13      	ldr	r2, [pc, #76]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	490b      	ldr	r1, [pc, #44]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4904      	ldr	r1, [pc, #16]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40007000 	.word	0x40007000
 8005cec:	42420440 	.word	0x42420440

08005cf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	f200 808a 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d045      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d075      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005d26:	e082      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005d28:	4b46      	ldr	r3, [pc, #280]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d2e:	4b45      	ldr	r3, [pc, #276]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d07b      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	0c9b      	lsrs	r3, r3, #18
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	4a41      	ldr	r2, [pc, #260]	@ (8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005d44:	5cd3      	ldrb	r3, [r2, r3]
 8005d46:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d015      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d52:	4b3c      	ldr	r3, [pc, #240]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	0c5b      	lsrs	r3, r3, #17
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005d5e:	5cd3      	ldrb	r3, [r2, r3]
 8005d60:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005d6c:	4a38      	ldr	r2, [pc, #224]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e004      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4a34      	ldr	r2, [pc, #208]	@ (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005d88:	4b2e      	ldr	r3, [pc, #184]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d94:	d102      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	61bb      	str	r3, [r7, #24]
      break;
 8005d9a:	e04a      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	61bb      	str	r3, [r7, #24]
      break;
 8005daa:	e042      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005dac:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbc:	d108      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	e01f      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dda:	d109      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ddc:	4b19      	ldr	r3, [pc, #100]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005de8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e00f      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dfa:	d11c      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d016      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005e08:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005e0c:	61bb      	str	r3, [r7, #24]
      break;
 8005e0e:	e012      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e10:	e011      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e12:	f7ff fe85 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 8005e16:	4602      	mov	r2, r0
 8005e18:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	0b9b      	lsrs	r3, r3, #14
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	3301      	adds	r3, #1
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61bb      	str	r3, [r7, #24]
      break;
 8005e2c:	e004      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e36:	bf00      	nop
    }
  }
  return (frequency);
 8005e38:	69bb      	ldr	r3, [r7, #24]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	08008cfc 	.word	0x08008cfc
 8005e4c:	08008d0c 	.word	0x08008d0c
 8005e50:	007a1200 	.word	0x007a1200
 8005e54:	003d0900 	.word	0x003d0900
 8005e58:	aaaaaaab 	.word	0xaaaaaaab

08005e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e076      	b.n	8005f5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d108      	bne.n	8005e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e7e:	d009      	beq.n	8005e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	61da      	str	r2, [r3, #28]
 8005e86:	e005      	b.n	8005e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb fa10 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f18:	ea42 0103 	orr.w	r1, r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	0c1a      	lsrs	r2, r3, #16
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f002 0204 	and.w	r2, r2, #4
 8005f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	@ 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f72:	2301      	movs	r3, #1
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f76:	f7fb fcef 	bl	8001958 <HAL_GetTick>
 8005f7a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f82:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f8a:	887b      	ldrh	r3, [r7, #2]
 8005f8c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d00c      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x4a>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f9a:	d106      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x46>
 8005fa4:	7ffb      	ldrb	r3, [r7, #31]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d001      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
 8005fac:	e17f      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x5c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x5c>
 8005fba:	887b      	ldrh	r3, [r7, #2]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e174      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x6e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e16d      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d003      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2205      	movs	r2, #5
 8005fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	887a      	ldrh	r2, [r7, #2]
 8005ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	887a      	ldrh	r2, [r7, #2]
 8006016:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b40      	cmp	r3, #64	@ 0x40
 8006030:	d007      	beq.n	8006042 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604a:	d17e      	bne.n	800614a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SPI_TransmitReceive+0xf6>
 8006054:	8afb      	ldrh	r3, [r7, #22]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d16c      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	1c9a      	adds	r2, r3, #2
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800607e:	e059      	b.n	8006134 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d11b      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x162>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d016      	beq.n	80060c6 <HAL_SPI_TransmitReceive+0x162>
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	2b01      	cmp	r3, #1
 800609c:	d113      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	881a      	ldrh	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d119      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x1a4>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d014      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	b292      	uxth	r2, r2
 80060ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006104:	2301      	movs	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006108:	f7fb fc26 	bl	8001958 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006114:	429a      	cmp	r2, r3
 8006116:	d80d      	bhi.n	8006134 <HAL_SPI_TransmitReceive+0x1d0>
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d009      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0bc      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1a0      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x11c>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d19b      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x11c>
 8006148:	e082      	b.n	8006250 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x1f4>
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d171      	bne.n	800623c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800617e:	e05d      	b.n	800623c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d11c      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x264>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d017      	beq.n	80061c8 <HAL_SPI_TransmitReceive+0x264>
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	2b01      	cmp	r3, #1
 800619c:	d114      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d119      	bne.n	800620a <HAL_SPI_TransmitReceive+0x2a6>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d014      	beq.n	800620a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006206:	2301      	movs	r3, #1
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800620a:	f7fb fba5 	bl	8001958 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006216:	429a      	cmp	r2, r3
 8006218:	d803      	bhi.n	8006222 <HAL_SPI_TransmitReceive+0x2be>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d102      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x2c4>
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e038      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d19c      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x21c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d197      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fd35 	bl	8006cc4 <SPI_EndRxTxTransaction>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e01d      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	@ 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d001      	beq.n	80062d6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
 80062d4:	e097      	b.n	8006406 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_SPI_Transmit_DMA+0x2a>
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e08f      	b.n	8006406 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_SPI_Transmit_DMA+0x3c>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e088      	b.n	8006406 <HAL_SPI_Transmit_DMA+0x14e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2203      	movs	r2, #3
 8006300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	88fa      	ldrh	r2, [r7, #6]
 800631a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006342:	d10f      	bne.n	8006364 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006352:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006362:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006368:	4a29      	ldr	r2, [pc, #164]	@ (8006410 <HAL_SPI_Transmit_DMA+0x158>)
 800636a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006370:	4a28      	ldr	r2, [pc, #160]	@ (8006414 <HAL_SPI_Transmit_DMA+0x15c>)
 8006372:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006378:	4a27      	ldr	r2, [pc, #156]	@ (8006418 <HAL_SPI_Transmit_DMA+0x160>)
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006380:	2200      	movs	r2, #0
 8006382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	4619      	mov	r1, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800639a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800639c:	f7fc f9c0 	bl	8002720 <HAL_DMA_Start_IT>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	f043 0210 	orr.w	r2, r3, #16
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e023      	b.n	8006406 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c8:	2b40      	cmp	r3, #64	@ 0x40
 80063ca:	d007      	beq.n	80063dc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0220 	orr.w	r2, r2, #32
 80063f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0202 	orr.w	r2, r2, #2
 8006402:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08006a53 	.word	0x08006a53
 8006414:	08006879 	.word	0x08006879
 8006418:	08006aa7 	.word	0x08006aa7

0800641c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006430:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00c      	beq.n	8006458 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006444:	d106      	bne.n	8006454 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_SPI_TransmitReceive_DMA+0x38>
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d001      	beq.n	8006458 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
 8006456:	e0cf      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0c4      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_SPI_TransmitReceive_DMA+0x60>
 8006478:	2302      	movs	r3, #2
 800647a:	e0bd      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b04      	cmp	r3, #4
 800648e:	d003      	beq.n	8006498 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2205      	movs	r2, #5
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	887a      	ldrh	r2, [r7, #2]
 80064ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	887a      	ldrh	r2, [r7, #2]
 80064ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d108      	bne.n	80064ec <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064de:	4a48      	ldr	r2, [pc, #288]	@ (8006600 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80064e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e6:	4a47      	ldr	r2, [pc, #284]	@ (8006604 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80064e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80064ea:	e007      	b.n	80064fc <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f0:	4a45      	ldr	r2, [pc, #276]	@ (8006608 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f8:	4a44      	ldr	r2, [pc, #272]	@ (800660c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80064fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006500:	4a43      	ldr	r2, [pc, #268]	@ (8006610 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006508:	2200      	movs	r2, #0
 800650a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	4619      	mov	r1, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006522:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006524:	f7fc f8fc 	bl	8002720 <HAL_DMA_Start_IT>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006532:	f043 0210 	orr.w	r2, r3, #16
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e058      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655a:	2200      	movs	r2, #0
 800655c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	2200      	movs	r2, #0
 8006564:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656a:	2200      	movs	r2, #0
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006572:	2200      	movs	r2, #0
 8006574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	4619      	mov	r1, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800658e:	f7fc f8c7 	bl	8002720 <HAL_DMA_Start_IT>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659c:	f043 0210 	orr.w	r2, r3, #16
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e023      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ba:	2b40      	cmp	r3, #64	@ 0x40
 80065bc:	d007      	beq.n	80065ce <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0220 	orr.w	r2, r2, #32
 80065e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0202 	orr.w	r2, r2, #2
 80065f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	08006a6f 	.word	0x08006a6f
 8006604:	0800691f 	.word	0x0800691f
 8006608:	08006a8b 	.word	0x08006a8b
 800660c:	080069c5 	.word	0x080069c5
 8006610:	08006aa7 	.word	0x08006aa7

08006614 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	099b      	lsrs	r3, r3, #6
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10f      	bne.n	8006658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d004      	beq.n	8006658 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
    return;
 8006656:	e0be      	b.n	80067d6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <HAL_SPI_IRQHandler+0x66>
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	09db      	lsrs	r3, r3, #7
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
    return;
 8006678:	e0ad      	b.n	80067d6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_SPI_IRQHandler+0x80>
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	099b      	lsrs	r3, r3, #6
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80a1 	beq.w	80067d6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 809a 	beq.w	80067d6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	099b      	lsrs	r3, r3, #6
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d023      	beq.n	80066f6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d011      	beq.n	80066de <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	f043 0204 	orr.w	r2, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	e00b      	b.n	80066f6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	693b      	ldr	r3, [r7, #16]
        return;
 80066f4:	e06f      	b.n	80067d6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d014      	beq.n	800672c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	f043 0201 	orr.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006730:	2b00      	cmp	r3, #0
 8006732:	d04f      	beq.n	80067d4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006742:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <HAL_SPI_IRQHandler+0x14c>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d034      	beq.n	80067ca <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0203 	bic.w	r2, r2, #3
 800676e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d011      	beq.n	800679c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677c:	4a17      	ldr	r2, [pc, #92]	@ (80067dc <HAL_SPI_IRQHandler+0x1c8>)
 800677e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006784:	4618      	mov	r0, r3
 8006786:	f7fc f867 	bl	8002858 <HAL_DMA_Abort_IT>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006794:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d016      	beq.n	80067d2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a8:	4a0c      	ldr	r2, [pc, #48]	@ (80067dc <HAL_SPI_IRQHandler+0x1c8>)
 80067aa:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fc f851 	bl	8002858 <HAL_DMA_Abort_IT>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80067c8:	e003      	b.n	80067d2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f83e 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067d0:	e000      	b.n	80067d4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80067d2:	bf00      	nop
    return;
 80067d4:	bf00      	nop
  }
}
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	08006ae7 	.word	0x08006ae7

080067e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800686c:	b2db      	uxtb	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006886:	f7fb f867 	bl	8001958 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b20      	cmp	r3, #32
 8006898:	d03b      	beq.n	8006912 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0220 	bic.w	r2, r2, #32
 80068a8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0202 	bic.w	r2, r2, #2
 80068b8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	2164      	movs	r1, #100	@ 0x64
 80068be:	6978      	ldr	r0, [r7, #20]
 80068c0:	f000 fa00 	bl	8006cc4 <SPI_EndRxTxTransaction>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800690a:	6978      	ldr	r0, [r7, #20]
 800690c:	f7ff ff9e 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006910:	e002      	b.n	8006918 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006912:	6978      	ldr	r0, [r7, #20]
 8006914:	f7ff ff64 	bl	80067e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800692c:	f7fb f814 	bl	8001958 <HAL_GetTick>
 8006930:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d03b      	beq.n	80069b8 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0220 	bic.w	r2, r2, #32
 800694e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10d      	bne.n	8006974 <SPI_DMAReceiveCplt+0x56>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006960:	d108      	bne.n	8006974 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0203 	bic.w	r2, r2, #3
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e007      	b.n	8006984 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	2164      	movs	r1, #100	@ 0x64
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f949 	bl	8006c20 <SPI_EndRxTransaction>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff ff4b 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069b6:	e002      	b.n	80069be <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7ff ff1a 	bl	80067f2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d2:	f7fa ffc1 	bl	8001958 <HAL_GetTick>
 80069d6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d02f      	beq.n	8006a46 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0220 	bic.w	r2, r2, #32
 80069f4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	2164      	movs	r1, #100	@ 0x64
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f962 	bl	8006cc4 <SPI_EndRxTxTransaction>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0203 	bic.w	r2, r2, #3
 8006a20:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff ff04 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a44:	e002      	b.n	8006a4c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fedc 	bl	8006804 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fed8 	bl	8006816 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff fed3 	bl	8006828 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fece 	bl	800683a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0203 	bic.w	r2, r2, #3
 8006ac2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	f043 0210 	orr.w	r2, r3, #16
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff feb7 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fea3 	bl	800684c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b20:	f7fa ff1a 	bl	8001958 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b30:	f7fa ff12 	bl	8001958 <HAL_GetTick>
 8006b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b36:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	015b      	lsls	r3, r3, #5
 8006b3c:	0d1b      	lsrs	r3, r3, #20
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b46:	e054      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d050      	beq.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b50:	f7fa ff02 	bl	8001958 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d902      	bls.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13d      	bne.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b7e:	d111      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b88:	d004      	beq.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b92:	d107      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bac:	d10f      	bne.n	8006bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e017      	b.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d19b      	bne.n	8006b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000000 	.word	0x20000000

08006c20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c34:	d111      	bne.n	8006c5a <SPI_EndRxTransaction+0x3a>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3e:	d004      	beq.n	8006c4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c48:	d107      	bne.n	8006c5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c58:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c62:	d117      	bne.n	8006c94 <SPI_EndRxTransaction+0x74>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6c:	d112      	bne.n	8006c94 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2101      	movs	r1, #1
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff ff49 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01a      	beq.n	8006cba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e013      	b.n	8006cbc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	@ 0x80
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff ff36 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e000      	b.n	8006cbc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2102      	movs	r1, #2
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff ff18 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f043 0220 	orr.w	r2, r3, #32
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e013      	b.n	8006d1e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2180      	movs	r1, #128	@ 0x80
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff ff05 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	f043 0220 	orr.w	r2, r3, #32
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e000      	b.n	8006d1e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e041      	b.n	8006dbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d106      	bne.n	8006d52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fa fce1 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f000 fa5b 	bl	8007220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d001      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e03a      	b.n	8006e52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_TIM_Base_Start_IT+0x98>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x58>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e06:	d009      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x58>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a14      	ldr	r2, [pc, #80]	@ (8006e60 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x58>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a13      	ldr	r2, [pc, #76]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d111      	bne.n	8006e40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b06      	cmp	r3, #6
 8006e2c:	d010      	beq.n	8006e50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	e007      	b.n	8006e50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800

08006e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d020      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0202 	mvn.w	r2, #2
 8006e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f998 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f98b 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f99a 	bl	80071fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d020      	beq.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01b      	beq.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0204 	mvn.w	r2, #4
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f972 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f965 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f974 	bl	80071fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d020      	beq.n	8006f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0208 	mvn.w	r2, #8
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f94c 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f93f 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f94e 	bl	80071fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0310 	and.w	r3, r3, #16
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d020      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01b      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2208      	movs	r2, #8
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f926 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f919 	bl	80071d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f928 	bl	80071fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0201 	mvn.w	r2, #1
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7f9 fce6 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa7f 	bl	80074f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f8f8 	bl	800720c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00c      	beq.n	8007040 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0220 	mvn.w	r2, #32
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa52 	bl	80074e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_TIM_ConfigClockSource+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e0b4      	b.n	80071ce <HAL_TIM_ConfigClockSource+0x186>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800708a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709c:	d03e      	beq.n	800711c <HAL_TIM_ConfigClockSource+0xd4>
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a2:	f200 8087 	bhi.w	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070aa:	f000 8086 	beq.w	80071ba <HAL_TIM_ConfigClockSource+0x172>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b2:	d87f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070b4:	2b70      	cmp	r3, #112	@ 0x70
 80070b6:	d01a      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0xa6>
 80070b8:	2b70      	cmp	r3, #112	@ 0x70
 80070ba:	d87b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070bc:	2b60      	cmp	r3, #96	@ 0x60
 80070be:	d050      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x11a>
 80070c0:	2b60      	cmp	r3, #96	@ 0x60
 80070c2:	d877      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070c4:	2b50      	cmp	r3, #80	@ 0x50
 80070c6:	d03c      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0xfa>
 80070c8:	2b50      	cmp	r3, #80	@ 0x50
 80070ca:	d873      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070cc:	2b40      	cmp	r3, #64	@ 0x40
 80070ce:	d058      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x13a>
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d86f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070d4:	2b30      	cmp	r3, #48	@ 0x30
 80070d6:	d064      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070d8:	2b30      	cmp	r3, #48	@ 0x30
 80070da:	d86b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d060      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d867      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d05c      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d05a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070ec:	e062      	b.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070fe:	f000 f974 	bl	80073ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	609a      	str	r2, [r3, #8]
      break;
 800711a:	e04f      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800712c:	f000 f95d 	bl	80073ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800713e:	609a      	str	r2, [r3, #8]
      break;
 8007140:	e03c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800714e:	461a      	mov	r2, r3
 8007150:	f000 f8d4 	bl	80072fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2150      	movs	r1, #80	@ 0x50
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f92b 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8007160:	e02c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800716e:	461a      	mov	r2, r3
 8007170:	f000 f8f2 	bl	8007358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2160      	movs	r1, #96	@ 0x60
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f91b 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8007180:	e01c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800718e:	461a      	mov	r2, r3
 8007190:	f000 f8b4 	bl	80072fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2140      	movs	r1, #64	@ 0x40
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f90b 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 80071a0:	e00c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f000 f902 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 80071b2:	e003      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e000      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr

080071fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
	...

08007220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2f      	ldr	r2, [pc, #188]	@ (80072f0 <TIM_Base_SetConfig+0xd0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00b      	beq.n	8007250 <TIM_Base_SetConfig+0x30>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800723e:	d007      	beq.n	8007250 <TIM_Base_SetConfig+0x30>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <TIM_Base_SetConfig+0xd4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_Base_SetConfig+0x30>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a2b      	ldr	r2, [pc, #172]	@ (80072f8 <TIM_Base_SetConfig+0xd8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d108      	bne.n	8007262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a22      	ldr	r2, [pc, #136]	@ (80072f0 <TIM_Base_SetConfig+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_Base_SetConfig+0x62>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0x62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <TIM_Base_SetConfig+0xd4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0x62>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a1e      	ldr	r2, [pc, #120]	@ (80072f8 <TIM_Base_SetConfig+0xd8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a0d      	ldr	r2, [pc, #52]	@ (80072f0 <TIM_Base_SetConfig+0xd0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d103      	bne.n	80072c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	611a      	str	r2, [r3, #16]
  }
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800

080072fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f023 0201 	bic.w	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f023 030a 	bic.w	r3, r3, #10
 8007338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0210 	bic.w	r2, r3, #16
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	031b      	lsls	r3, r3, #12
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	621a      	str	r2, [r3, #32]
}
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f043 0307 	orr.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007404:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	021a      	lsls	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	431a      	orrs	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4313      	orrs	r3, r2
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	609a      	str	r2, [r3, #8]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e046      	b.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a16      	ldr	r2, [pc, #88]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748c:	d009      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a12      	ldr	r2, [pc, #72]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a10      	ldr	r2, [pc, #64]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d10c      	bne.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800

080074e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e042      	b.n	80075a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fa f940 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	@ 0x24
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800754a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc7f 	bl	8007e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695a      	ldr	r2, [r3, #20]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b0ba      	sub	sp, #232	@ 0xe8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80075e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10f      	bne.n	800760e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_UART_IRQHandler+0x66>
 80075fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb63 	bl	8007cd2 <UART_Receive_IT>
      return;
 800760c:	e25b      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800760e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80de 	beq.w	80077d4 <HAL_UART_IRQHandler+0x22c>
 8007618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007628:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80d1 	beq.w	80077d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xae>
 800763e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764e:	f043 0201 	orr.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0xd2>
 8007662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	f043 0202 	orr.w	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_UART_IRQHandler+0xf6>
 8007686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d011      	beq.n	80076ce <HAL_UART_IRQHandler+0x126>
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f043 0208 	orr.w	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 81f2 	beq.w	8007abc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_UART_IRQHandler+0x14e>
 80076e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 faee 	bl	8007cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <HAL_UART_IRQHandler+0x17a>
 800771a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800771e:	2b00      	cmp	r3, #0
 8007720:	d04f      	beq.n	80077c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9f8 	bl	8007b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d041      	beq.n	80077ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800774c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3314      	adds	r3, #20
 800775e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007762:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800776e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800777a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1d9      	bne.n	8007736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d013      	beq.n	80077b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778e:	4a7e      	ldr	r2, [pc, #504]	@ (8007988 <HAL_UART_IRQHandler+0x3e0>)
 8007790:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fb f85e 	bl	8002858 <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e00e      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f99c 	bl	8007af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	e00a      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f998 	bl	8007af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e006      	b.n	80077d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f994 	bl	8007af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80077ce:	e175      	b.n	8007abc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	bf00      	nop
    return;
 80077d2:	e173      	b.n	8007abc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	f040 814f 	bne.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8148 	beq.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8141 	beq.w	8007a7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80b6 	beq.w	800798c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800782c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8145 	beq.w	8007ac0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800783a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 813e 	bcs.w	8007ac0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800784a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b20      	cmp	r3, #32
 8007854:	f000 8088 	beq.w	8007968 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800786e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007876:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007884:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007890:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800789c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1d9      	bne.n	8007858 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3314      	adds	r3, #20
 80078c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e1      	bne.n	80078a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3314      	adds	r3, #20
 80078e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007904:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007906:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800790a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007938:	f023 0310 	bic.w	r3, r3, #16
 800793c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800794a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800794c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e3      	bne.n	8007926 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	4618      	mov	r0, r3
 8007964:	f7fa ff3c 	bl	80027e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007976:	b29b      	uxth	r3, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	b29b      	uxth	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8bf 	bl	8007b02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007984:	e09c      	b.n	8007ac0 <HAL_UART_IRQHandler+0x518>
 8007986:	bf00      	nop
 8007988:	08007bdd 	.word	0x08007bdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007994:	b29b      	uxth	r3, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 808e 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80079a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8089 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	330c      	adds	r3, #12
 80079d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80079d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80079d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e3      	bne.n	80079b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3314      	adds	r3, #20
 8007a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e3      	bne.n	80079ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007a54:	61fa      	str	r2, [r7, #28]
 8007a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	617b      	str	r3, [r7, #20]
   return(result);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e3      	bne.n	8007a30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f844 	bl	8007b02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a7a:	e023      	b.n	8007ac4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <HAL_UART_IRQHandler+0x4f4>
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f8b5 	bl	8007c04 <UART_Transmit_IT>
    return;
 8007a9a:	e014      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f8f4 	bl	8007ca2 <UART_EndTransmit_IT>
    return;
 8007aba:	e004      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ac4:	bf00      	nop
  }
}
 8007ac6:	37e8      	adds	r7, #232	@ 0xe8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b095      	sub	sp, #84	@ 0x54
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b40:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d119      	bne.n	8007bc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f023 0310 	bic.w	r3, r3, #16
 8007ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb0:	61ba      	str	r2, [r7, #24]
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6979      	ldr	r1, [r7, #20]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007bd2:	bf00      	nop
 8007bd4:	3754      	adds	r7, #84	@ 0x54
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff ff7a 	bl	8007af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b21      	cmp	r3, #33	@ 0x21
 8007c16:	d13e      	bne.n	8007c96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c20:	d114      	bne.n	8007c4c <UART_Transmit_IT+0x48>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d110      	bne.n	8007c4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	1c9a      	adds	r2, r3, #2
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]
 8007c4a:	e008      	b.n	8007c5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6211      	str	r1, [r2, #32]
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10f      	bne.n	8007c92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr

08007ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff02 	bl	8007acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b08c      	sub	sp, #48	@ 0x30
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b22      	cmp	r3, #34	@ 0x22
 8007ce4:	f040 80ae 	bne.w	8007e44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf0:	d117      	bne.n	8007d22 <UART_Receive_IT+0x50>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d113      	bne.n	8007d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1a:	1c9a      	adds	r2, r3, #2
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d20:	e026      	b.n	8007d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d34:	d007      	beq.n	8007d46 <UART_Receive_IT+0x74>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <UART_Receive_IT+0x82>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e008      	b.n	8007d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d15d      	bne.n	8007e40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0220 	bic.w	r2, r2, #32
 8007d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d135      	bne.n	8007e36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	613b      	str	r3, [r7, #16]
   return(result);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f023 0310 	bic.w	r3, r3, #16
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	330c      	adds	r3, #12
 8007dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df0:	623a      	str	r2, [r7, #32]
 8007df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	6a3a      	ldr	r2, [r7, #32]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e5      	bne.n	8007dd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d10a      	bne.n	8007e28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fe67 	bl	8007b02 <HAL_UARTEx_RxEventCallback>
 8007e34:	e002      	b.n	8007e3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fe51 	bl	8007ade <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e002      	b.n	8007e46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3730      	adds	r7, #48	@ 0x30
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007e8a:	f023 030c 	bic.w	r3, r3, #12
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	430b      	orrs	r3, r1
 8007e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f64 <UART_SetConfig+0x114>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d103      	bne.n	8007ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007eb8:	f7fd fe32 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	e002      	b.n	8007ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ec0:	f7fd fe1a 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8007ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009a      	lsls	r2, r3, #2
 8007ed0:	441a      	add	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007edc:	4a22      	ldr	r2, [pc, #136]	@ (8007f68 <UART_SetConfig+0x118>)
 8007ede:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	0119      	lsls	r1, r3, #4
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009a      	lsls	r2, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007efc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <UART_SetConfig+0x118>)
 8007efe:	fba3 0302 	umull	r0, r3, r3, r2
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	2064      	movs	r0, #100	@ 0x64
 8007f06:	fb00 f303 	mul.w	r3, r0, r3
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	3332      	adds	r3, #50	@ 0x32
 8007f10:	4a15      	ldr	r2, [pc, #84]	@ (8007f68 <UART_SetConfig+0x118>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f1c:	4419      	add	r1, r3
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009a      	lsls	r2, r3, #2
 8007f28:	441a      	add	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f34:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <UART_SetConfig+0x118>)
 8007f36:	fba3 0302 	umull	r0, r3, r3, r2
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	2064      	movs	r0, #100	@ 0x64
 8007f3e:	fb00 f303 	mul.w	r3, r0, r3
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	3332      	adds	r3, #50	@ 0x32
 8007f48:	4a07      	ldr	r2, [pc, #28]	@ (8007f68 <UART_SetConfig+0x118>)
 8007f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4e:	095b      	lsrs	r3, r3, #5
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	440a      	add	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f5c:	bf00      	nop
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40013800 	.word	0x40013800
 8007f68:	51eb851f 	.word	0x51eb851f

08007f6c <OLED_Init>:
  * @function: void OLED_Init(void)
  * @description: OLED初始化
  * @return {*}
  */
 void OLED_Init(void)
 {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0

     uint8_t i = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	71fb      	strb	r3, [r7, #7]
     for(i=0; i<23; i++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	71fb      	strb	r3, [r7, #7]
 8007f7a:	e008      	b.n	8007f8e <OLED_Init+0x22>
     {
         Oled_WriteCommand(init_cmds[i]);
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	4a08      	ldr	r2, [pc, #32]	@ (8007fa0 <OLED_Init+0x34>)
 8007f80:	5cd3      	ldrb	r3, [r2, r3]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f80e 	bl	8007fa4 <Oled_WriteCommand>
     for(i=0; i<23; i++)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b16      	cmp	r3, #22
 8007f92:	d9f3      	bls.n	8007f7c <OLED_Init+0x10>
     }
     OLED_Clear();
 8007f94:	f000 f82c 	bl	8007ff0 <OLED_Clear>
 }
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	2000000c 	.word	0x2000000c

08007fa4 <Oled_WriteCommand>:
  * @description: 向设备写控制命令
  * @param {uint8_t} cmd 芯片手册规定的命令
  * @return {*}
  */
 void Oled_WriteCommand(uint8_t cmd)
 {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteCommand(&hi2c1, OLED_I2C_ADDRESS, OLED_CMD, cmd);
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	213c      	movs	r1, #60	@ 0x3c
 8007fb4:	4803      	ldr	r0, [pc, #12]	@ (8007fc4 <Oled_WriteCommand+0x20>)
 8007fb6:	f7f8 fb9b 	bl	80006f0 <HAL_I2C_WriteCommand>
 }
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000108 	.word	0x20000108

08007fc8 <Oled_WriteData>:
  * @description: 向设备写控制数据
  * @param {uint8_t} data 数据
  * @return {*}
  */
 void Oled_WriteData(uint8_t data)
 {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	4603      	mov	r3, r0
 8007fd0:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_WriteData(&hi2c1 ,OLED_I2C_ADDRESS,OLED_DATA,&data,1);
 8007fd2:	1dfb      	adds	r3, r7, #7
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	2240      	movs	r2, #64	@ 0x40
 8007fda:	213c      	movs	r1, #60	@ 0x3c
 8007fdc:	4803      	ldr	r0, [pc, #12]	@ (8007fec <Oled_WriteData+0x24>)
 8007fde:	f7f8 fbaf 	bl	8000740 <HAL_I2C_WriteData>
 }
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000108 	.word	0x20000108

08007ff0 <OLED_Clear>:
  * @function: OLED_Clear(void)
  * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
  * @return {*}
  */
 void OLED_Clear(void)
 {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
     uint8_t i,n;
     for(i=0;i<8;i++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	71fb      	strb	r3, [r7, #7]
 8007ffa:	e01e      	b.n	800803a <OLED_Clear+0x4a>
     {
         Oled_WriteCommand (0xb0+i);    //设置页地址（0~7）
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	3b50      	subs	r3, #80	@ 0x50
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff ffce 	bl	8007fa4 <Oled_WriteCommand>
         Oled_WriteCommand(0x00);      //设置显示位置—列低地址
 8008008:	2000      	movs	r0, #0
 800800a:	f7ff ffcb 	bl	8007fa4 <Oled_WriteCommand>
         Oled_WriteCommand(0x10);      //设置显示位置—列高地址
 800800e:	2010      	movs	r0, #16
 8008010:	f7ff ffc8 	bl	8007fa4 <Oled_WriteCommand>
         Oled_WriteCommand(0x2e);
 8008014:	202e      	movs	r0, #46	@ 0x2e
 8008016:	f7ff ffc5 	bl	8007fa4 <Oled_WriteCommand>
         for(n=0;n<128;n++)
 800801a:	2300      	movs	r3, #0
 800801c:	71bb      	strb	r3, [r7, #6]
 800801e:	e005      	b.n	800802c <OLED_Clear+0x3c>
             Oled_WriteData(0);
 8008020:	2000      	movs	r0, #0
 8008022:	f7ff ffd1 	bl	8007fc8 <Oled_WriteData>
         for(n=0;n<128;n++)
 8008026:	79bb      	ldrb	r3, [r7, #6]
 8008028:	3301      	adds	r3, #1
 800802a:	71bb      	strb	r3, [r7, #6]
 800802c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	daf5      	bge.n	8008020 <OLED_Clear+0x30>
     for(i=0;i<8;i++)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	3301      	adds	r3, #1
 8008038:	71fb      	strb	r3, [r7, #7]
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b07      	cmp	r3, #7
 800803e:	d9dd      	bls.n	8007ffc <OLED_Clear+0xc>
     }
 }
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <OLED_Set_Pos>:
  * @description: 坐标设置
  * @param {uint8_t} x,y
  * @return {*}
  */
 void OLED_Set_Pos(uint8_t x, uint8_t y)
 {
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	4603      	mov	r3, r0
 8008052:	460a      	mov	r2, r1
 8008054:	71fb      	strb	r3, [r7, #7]
 8008056:	4613      	mov	r3, r2
 8008058:	71bb      	strb	r3, [r7, #6]
     Oled_WriteCommand(0xb0+y);    //设置页地址（0~7）
 800805a:	79bb      	ldrb	r3, [r7, #6]
 800805c:	3b50      	subs	r3, #80	@ 0x50
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff ff9f 	bl	8007fa4 <Oled_WriteCommand>
     Oled_WriteCommand(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	091b      	lsrs	r3, r3, #4
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f043 0310 	orr.w	r3, r3, #16
 8008070:	b2db      	uxtb	r3, r3
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ff96 	bl	8007fa4 <Oled_WriteCommand>
     Oled_WriteCommand(x&0x0f);    //设置显示位置—列低地址
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	b2db      	uxtb	r3, r3
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff ff8f 	bl	8007fa4 <Oled_WriteCommand>
 }
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <OLED_ShowChar>:
  * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
 {
 8008090:	b590      	push	{r4, r7, lr}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	4611      	mov	r1, r2
 800809c:	461a      	mov	r2, r3
 800809e:	4623      	mov	r3, r4
 80080a0:	71fb      	strb	r3, [r7, #7]
 80080a2:	4603      	mov	r3, r0
 80080a4:	71bb      	strb	r3, [r7, #6]
 80080a6:	460b      	mov	r3, r1
 80080a8:	717b      	strb	r3, [r7, #5]
 80080aa:	4613      	mov	r3, r2
 80080ac:	713b      	strb	r3, [r7, #4]
     unsigned char c=0,i=0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73bb      	strb	r3, [r7, #14]
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
         c=chr-' ';//得到偏移后的值
 80080b6:	797b      	ldrb	r3, [r7, #5]
 80080b8:	3b20      	subs	r3, #32
 80080ba:	73bb      	strb	r3, [r7, #14]
         if(x>128-1){x=0;y=y+2;}
 80080bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da04      	bge.n	80080ce <OLED_ShowChar+0x3e>
 80080c4:	2300      	movs	r3, #0
 80080c6:	71fb      	strb	r3, [r7, #7]
 80080c8:	79bb      	ldrb	r3, [r7, #6]
 80080ca:	3302      	adds	r3, #2
 80080cc:	71bb      	strb	r3, [r7, #6]
         if(Char_Size ==16)
 80080ce:	793b      	ldrb	r3, [r7, #4]
 80080d0:	2b10      	cmp	r3, #16
 80080d2:	d154      	bne.n	800817e <OLED_ShowChar+0xee>
         {
             OLED_Set_Pos(x,y);
 80080d4:	79ba      	ldrb	r2, [r7, #6]
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff ffb5 	bl	800804a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
 80080e4:	e01b      	b.n	800811e <OLED_ShowChar+0x8e>
                 {
                   if(Color_Turn)
 80080e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <OLED_ShowChar+0x76>
                       Oled_WriteData(~F8X16[c*16+i]);
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	011a      	lsls	r2, r3, #4
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	4413      	add	r3, r2
 80080f6:	4a3c      	ldr	r2, [pc, #240]	@ (80081e8 <OLED_ShowChar+0x158>)
 80080f8:	5cd3      	ldrb	r3, [r2, r3]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff ff62 	bl	8007fc8 <Oled_WriteData>
 8008104:	e008      	b.n	8008118 <OLED_ShowChar+0x88>
                   else
                       Oled_WriteData(F8X16[c*16+i]);
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	011a      	lsls	r2, r3, #4
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4413      	add	r3, r2
 800810e:	4a36      	ldr	r2, [pc, #216]	@ (80081e8 <OLED_ShowChar+0x158>)
 8008110:	5cd3      	ldrb	r3, [r2, r3]
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff ff58 	bl	8007fc8 <Oled_WriteData>
             for(i=0;i<8;i++)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	3301      	adds	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b07      	cmp	r3, #7
 8008122:	d9e0      	bls.n	80080e6 <OLED_ShowChar+0x56>
                 }
             OLED_Set_Pos(x,y+1);
 8008124:	79bb      	ldrb	r3, [r7, #6]
 8008126:	3301      	adds	r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff ff8b 	bl	800804a <OLED_Set_Pos>
             for(i=0;i<8;i++)
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	e01d      	b.n	8008176 <OLED_ShowChar+0xe6>
                 {
                   if(Color_Turn)
 800813a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00c      	beq.n	800815c <OLED_ShowChar+0xcc>
                       Oled_WriteData(~F8X16[c*16+i+8]);
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	011a      	lsls	r2, r3, #4
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4413      	add	r3, r2
 800814a:	3308      	adds	r3, #8
 800814c:	4a26      	ldr	r2, [pc, #152]	@ (80081e8 <OLED_ShowChar+0x158>)
 800814e:	5cd3      	ldrb	r3, [r2, r3]
 8008150:	43db      	mvns	r3, r3
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff ff37 	bl	8007fc8 <Oled_WriteData>
 800815a:	e009      	b.n	8008170 <OLED_ShowChar+0xe0>
                   else
                       Oled_WriteData(F8X16[c*16+i+8]);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	011a      	lsls	r2, r3, #4
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	4413      	add	r3, r2
 8008164:	3308      	adds	r3, #8
 8008166:	4a20      	ldr	r2, [pc, #128]	@ (80081e8 <OLED_ShowChar+0x158>)
 8008168:	5cd3      	ldrb	r3, [r2, r3]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ff2c 	bl	8007fc8 <Oled_WriteData>
             for(i=0;i<8;i++)
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	3301      	adds	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b07      	cmp	r3, #7
 800817a:	d9de      	bls.n	800813a <OLED_ShowChar+0xaa>
                       Oled_WriteData(~F6x8[c][i]);
                   else
                       Oled_WriteData(F6x8[c][i]);
                 }
           }
 }
 800817c:	e02f      	b.n	80081de <OLED_ShowChar+0x14e>
                 OLED_Set_Pos(x,y);
 800817e:	79ba      	ldrb	r2, [r7, #6]
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff ff60 	bl	800804a <OLED_Set_Pos>
                 for(i=0;i<6;i++)
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
 800818e:	e023      	b.n	80081d8 <OLED_ShowChar+0x148>
                   if(Color_Turn)
 8008190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00f      	beq.n	80081b8 <OLED_ShowChar+0x128>
                       Oled_WriteData(~F6x8[c][i]);
 8008198:	7bba      	ldrb	r2, [r7, #14]
 800819a:	7bf9      	ldrb	r1, [r7, #15]
 800819c:	4813      	ldr	r0, [pc, #76]	@ (80081ec <OLED_ShowChar+0x15c>)
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	4403      	add	r3, r0
 80081a8:	440b      	add	r3, r1
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	43db      	mvns	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ff09 	bl	8007fc8 <Oled_WriteData>
 80081b6:	e00c      	b.n	80081d2 <OLED_ShowChar+0x142>
                       Oled_WriteData(F6x8[c][i]);
 80081b8:	7bba      	ldrb	r2, [r7, #14]
 80081ba:	7bf9      	ldrb	r1, [r7, #15]
 80081bc:	480b      	ldr	r0, [pc, #44]	@ (80081ec <OLED_ShowChar+0x15c>)
 80081be:	4613      	mov	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4413      	add	r3, r2
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	4403      	add	r3, r0
 80081c8:	440b      	add	r3, r1
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fefb 	bl	8007fc8 <Oled_WriteData>
                 for(i=0;i<6;i++)
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	3301      	adds	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d9d8      	bls.n	8008190 <OLED_ShowChar+0x100>
 }
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd90      	pop	{r4, r7, pc}
 80081e6:	bf00      	nop
 80081e8:	08008f38 	.word	0x08008f38
 80081ec:	08008d10 	.word	0x08008d10

080081f0 <OLED_ShowString>:
  * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
  * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
  * @return {*}
  */
 void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
 {
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	603a      	str	r2, [r7, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
 80081fe:	460b      	mov	r3, r1
 8008200:	71bb      	strb	r3, [r7, #6]
 8008202:	4613      	mov	r3, r2
 8008204:	717b      	strb	r3, [r7, #5]
     uint8_t  j=0;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800820a:	e02f      	b.n	800826c <OLED_ShowString+0x7c>
     {       OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4413      	add	r3, r2
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	797c      	ldrb	r4, [r7, #5]
 8008216:	79b9      	ldrb	r1, [r7, #6]
 8008218:	79f8      	ldrb	r0, [r7, #7]
 800821a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	4623      	mov	r3, r4
 8008222:	f7ff ff35 	bl	8008090 <OLED_ShowChar>
             if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8008226:	797b      	ldrb	r3, [r7, #5]
 8008228:	2b0c      	cmp	r3, #12
 800822a:	d103      	bne.n	8008234 <OLED_ShowString+0x44>
                 x += 6;
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	3306      	adds	r3, #6
 8008230:	71fb      	strb	r3, [r7, #7]
 8008232:	e002      	b.n	800823a <OLED_ShowString+0x4a>
             else  //8X16的字体列加8，显示下一个字符
                 x += 8;
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	3308      	adds	r3, #8
 8008238:	71fb      	strb	r3, [r7, #7]

             if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	2b7a      	cmp	r3, #122	@ 0x7a
 800823e:	d907      	bls.n	8008250 <OLED_ShowString+0x60>
 8008240:	797b      	ldrb	r3, [r7, #5]
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d104      	bne.n	8008250 <OLED_ShowString+0x60>
             {
                 x = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	71fb      	strb	r3, [r7, #7]
                 y++;
 800824a:	79bb      	ldrb	r3, [r7, #6]
 800824c:	3301      	adds	r3, #1
 800824e:	71bb      	strb	r3, [r7, #6]
             }
             if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b78      	cmp	r3, #120	@ 0x78
 8008254:	d907      	bls.n	8008266 <OLED_ShowString+0x76>
 8008256:	797b      	ldrb	r3, [r7, #5]
 8008258:	2b10      	cmp	r3, #16
 800825a:	d104      	bne.n	8008266 <OLED_ShowString+0x76>
             {
                 x = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	71fb      	strb	r3, [r7, #7]
                 y++;
 8008260:	79bb      	ldrb	r3, [r7, #6]
 8008262:	3301      	adds	r3, #1
 8008264:	71bb      	strb	r3, [r7, #6]
             }
             j++;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	3301      	adds	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
     while (chr[j]!='\0')
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1c9      	bne.n	800820c <OLED_ShowString+0x1c>
     }
     clean++;
 8008278:	4b04      	ldr	r3, [pc, #16]	@ (800828c <OLED_ShowString+0x9c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a03      	ldr	r2, [pc, #12]	@ (800828c <OLED_ShowString+0x9c>)
 8008280:	6013      	str	r3, [r2, #0]
 }
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	bd90      	pop	{r4, r7, pc}
 800828a:	bf00      	nop
 800828c:	20000458 	.word	0x20000458

08008290 <sniprintf>:
 8008290:	b40c      	push	{r2, r3}
 8008292:	b530      	push	{r4, r5, lr}
 8008294:	4b18      	ldr	r3, [pc, #96]	@ (80082f8 <sniprintf+0x68>)
 8008296:	1e0c      	subs	r4, r1, #0
 8008298:	681d      	ldr	r5, [r3, #0]
 800829a:	b09d      	sub	sp, #116	@ 0x74
 800829c:	da08      	bge.n	80082b0 <sniprintf+0x20>
 800829e:	238b      	movs	r3, #139	@ 0x8b
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	b01d      	add	sp, #116	@ 0x74
 80082a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082ac:	b002      	add	sp, #8
 80082ae:	4770      	bx	lr
 80082b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80082be:	bf0c      	ite	eq
 80082c0:	4623      	moveq	r3, r4
 80082c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082ce:	9002      	str	r0, [sp, #8]
 80082d0:	9006      	str	r0, [sp, #24]
 80082d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082d6:	4628      	mov	r0, r5
 80082d8:	ab21      	add	r3, sp, #132	@ 0x84
 80082da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082dc:	a902      	add	r1, sp, #8
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	f000 f9c2 	bl	8008668 <_svfiprintf_r>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	bfbc      	itt	lt
 80082e8:	238b      	movlt	r3, #139	@ 0x8b
 80082ea:	602b      	strlt	r3, [r5, #0]
 80082ec:	2c00      	cmp	r4, #0
 80082ee:	d0da      	beq.n	80082a6 <sniprintf+0x16>
 80082f0:	2200      	movs	r2, #0
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e7d6      	b.n	80082a6 <sniprintf+0x16>
 80082f8:	20000024 	.word	0x20000024

080082fc <siprintf>:
 80082fc:	b40e      	push	{r1, r2, r3}
 80082fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008302:	b510      	push	{r4, lr}
 8008304:	2400      	movs	r4, #0
 8008306:	b09d      	sub	sp, #116	@ 0x74
 8008308:	ab1f      	add	r3, sp, #124	@ 0x7c
 800830a:	9002      	str	r0, [sp, #8]
 800830c:	9006      	str	r0, [sp, #24]
 800830e:	9107      	str	r1, [sp, #28]
 8008310:	9104      	str	r1, [sp, #16]
 8008312:	4809      	ldr	r0, [pc, #36]	@ (8008338 <siprintf+0x3c>)
 8008314:	4909      	ldr	r1, [pc, #36]	@ (800833c <siprintf+0x40>)
 8008316:	f853 2b04 	ldr.w	r2, [r3], #4
 800831a:	9105      	str	r1, [sp, #20]
 800831c:	6800      	ldr	r0, [r0, #0]
 800831e:	a902      	add	r1, sp, #8
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008324:	f000 f9a0 	bl	8008668 <_svfiprintf_r>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	701c      	strb	r4, [r3, #0]
 800832c:	b01d      	add	sp, #116	@ 0x74
 800832e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008332:	b003      	add	sp, #12
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000024 	.word	0x20000024
 800833c:	ffff0208 	.word	0xffff0208

08008340 <memset>:
 8008340:	4603      	mov	r3, r0
 8008342:	4402      	add	r2, r0
 8008344:	4293      	cmp	r3, r2
 8008346:	d100      	bne.n	800834a <memset+0xa>
 8008348:	4770      	bx	lr
 800834a:	f803 1b01 	strb.w	r1, [r3], #1
 800834e:	e7f9      	b.n	8008344 <memset+0x4>

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	@ (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000024 	.word	0x20000024

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	2600      	movs	r6, #0
 8008360:	4d0c      	ldr	r5, [pc, #48]	@ (8008394 <__libc_init_array+0x38>)
 8008362:	4c0d      	ldr	r4, [pc, #52]	@ (8008398 <__libc_init_array+0x3c>)
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	f000 fc76 	bl	8008c5c <_init>
 8008370:	2600      	movs	r6, #0
 8008372:	4d0a      	ldr	r5, [pc, #40]	@ (800839c <__libc_init_array+0x40>)
 8008374:	4c0a      	ldr	r4, [pc, #40]	@ (80083a0 <__libc_init_array+0x44>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	08009554 	.word	0x08009554
 8008398:	08009554 	.word	0x08009554
 800839c:	08009554 	.word	0x08009554
 80083a0:	08009558 	.word	0x08009558

080083a4 <__retarget_lock_acquire_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <__retarget_lock_release_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <memcpy>:
 80083a8:	440a      	add	r2, r1
 80083aa:	4291      	cmp	r1, r2
 80083ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b0:	d100      	bne.n	80083b4 <memcpy+0xc>
 80083b2:	4770      	bx	lr
 80083b4:	b510      	push	{r4, lr}
 80083b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ba:	4291      	cmp	r1, r2
 80083bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c0:	d1f9      	bne.n	80083b6 <memcpy+0xe>
 80083c2:	bd10      	pop	{r4, pc}

080083c4 <_free_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4605      	mov	r5, r0
 80083c8:	2900      	cmp	r1, #0
 80083ca:	d040      	beq.n	800844e <_free_r+0x8a>
 80083cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d0:	1f0c      	subs	r4, r1, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfb8      	it	lt
 80083d6:	18e4      	addlt	r4, r4, r3
 80083d8:	f000 f8de 	bl	8008598 <__malloc_lock>
 80083dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008450 <_free_r+0x8c>)
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	b933      	cbnz	r3, 80083f0 <_free_r+0x2c>
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	6014      	str	r4, [r2, #0]
 80083e6:	4628      	mov	r0, r5
 80083e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ec:	f000 b8da 	b.w	80085a4 <__malloc_unlock>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d908      	bls.n	8008406 <_free_r+0x42>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	1821      	adds	r1, r4, r0
 80083f8:	428b      	cmp	r3, r1
 80083fa:	bf01      	itttt	eq
 80083fc:	6819      	ldreq	r1, [r3, #0]
 80083fe:	685b      	ldreq	r3, [r3, #4]
 8008400:	1809      	addeq	r1, r1, r0
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	e7ed      	b.n	80083e2 <_free_r+0x1e>
 8008406:	461a      	mov	r2, r3
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b10b      	cbz	r3, 8008410 <_free_r+0x4c>
 800840c:	42a3      	cmp	r3, r4
 800840e:	d9fa      	bls.n	8008406 <_free_r+0x42>
 8008410:	6811      	ldr	r1, [r2, #0]
 8008412:	1850      	adds	r0, r2, r1
 8008414:	42a0      	cmp	r0, r4
 8008416:	d10b      	bne.n	8008430 <_free_r+0x6c>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	4401      	add	r1, r0
 800841c:	1850      	adds	r0, r2, r1
 800841e:	4283      	cmp	r3, r0
 8008420:	6011      	str	r1, [r2, #0]
 8008422:	d1e0      	bne.n	80083e6 <_free_r+0x22>
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4408      	add	r0, r1
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	6053      	str	r3, [r2, #4]
 800842e:	e7da      	b.n	80083e6 <_free_r+0x22>
 8008430:	d902      	bls.n	8008438 <_free_r+0x74>
 8008432:	230c      	movs	r3, #12
 8008434:	602b      	str	r3, [r5, #0]
 8008436:	e7d6      	b.n	80083e6 <_free_r+0x22>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	1821      	adds	r1, r4, r0
 800843c:	428b      	cmp	r3, r1
 800843e:	bf01      	itttt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	1809      	addeq	r1, r1, r0
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	6054      	str	r4, [r2, #4]
 800844c:	e7cb      	b.n	80083e6 <_free_r+0x22>
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	200005a0 	.word	0x200005a0

08008454 <sbrk_aligned>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	4e0f      	ldr	r6, [pc, #60]	@ (8008494 <sbrk_aligned+0x40>)
 8008458:	460c      	mov	r4, r1
 800845a:	6831      	ldr	r1, [r6, #0]
 800845c:	4605      	mov	r5, r0
 800845e:	b911      	cbnz	r1, 8008466 <sbrk_aligned+0x12>
 8008460:	f000 fba8 	bl	8008bb4 <_sbrk_r>
 8008464:	6030      	str	r0, [r6, #0]
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f000 fba3 	bl	8008bb4 <_sbrk_r>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d103      	bne.n	800847a <sbrk_aligned+0x26>
 8008472:	f04f 34ff 	mov.w	r4, #4294967295
 8008476:	4620      	mov	r0, r4
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	1cc4      	adds	r4, r0, #3
 800847c:	f024 0403 	bic.w	r4, r4, #3
 8008480:	42a0      	cmp	r0, r4
 8008482:	d0f8      	beq.n	8008476 <sbrk_aligned+0x22>
 8008484:	1a21      	subs	r1, r4, r0
 8008486:	4628      	mov	r0, r5
 8008488:	f000 fb94 	bl	8008bb4 <_sbrk_r>
 800848c:	3001      	adds	r0, #1
 800848e:	d1f2      	bne.n	8008476 <sbrk_aligned+0x22>
 8008490:	e7ef      	b.n	8008472 <sbrk_aligned+0x1e>
 8008492:	bf00      	nop
 8008494:	2000059c 	.word	0x2000059c

08008498 <_malloc_r>:
 8008498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800849c:	1ccd      	adds	r5, r1, #3
 800849e:	f025 0503 	bic.w	r5, r5, #3
 80084a2:	3508      	adds	r5, #8
 80084a4:	2d0c      	cmp	r5, #12
 80084a6:	bf38      	it	cc
 80084a8:	250c      	movcc	r5, #12
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	4606      	mov	r6, r0
 80084ae:	db01      	blt.n	80084b4 <_malloc_r+0x1c>
 80084b0:	42a9      	cmp	r1, r5
 80084b2:	d904      	bls.n	80084be <_malloc_r+0x26>
 80084b4:	230c      	movs	r3, #12
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	2000      	movs	r0, #0
 80084ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008594 <_malloc_r+0xfc>
 80084c2:	f000 f869 	bl	8008598 <__malloc_lock>
 80084c6:	f8d8 3000 	ldr.w	r3, [r8]
 80084ca:	461c      	mov	r4, r3
 80084cc:	bb44      	cbnz	r4, 8008520 <_malloc_r+0x88>
 80084ce:	4629      	mov	r1, r5
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7ff ffbf 	bl	8008454 <sbrk_aligned>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	4604      	mov	r4, r0
 80084da:	d158      	bne.n	800858e <_malloc_r+0xf6>
 80084dc:	f8d8 4000 	ldr.w	r4, [r8]
 80084e0:	4627      	mov	r7, r4
 80084e2:	2f00      	cmp	r7, #0
 80084e4:	d143      	bne.n	800856e <_malloc_r+0xd6>
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	d04b      	beq.n	8008582 <_malloc_r+0xea>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	4639      	mov	r1, r7
 80084ee:	4630      	mov	r0, r6
 80084f0:	eb04 0903 	add.w	r9, r4, r3
 80084f4:	f000 fb5e 	bl	8008bb4 <_sbrk_r>
 80084f8:	4581      	cmp	r9, r0
 80084fa:	d142      	bne.n	8008582 <_malloc_r+0xea>
 80084fc:	6821      	ldr	r1, [r4, #0]
 80084fe:	4630      	mov	r0, r6
 8008500:	1a6d      	subs	r5, r5, r1
 8008502:	4629      	mov	r1, r5
 8008504:	f7ff ffa6 	bl	8008454 <sbrk_aligned>
 8008508:	3001      	adds	r0, #1
 800850a:	d03a      	beq.n	8008582 <_malloc_r+0xea>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	442b      	add	r3, r5
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	f8d8 3000 	ldr.w	r3, [r8]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	bb62      	cbnz	r2, 8008574 <_malloc_r+0xdc>
 800851a:	f8c8 7000 	str.w	r7, [r8]
 800851e:	e00f      	b.n	8008540 <_malloc_r+0xa8>
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	1b52      	subs	r2, r2, r5
 8008524:	d420      	bmi.n	8008568 <_malloc_r+0xd0>
 8008526:	2a0b      	cmp	r2, #11
 8008528:	d917      	bls.n	800855a <_malloc_r+0xc2>
 800852a:	1961      	adds	r1, r4, r5
 800852c:	42a3      	cmp	r3, r4
 800852e:	6025      	str	r5, [r4, #0]
 8008530:	bf18      	it	ne
 8008532:	6059      	strne	r1, [r3, #4]
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	bf08      	it	eq
 8008538:	f8c8 1000 	streq.w	r1, [r8]
 800853c:	5162      	str	r2, [r4, r5]
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f82f 	bl	80085a4 <__malloc_unlock>
 8008546:	f104 000b 	add.w	r0, r4, #11
 800854a:	1d23      	adds	r3, r4, #4
 800854c:	f020 0007 	bic.w	r0, r0, #7
 8008550:	1ac2      	subs	r2, r0, r3
 8008552:	bf1c      	itt	ne
 8008554:	1a1b      	subne	r3, r3, r0
 8008556:	50a3      	strne	r3, [r4, r2]
 8008558:	e7af      	b.n	80084ba <_malloc_r+0x22>
 800855a:	6862      	ldr	r2, [r4, #4]
 800855c:	42a3      	cmp	r3, r4
 800855e:	bf0c      	ite	eq
 8008560:	f8c8 2000 	streq.w	r2, [r8]
 8008564:	605a      	strne	r2, [r3, #4]
 8008566:	e7eb      	b.n	8008540 <_malloc_r+0xa8>
 8008568:	4623      	mov	r3, r4
 800856a:	6864      	ldr	r4, [r4, #4]
 800856c:	e7ae      	b.n	80084cc <_malloc_r+0x34>
 800856e:	463c      	mov	r4, r7
 8008570:	687f      	ldr	r7, [r7, #4]
 8008572:	e7b6      	b.n	80084e2 <_malloc_r+0x4a>
 8008574:	461a      	mov	r2, r3
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	42a3      	cmp	r3, r4
 800857a:	d1fb      	bne.n	8008574 <_malloc_r+0xdc>
 800857c:	2300      	movs	r3, #0
 800857e:	6053      	str	r3, [r2, #4]
 8008580:	e7de      	b.n	8008540 <_malloc_r+0xa8>
 8008582:	230c      	movs	r3, #12
 8008584:	4630      	mov	r0, r6
 8008586:	6033      	str	r3, [r6, #0]
 8008588:	f000 f80c 	bl	80085a4 <__malloc_unlock>
 800858c:	e794      	b.n	80084b8 <_malloc_r+0x20>
 800858e:	6005      	str	r5, [r0, #0]
 8008590:	e7d6      	b.n	8008540 <_malloc_r+0xa8>
 8008592:	bf00      	nop
 8008594:	200005a0 	.word	0x200005a0

08008598 <__malloc_lock>:
 8008598:	4801      	ldr	r0, [pc, #4]	@ (80085a0 <__malloc_lock+0x8>)
 800859a:	f7ff bf03 	b.w	80083a4 <__retarget_lock_acquire_recursive>
 800859e:	bf00      	nop
 80085a0:	20000598 	.word	0x20000598

080085a4 <__malloc_unlock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	@ (80085ac <__malloc_unlock+0x8>)
 80085a6:	f7ff befe 	b.w	80083a6 <__retarget_lock_release_recursive>
 80085aa:	bf00      	nop
 80085ac:	20000598 	.word	0x20000598

080085b0 <__ssputs_r>:
 80085b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b4:	461f      	mov	r7, r3
 80085b6:	688e      	ldr	r6, [r1, #8]
 80085b8:	4682      	mov	sl, r0
 80085ba:	42be      	cmp	r6, r7
 80085bc:	460c      	mov	r4, r1
 80085be:	4690      	mov	r8, r2
 80085c0:	680b      	ldr	r3, [r1, #0]
 80085c2:	d82d      	bhi.n	8008620 <__ssputs_r+0x70>
 80085c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085cc:	d026      	beq.n	800861c <__ssputs_r+0x6c>
 80085ce:	6965      	ldr	r5, [r4, #20]
 80085d0:	6909      	ldr	r1, [r1, #16]
 80085d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d6:	eba3 0901 	sub.w	r9, r3, r1
 80085da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085de:	1c7b      	adds	r3, r7, #1
 80085e0:	444b      	add	r3, r9
 80085e2:	106d      	asrs	r5, r5, #1
 80085e4:	429d      	cmp	r5, r3
 80085e6:	bf38      	it	cc
 80085e8:	461d      	movcc	r5, r3
 80085ea:	0553      	lsls	r3, r2, #21
 80085ec:	d527      	bpl.n	800863e <__ssputs_r+0x8e>
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7ff ff52 	bl	8008498 <_malloc_r>
 80085f4:	4606      	mov	r6, r0
 80085f6:	b360      	cbz	r0, 8008652 <__ssputs_r+0xa2>
 80085f8:	464a      	mov	r2, r9
 80085fa:	6921      	ldr	r1, [r4, #16]
 80085fc:	f7ff fed4 	bl	80083a8 <memcpy>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	6126      	str	r6, [r4, #16]
 800860e:	444e      	add	r6, r9
 8008610:	6026      	str	r6, [r4, #0]
 8008612:	463e      	mov	r6, r7
 8008614:	6165      	str	r5, [r4, #20]
 8008616:	eba5 0509 	sub.w	r5, r5, r9
 800861a:	60a5      	str	r5, [r4, #8]
 800861c:	42be      	cmp	r6, r7
 800861e:	d900      	bls.n	8008622 <__ssputs_r+0x72>
 8008620:	463e      	mov	r6, r7
 8008622:	4632      	mov	r2, r6
 8008624:	4641      	mov	r1, r8
 8008626:	6820      	ldr	r0, [r4, #0]
 8008628:	f000 faaa 	bl	8008b80 <memmove>
 800862c:	2000      	movs	r0, #0
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	1b9b      	subs	r3, r3, r6
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	4433      	add	r3, r6
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863e:	462a      	mov	r2, r5
 8008640:	f000 fad6 	bl	8008bf0 <_realloc_r>
 8008644:	4606      	mov	r6, r0
 8008646:	2800      	cmp	r0, #0
 8008648:	d1e0      	bne.n	800860c <__ssputs_r+0x5c>
 800864a:	4650      	mov	r0, sl
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	f7ff feb9 	bl	80083c4 <_free_r>
 8008652:	230c      	movs	r3, #12
 8008654:	f8ca 3000 	str.w	r3, [sl]
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295
 800865e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	e7e9      	b.n	800863a <__ssputs_r+0x8a>
	...

08008668 <_svfiprintf_r>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4698      	mov	r8, r3
 800866e:	898b      	ldrh	r3, [r1, #12]
 8008670:	4607      	mov	r7, r0
 8008672:	061b      	lsls	r3, r3, #24
 8008674:	460d      	mov	r5, r1
 8008676:	4614      	mov	r4, r2
 8008678:	b09d      	sub	sp, #116	@ 0x74
 800867a:	d510      	bpl.n	800869e <_svfiprintf_r+0x36>
 800867c:	690b      	ldr	r3, [r1, #16]
 800867e:	b973      	cbnz	r3, 800869e <_svfiprintf_r+0x36>
 8008680:	2140      	movs	r1, #64	@ 0x40
 8008682:	f7ff ff09 	bl	8008498 <_malloc_r>
 8008686:	6028      	str	r0, [r5, #0]
 8008688:	6128      	str	r0, [r5, #16]
 800868a:	b930      	cbnz	r0, 800869a <_svfiprintf_r+0x32>
 800868c:	230c      	movs	r3, #12
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	b01d      	add	sp, #116	@ 0x74
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	2340      	movs	r3, #64	@ 0x40
 800869c:	616b      	str	r3, [r5, #20]
 800869e:	2300      	movs	r3, #0
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a2:	2320      	movs	r3, #32
 80086a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086a8:	2330      	movs	r3, #48	@ 0x30
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800884c <_svfiprintf_r+0x1e4>
 80086b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ba:	4623      	mov	r3, r4
 80086bc:	469a      	mov	sl, r3
 80086be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c2:	b10a      	cbz	r2, 80086c8 <_svfiprintf_r+0x60>
 80086c4:	2a25      	cmp	r2, #37	@ 0x25
 80086c6:	d1f9      	bne.n	80086bc <_svfiprintf_r+0x54>
 80086c8:	ebba 0b04 	subs.w	fp, sl, r4
 80086cc:	d00b      	beq.n	80086e6 <_svfiprintf_r+0x7e>
 80086ce:	465b      	mov	r3, fp
 80086d0:	4622      	mov	r2, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff ff6b 	bl	80085b0 <__ssputs_r>
 80086da:	3001      	adds	r0, #1
 80086dc:	f000 80a7 	beq.w	800882e <_svfiprintf_r+0x1c6>
 80086e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086e2:	445a      	add	r2, fp
 80086e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80086e6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 809f 	beq.w	800882e <_svfiprintf_r+0x1c6>
 80086f0:	2300      	movs	r3, #0
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295
 80086f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086fa:	f10a 0a01 	add.w	sl, sl, #1
 80086fe:	9304      	str	r3, [sp, #16]
 8008700:	9307      	str	r3, [sp, #28]
 8008702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008706:	931a      	str	r3, [sp, #104]	@ 0x68
 8008708:	4654      	mov	r4, sl
 800870a:	2205      	movs	r2, #5
 800870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008710:	484e      	ldr	r0, [pc, #312]	@ (800884c <_svfiprintf_r+0x1e4>)
 8008712:	f000 fa5f 	bl	8008bd4 <memchr>
 8008716:	9a04      	ldr	r2, [sp, #16]
 8008718:	b9d8      	cbnz	r0, 8008752 <_svfiprintf_r+0xea>
 800871a:	06d0      	lsls	r0, r2, #27
 800871c:	bf44      	itt	mi
 800871e:	2320      	movmi	r3, #32
 8008720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008724:	0711      	lsls	r1, r2, #28
 8008726:	bf44      	itt	mi
 8008728:	232b      	movmi	r3, #43	@ 0x2b
 800872a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800872e:	f89a 3000 	ldrb.w	r3, [sl]
 8008732:	2b2a      	cmp	r3, #42	@ 0x2a
 8008734:	d015      	beq.n	8008762 <_svfiprintf_r+0xfa>
 8008736:	4654      	mov	r4, sl
 8008738:	2000      	movs	r0, #0
 800873a:	f04f 0c0a 	mov.w	ip, #10
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	4621      	mov	r1, r4
 8008742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008746:	3b30      	subs	r3, #48	@ 0x30
 8008748:	2b09      	cmp	r3, #9
 800874a:	d94b      	bls.n	80087e4 <_svfiprintf_r+0x17c>
 800874c:	b1b0      	cbz	r0, 800877c <_svfiprintf_r+0x114>
 800874e:	9207      	str	r2, [sp, #28]
 8008750:	e014      	b.n	800877c <_svfiprintf_r+0x114>
 8008752:	eba0 0308 	sub.w	r3, r0, r8
 8008756:	fa09 f303 	lsl.w	r3, r9, r3
 800875a:	4313      	orrs	r3, r2
 800875c:	46a2      	mov	sl, r4
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	e7d2      	b.n	8008708 <_svfiprintf_r+0xa0>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	1d19      	adds	r1, r3, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	9103      	str	r1, [sp, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfbb      	ittet	lt
 800876e:	425b      	neglt	r3, r3
 8008770:	f042 0202 	orrlt.w	r2, r2, #2
 8008774:	9307      	strge	r3, [sp, #28]
 8008776:	9307      	strlt	r3, [sp, #28]
 8008778:	bfb8      	it	lt
 800877a:	9204      	strlt	r2, [sp, #16]
 800877c:	7823      	ldrb	r3, [r4, #0]
 800877e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008780:	d10a      	bne.n	8008798 <_svfiprintf_r+0x130>
 8008782:	7863      	ldrb	r3, [r4, #1]
 8008784:	2b2a      	cmp	r3, #42	@ 0x2a
 8008786:	d132      	bne.n	80087ee <_svfiprintf_r+0x186>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	3402      	adds	r4, #2
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	9203      	str	r2, [sp, #12]
 8008792:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008850 <_svfiprintf_r+0x1e8>
 800879c:	2203      	movs	r2, #3
 800879e:	4650      	mov	r0, sl
 80087a0:	7821      	ldrb	r1, [r4, #0]
 80087a2:	f000 fa17 	bl	8008bd4 <memchr>
 80087a6:	b138      	cbz	r0, 80087b8 <_svfiprintf_r+0x150>
 80087a8:	2240      	movs	r2, #64	@ 0x40
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	eba0 000a 	sub.w	r0, r0, sl
 80087b0:	4082      	lsls	r2, r0
 80087b2:	4313      	orrs	r3, r2
 80087b4:	3401      	adds	r4, #1
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087bc:	2206      	movs	r2, #6
 80087be:	4825      	ldr	r0, [pc, #148]	@ (8008854 <_svfiprintf_r+0x1ec>)
 80087c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087c4:	f000 fa06 	bl	8008bd4 <memchr>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d036      	beq.n	800883a <_svfiprintf_r+0x1d2>
 80087cc:	4b22      	ldr	r3, [pc, #136]	@ (8008858 <_svfiprintf_r+0x1f0>)
 80087ce:	bb1b      	cbnz	r3, 8008818 <_svfiprintf_r+0x1b0>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	3307      	adds	r3, #7
 80087d4:	f023 0307 	bic.w	r3, r3, #7
 80087d8:	3308      	adds	r3, #8
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087de:	4433      	add	r3, r6
 80087e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e2:	e76a      	b.n	80086ba <_svfiprintf_r+0x52>
 80087e4:	460c      	mov	r4, r1
 80087e6:	2001      	movs	r0, #1
 80087e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ec:	e7a8      	b.n	8008740 <_svfiprintf_r+0xd8>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f04f 0c0a 	mov.w	ip, #10
 80087f4:	4619      	mov	r1, r3
 80087f6:	3401      	adds	r4, #1
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	4620      	mov	r0, r4
 80087fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008800:	3a30      	subs	r2, #48	@ 0x30
 8008802:	2a09      	cmp	r2, #9
 8008804:	d903      	bls.n	800880e <_svfiprintf_r+0x1a6>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0c6      	beq.n	8008798 <_svfiprintf_r+0x130>
 800880a:	9105      	str	r1, [sp, #20]
 800880c:	e7c4      	b.n	8008798 <_svfiprintf_r+0x130>
 800880e:	4604      	mov	r4, r0
 8008810:	2301      	movs	r3, #1
 8008812:	fb0c 2101 	mla	r1, ip, r1, r2
 8008816:	e7f0      	b.n	80087fa <_svfiprintf_r+0x192>
 8008818:	ab03      	add	r3, sp, #12
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	462a      	mov	r2, r5
 800881e:	4638      	mov	r0, r7
 8008820:	4b0e      	ldr	r3, [pc, #56]	@ (800885c <_svfiprintf_r+0x1f4>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	f3af 8000 	nop.w
 8008828:	1c42      	adds	r2, r0, #1
 800882a:	4606      	mov	r6, r0
 800882c:	d1d6      	bne.n	80087dc <_svfiprintf_r+0x174>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	065b      	lsls	r3, r3, #25
 8008832:	f53f af2d 	bmi.w	8008690 <_svfiprintf_r+0x28>
 8008836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008838:	e72c      	b.n	8008694 <_svfiprintf_r+0x2c>
 800883a:	ab03      	add	r3, sp, #12
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	462a      	mov	r2, r5
 8008840:	4638      	mov	r0, r7
 8008842:	4b06      	ldr	r3, [pc, #24]	@ (800885c <_svfiprintf_r+0x1f4>)
 8008844:	a904      	add	r1, sp, #16
 8008846:	f000 f87d 	bl	8008944 <_printf_i>
 800884a:	e7ed      	b.n	8008828 <_svfiprintf_r+0x1c0>
 800884c:	08009518 	.word	0x08009518
 8008850:	0800951e 	.word	0x0800951e
 8008854:	08009522 	.word	0x08009522
 8008858:	00000000 	.word	0x00000000
 800885c:	080085b1 	.word	0x080085b1

08008860 <_printf_common>:
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	4616      	mov	r6, r2
 8008866:	4698      	mov	r8, r3
 8008868:	688a      	ldr	r2, [r1, #8]
 800886a:	690b      	ldr	r3, [r1, #16]
 800886c:	4607      	mov	r7, r0
 800886e:	4293      	cmp	r3, r2
 8008870:	bfb8      	it	lt
 8008872:	4613      	movlt	r3, r2
 8008874:	6033      	str	r3, [r6, #0]
 8008876:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800887a:	460c      	mov	r4, r1
 800887c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008880:	b10a      	cbz	r2, 8008886 <_printf_common+0x26>
 8008882:	3301      	adds	r3, #1
 8008884:	6033      	str	r3, [r6, #0]
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	0699      	lsls	r1, r3, #26
 800888a:	bf42      	ittt	mi
 800888c:	6833      	ldrmi	r3, [r6, #0]
 800888e:	3302      	addmi	r3, #2
 8008890:	6033      	strmi	r3, [r6, #0]
 8008892:	6825      	ldr	r5, [r4, #0]
 8008894:	f015 0506 	ands.w	r5, r5, #6
 8008898:	d106      	bne.n	80088a8 <_printf_common+0x48>
 800889a:	f104 0a19 	add.w	sl, r4, #25
 800889e:	68e3      	ldr	r3, [r4, #12]
 80088a0:	6832      	ldr	r2, [r6, #0]
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	dc2b      	bgt.n	8008900 <_printf_common+0xa0>
 80088a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	3b00      	subs	r3, #0
 80088b0:	bf18      	it	ne
 80088b2:	2301      	movne	r3, #1
 80088b4:	0692      	lsls	r2, r2, #26
 80088b6:	d430      	bmi.n	800891a <_printf_common+0xba>
 80088b8:	4641      	mov	r1, r8
 80088ba:	4638      	mov	r0, r7
 80088bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088c0:	47c8      	blx	r9
 80088c2:	3001      	adds	r0, #1
 80088c4:	d023      	beq.n	800890e <_printf_common+0xae>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	6922      	ldr	r2, [r4, #16]
 80088ca:	f003 0306 	and.w	r3, r3, #6
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	bf14      	ite	ne
 80088d2:	2500      	movne	r5, #0
 80088d4:	6833      	ldreq	r3, [r6, #0]
 80088d6:	f04f 0600 	mov.w	r6, #0
 80088da:	bf08      	it	eq
 80088dc:	68e5      	ldreq	r5, [r4, #12]
 80088de:	f104 041a 	add.w	r4, r4, #26
 80088e2:	bf08      	it	eq
 80088e4:	1aed      	subeq	r5, r5, r3
 80088e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80088ea:	bf08      	it	eq
 80088ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f0:	4293      	cmp	r3, r2
 80088f2:	bfc4      	itt	gt
 80088f4:	1a9b      	subgt	r3, r3, r2
 80088f6:	18ed      	addgt	r5, r5, r3
 80088f8:	42b5      	cmp	r5, r6
 80088fa:	d11a      	bne.n	8008932 <_printf_common+0xd2>
 80088fc:	2000      	movs	r0, #0
 80088fe:	e008      	b.n	8008912 <_printf_common+0xb2>
 8008900:	2301      	movs	r3, #1
 8008902:	4652      	mov	r2, sl
 8008904:	4641      	mov	r1, r8
 8008906:	4638      	mov	r0, r7
 8008908:	47c8      	blx	r9
 800890a:	3001      	adds	r0, #1
 800890c:	d103      	bne.n	8008916 <_printf_common+0xb6>
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008916:	3501      	adds	r5, #1
 8008918:	e7c1      	b.n	800889e <_printf_common+0x3e>
 800891a:	2030      	movs	r0, #48	@ 0x30
 800891c:	18e1      	adds	r1, r4, r3
 800891e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008928:	4422      	add	r2, r4
 800892a:	3302      	adds	r3, #2
 800892c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008930:	e7c2      	b.n	80088b8 <_printf_common+0x58>
 8008932:	2301      	movs	r3, #1
 8008934:	4622      	mov	r2, r4
 8008936:	4641      	mov	r1, r8
 8008938:	4638      	mov	r0, r7
 800893a:	47c8      	blx	r9
 800893c:	3001      	adds	r0, #1
 800893e:	d0e6      	beq.n	800890e <_printf_common+0xae>
 8008940:	3601      	adds	r6, #1
 8008942:	e7d9      	b.n	80088f8 <_printf_common+0x98>

08008944 <_printf_i>:
 8008944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	7e0f      	ldrb	r7, [r1, #24]
 800894a:	4691      	mov	r9, r2
 800894c:	2f78      	cmp	r7, #120	@ 0x78
 800894e:	4680      	mov	r8, r0
 8008950:	460c      	mov	r4, r1
 8008952:	469a      	mov	sl, r3
 8008954:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800895a:	d807      	bhi.n	800896c <_printf_i+0x28>
 800895c:	2f62      	cmp	r7, #98	@ 0x62
 800895e:	d80a      	bhi.n	8008976 <_printf_i+0x32>
 8008960:	2f00      	cmp	r7, #0
 8008962:	f000 80d1 	beq.w	8008b08 <_printf_i+0x1c4>
 8008966:	2f58      	cmp	r7, #88	@ 0x58
 8008968:	f000 80b8 	beq.w	8008adc <_printf_i+0x198>
 800896c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008974:	e03a      	b.n	80089ec <_printf_i+0xa8>
 8008976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800897a:	2b15      	cmp	r3, #21
 800897c:	d8f6      	bhi.n	800896c <_printf_i+0x28>
 800897e:	a101      	add	r1, pc, #4	@ (adr r1, 8008984 <_printf_i+0x40>)
 8008980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008984:	080089dd 	.word	0x080089dd
 8008988:	080089f1 	.word	0x080089f1
 800898c:	0800896d 	.word	0x0800896d
 8008990:	0800896d 	.word	0x0800896d
 8008994:	0800896d 	.word	0x0800896d
 8008998:	0800896d 	.word	0x0800896d
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	0800896d 	.word	0x0800896d
 80089a4:	0800896d 	.word	0x0800896d
 80089a8:	0800896d 	.word	0x0800896d
 80089ac:	0800896d 	.word	0x0800896d
 80089b0:	08008aef 	.word	0x08008aef
 80089b4:	08008a1b 	.word	0x08008a1b
 80089b8:	08008aa9 	.word	0x08008aa9
 80089bc:	0800896d 	.word	0x0800896d
 80089c0:	0800896d 	.word	0x0800896d
 80089c4:	08008b11 	.word	0x08008b11
 80089c8:	0800896d 	.word	0x0800896d
 80089cc:	08008a1b 	.word	0x08008a1b
 80089d0:	0800896d 	.word	0x0800896d
 80089d4:	0800896d 	.word	0x0800896d
 80089d8:	08008ab1 	.word	0x08008ab1
 80089dc:	6833      	ldr	r3, [r6, #0]
 80089de:	1d1a      	adds	r2, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6032      	str	r2, [r6, #0]
 80089e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089ec:	2301      	movs	r3, #1
 80089ee:	e09c      	b.n	8008b2a <_printf_i+0x1e6>
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	1d19      	adds	r1, r3, #4
 80089f6:	6031      	str	r1, [r6, #0]
 80089f8:	0606      	lsls	r6, r0, #24
 80089fa:	d501      	bpl.n	8008a00 <_printf_i+0xbc>
 80089fc:	681d      	ldr	r5, [r3, #0]
 80089fe:	e003      	b.n	8008a08 <_printf_i+0xc4>
 8008a00:	0645      	lsls	r5, r0, #25
 8008a02:	d5fb      	bpl.n	80089fc <_printf_i+0xb8>
 8008a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	da03      	bge.n	8008a14 <_printf_i+0xd0>
 8008a0c:	232d      	movs	r3, #45	@ 0x2d
 8008a0e:	426d      	negs	r5, r5
 8008a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a14:	230a      	movs	r3, #10
 8008a16:	4858      	ldr	r0, [pc, #352]	@ (8008b78 <_printf_i+0x234>)
 8008a18:	e011      	b.n	8008a3e <_printf_i+0xfa>
 8008a1a:	6821      	ldr	r1, [r4, #0]
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	0608      	lsls	r0, r1, #24
 8008a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a24:	d402      	bmi.n	8008a2c <_printf_i+0xe8>
 8008a26:	0649      	lsls	r1, r1, #25
 8008a28:	bf48      	it	mi
 8008a2a:	b2ad      	uxthmi	r5, r5
 8008a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	bf14      	ite	ne
 8008a32:	230a      	movne	r3, #10
 8008a34:	2308      	moveq	r3, #8
 8008a36:	4850      	ldr	r0, [pc, #320]	@ (8008b78 <_printf_i+0x234>)
 8008a38:	2100      	movs	r1, #0
 8008a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a3e:	6866      	ldr	r6, [r4, #4]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	60a6      	str	r6, [r4, #8]
 8008a44:	db05      	blt.n	8008a52 <_printf_i+0x10e>
 8008a46:	6821      	ldr	r1, [r4, #0]
 8008a48:	432e      	orrs	r6, r5
 8008a4a:	f021 0104 	bic.w	r1, r1, #4
 8008a4e:	6021      	str	r1, [r4, #0]
 8008a50:	d04b      	beq.n	8008aea <_printf_i+0x1a6>
 8008a52:	4616      	mov	r6, r2
 8008a54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a58:	fb03 5711 	mls	r7, r3, r1, r5
 8008a5c:	5dc7      	ldrb	r7, [r0, r7]
 8008a5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a62:	462f      	mov	r7, r5
 8008a64:	42bb      	cmp	r3, r7
 8008a66:	460d      	mov	r5, r1
 8008a68:	d9f4      	bls.n	8008a54 <_printf_i+0x110>
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d10b      	bne.n	8008a86 <_printf_i+0x142>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	07df      	lsls	r7, r3, #31
 8008a72:	d508      	bpl.n	8008a86 <_printf_i+0x142>
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	6861      	ldr	r1, [r4, #4]
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	bfde      	ittt	le
 8008a7c:	2330      	movle	r3, #48	@ 0x30
 8008a7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a86:	1b92      	subs	r2, r2, r6
 8008a88:	6122      	str	r2, [r4, #16]
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f8cd a000 	str.w	sl, [sp]
 8008a94:	aa03      	add	r2, sp, #12
 8008a96:	f7ff fee3 	bl	8008860 <_printf_common>
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d14a      	bne.n	8008b34 <_printf_i+0x1f0>
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	b004      	add	sp, #16
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	f043 0320 	orr.w	r3, r3, #32
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	2778      	movs	r7, #120	@ 0x78
 8008ab2:	4832      	ldr	r0, [pc, #200]	@ (8008b7c <_printf_i+0x238>)
 8008ab4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	6831      	ldr	r1, [r6, #0]
 8008abc:	061f      	lsls	r7, r3, #24
 8008abe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ac2:	d402      	bmi.n	8008aca <_printf_i+0x186>
 8008ac4:	065f      	lsls	r7, r3, #25
 8008ac6:	bf48      	it	mi
 8008ac8:	b2ad      	uxthmi	r5, r5
 8008aca:	6031      	str	r1, [r6, #0]
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	bf44      	itt	mi
 8008ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ad4:	6023      	strmi	r3, [r4, #0]
 8008ad6:	b11d      	cbz	r5, 8008ae0 <_printf_i+0x19c>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	e7ad      	b.n	8008a38 <_printf_i+0xf4>
 8008adc:	4826      	ldr	r0, [pc, #152]	@ (8008b78 <_printf_i+0x234>)
 8008ade:	e7e9      	b.n	8008ab4 <_printf_i+0x170>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	f023 0320 	bic.w	r3, r3, #32
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	e7f6      	b.n	8008ad8 <_printf_i+0x194>
 8008aea:	4616      	mov	r6, r2
 8008aec:	e7bd      	b.n	8008a6a <_printf_i+0x126>
 8008aee:	6833      	ldr	r3, [r6, #0]
 8008af0:	6825      	ldr	r5, [r4, #0]
 8008af2:	1d18      	adds	r0, r3, #4
 8008af4:	6961      	ldr	r1, [r4, #20]
 8008af6:	6030      	str	r0, [r6, #0]
 8008af8:	062e      	lsls	r6, r5, #24
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	d501      	bpl.n	8008b02 <_printf_i+0x1be>
 8008afe:	6019      	str	r1, [r3, #0]
 8008b00:	e002      	b.n	8008b08 <_printf_i+0x1c4>
 8008b02:	0668      	lsls	r0, r5, #25
 8008b04:	d5fb      	bpl.n	8008afe <_printf_i+0x1ba>
 8008b06:	8019      	strh	r1, [r3, #0]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4616      	mov	r6, r2
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	e7bc      	b.n	8008a8a <_printf_i+0x146>
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	2100      	movs	r1, #0
 8008b14:	1d1a      	adds	r2, r3, #4
 8008b16:	6032      	str	r2, [r6, #0]
 8008b18:	681e      	ldr	r6, [r3, #0]
 8008b1a:	6862      	ldr	r2, [r4, #4]
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 f859 	bl	8008bd4 <memchr>
 8008b22:	b108      	cbz	r0, 8008b28 <_printf_i+0x1e4>
 8008b24:	1b80      	subs	r0, r0, r6
 8008b26:	6060      	str	r0, [r4, #4]
 8008b28:	6863      	ldr	r3, [r4, #4]
 8008b2a:	6123      	str	r3, [r4, #16]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b32:	e7aa      	b.n	8008a8a <_printf_i+0x146>
 8008b34:	4632      	mov	r2, r6
 8008b36:	4649      	mov	r1, r9
 8008b38:	4640      	mov	r0, r8
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	47d0      	blx	sl
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d0ad      	beq.n	8008a9e <_printf_i+0x15a>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	079b      	lsls	r3, r3, #30
 8008b46:	d413      	bmi.n	8008b70 <_printf_i+0x22c>
 8008b48:	68e0      	ldr	r0, [r4, #12]
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	bfb8      	it	lt
 8008b50:	4618      	movlt	r0, r3
 8008b52:	e7a6      	b.n	8008aa2 <_printf_i+0x15e>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4632      	mov	r2, r6
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	47d0      	blx	sl
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d09d      	beq.n	8008a9e <_printf_i+0x15a>
 8008b62:	3501      	adds	r5, #1
 8008b64:	68e3      	ldr	r3, [r4, #12]
 8008b66:	9903      	ldr	r1, [sp, #12]
 8008b68:	1a5b      	subs	r3, r3, r1
 8008b6a:	42ab      	cmp	r3, r5
 8008b6c:	dcf2      	bgt.n	8008b54 <_printf_i+0x210>
 8008b6e:	e7eb      	b.n	8008b48 <_printf_i+0x204>
 8008b70:	2500      	movs	r5, #0
 8008b72:	f104 0619 	add.w	r6, r4, #25
 8008b76:	e7f5      	b.n	8008b64 <_printf_i+0x220>
 8008b78:	08009529 	.word	0x08009529
 8008b7c:	0800953a 	.word	0x0800953a

08008b80 <memmove>:
 8008b80:	4288      	cmp	r0, r1
 8008b82:	b510      	push	{r4, lr}
 8008b84:	eb01 0402 	add.w	r4, r1, r2
 8008b88:	d902      	bls.n	8008b90 <memmove+0x10>
 8008b8a:	4284      	cmp	r4, r0
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	d807      	bhi.n	8008ba0 <memmove+0x20>
 8008b90:	1e43      	subs	r3, r0, #1
 8008b92:	42a1      	cmp	r1, r4
 8008b94:	d008      	beq.n	8008ba8 <memmove+0x28>
 8008b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b9e:	e7f8      	b.n	8008b92 <memmove+0x12>
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4402      	add	r2, r0
 8008ba4:	428a      	cmp	r2, r1
 8008ba6:	d100      	bne.n	8008baa <memmove+0x2a>
 8008ba8:	bd10      	pop	{r4, pc}
 8008baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bb2:	e7f7      	b.n	8008ba4 <memmove+0x24>

08008bb4 <_sbrk_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4d05      	ldr	r5, [pc, #20]	@ (8008bd0 <_sbrk_r+0x1c>)
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f8 fd1a 	bl	80015f8 <_sbrk>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_sbrk_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_sbrk_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000594 	.word	0x20000594

08008bd4 <memchr>:
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	b2c9      	uxtb	r1, r1
 8008bda:	4402      	add	r2, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	d101      	bne.n	8008be6 <memchr+0x12>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e003      	b.n	8008bee <memchr+0x1a>
 8008be6:	7804      	ldrb	r4, [r0, #0]
 8008be8:	3301      	adds	r3, #1
 8008bea:	428c      	cmp	r4, r1
 8008bec:	d1f6      	bne.n	8008bdc <memchr+0x8>
 8008bee:	bd10      	pop	{r4, pc}

08008bf0 <_realloc_r>:
 8008bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	b921      	cbnz	r1, 8008c06 <_realloc_r+0x16>
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c02:	f7ff bc49 	b.w	8008498 <_malloc_r>
 8008c06:	b92a      	cbnz	r2, 8008c14 <_realloc_r+0x24>
 8008c08:	f7ff fbdc 	bl	80083c4 <_free_r>
 8008c0c:	4625      	mov	r5, r4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	f000 f81a 	bl	8008c4c <_malloc_usable_size_r>
 8008c18:	4284      	cmp	r4, r0
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	d802      	bhi.n	8008c24 <_realloc_r+0x34>
 8008c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c22:	d8f4      	bhi.n	8008c0e <_realloc_r+0x1e>
 8008c24:	4621      	mov	r1, r4
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7ff fc36 	bl	8008498 <_malloc_r>
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	b908      	cbnz	r0, 8008c34 <_realloc_r+0x44>
 8008c30:	4645      	mov	r5, r8
 8008c32:	e7ec      	b.n	8008c0e <_realloc_r+0x1e>
 8008c34:	42b4      	cmp	r4, r6
 8008c36:	4622      	mov	r2, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	bf28      	it	cs
 8008c3c:	4632      	movcs	r2, r6
 8008c3e:	f7ff fbb3 	bl	80083a8 <memcpy>
 8008c42:	4629      	mov	r1, r5
 8008c44:	4638      	mov	r0, r7
 8008c46:	f7ff fbbd 	bl	80083c4 <_free_r>
 8008c4a:	e7f1      	b.n	8008c30 <_realloc_r+0x40>

08008c4c <_malloc_usable_size_r>:
 8008c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c50:	1f18      	subs	r0, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfbc      	itt	lt
 8008c56:	580b      	ldrlt	r3, [r1, r0]
 8008c58:	18c0      	addlt	r0, r0, r3
 8008c5a:	4770      	bx	lr

08008c5c <_init>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr

08008c68 <_fini>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr
